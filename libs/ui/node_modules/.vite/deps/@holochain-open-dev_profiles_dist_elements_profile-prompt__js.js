import {
  HasSlotController
} from "./chunk-5HU42PV4.js";
import {
  SlIconButton
} from "./chunk-4TTHA5FM.js";
import {
  LocalizeController,
  animateTo,
  getAnimation,
  localized,
  msg,
  setDefaultAnimation,
  stopAnimations,
  waitForEvent,
  watch
} from "./chunk-VJMV55IO.js";
import {
  ShoelaceElement,
  __decorateClass,
  component_styles_default,
  notifyError,
  sharedStyles
} from "./chunk-WEAYHYO7.js";
import "./chunk-DURKRWBH.js";
import {
  StoreSubscriber
} from "./chunk-4Z3R6YLO.js";
import "./chunk-22VNO7Y6.js";
import "./chunk-IFZRPEIZ.js";
import "./chunk-CCLU3OJM.js";
import "./chunk-2AWGVYMQ.js";
import "./chunk-ZPGR2TPQ.js";
import {
  __decorate
} from "./chunk-GXRAUBTD.js";
import {
  consume,
  profilesStoreContext
} from "./chunk-Z4I2FY2W.js";
import "./chunk-IGAVQDRX.js";
import "./chunk-3UHMJHWB.js";
import {
  classMap
} from "./chunk-XHTW3CQQ.js";
import {
  customElement,
  property,
  query
} from "./chunk-LLKFEKJC.js";
import {
  LitElement,
  html
} from "./chunk-KJJ2SZCS.js";
import "./chunk-HKTNVJXR.js";
import {
  css
} from "./chunk-QK5UQRR6.js";
import "./chunk-PDNTOHOW.js";
import "./chunk-TCQZMY3T.js";

// ../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.4GRKCE6W.js
var alert_styles_default = css`
  ${component_styles_default}

  :host {
    display: contents;

    /* For better DX, we'll reset the margin here so the base part can inherit it */
    margin: 0;
  }

  .alert {
    position: relative;
    display: flex;
    align-items: stretch;
    background-color: var(--sl-panel-background-color);
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-top-width: calc(var(--sl-panel-border-width) * 3);
    border-radius: var(--sl-border-radius-medium);
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-normal);
    line-height: 1.6;
    color: var(--sl-color-neutral-700);
    margin: inherit;
  }

  .alert:not(.alert--has-icon) .alert__icon,
  .alert:not(.alert--closable) .alert__close-button {
    display: none;
  }

  .alert__icon {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-large);
    padding-inline-start: var(--sl-spacing-large);
  }

  .alert--primary {
    border-top-color: var(--sl-color-primary-600);
  }

  .alert--primary .alert__icon {
    color: var(--sl-color-primary-600);
  }

  .alert--success {
    border-top-color: var(--sl-color-success-600);
  }

  .alert--success .alert__icon {
    color: var(--sl-color-success-600);
  }

  .alert--neutral {
    border-top-color: var(--sl-color-neutral-600);
  }

  .alert--neutral .alert__icon {
    color: var(--sl-color-neutral-600);
  }

  .alert--warning {
    border-top-color: var(--sl-color-warning-600);
  }

  .alert--warning .alert__icon {
    color: var(--sl-color-warning-600);
  }

  .alert--danger {
    border-top-color: var(--sl-color-danger-600);
  }

  .alert--danger .alert__icon {
    color: var(--sl-color-danger-600);
  }

  .alert__message {
    flex: 1 1 auto;
    display: block;
    padding: var(--sl-spacing-large);
    overflow: hidden;
  }

  .alert__close-button {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-medium);
    padding-inline-end: var(--sl-spacing-medium);
  }
`;

// ../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.CO27QAHO.js
var toastStack = Object.assign(document.createElement("div"), { className: "sl-toast-stack" });
var SlAlert = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "icon", "suffix");
    this.localize = new LocalizeController(this);
    this.open = false;
    this.closable = false;
    this.variant = "primary";
    this.duration = Infinity;
  }
  firstUpdated() {
    this.base.hidden = !this.open;
  }
  restartAutoHide() {
    clearTimeout(this.autoHideTimeout);
    if (this.open && this.duration < Infinity) {
      this.autoHideTimeout = window.setTimeout(() => this.hide(), this.duration);
    }
  }
  handleCloseClick() {
    this.hide();
  }
  handleMouseMove() {
    this.restartAutoHide();
  }
  async handleOpenChange() {
    if (this.open) {
      this.emit("sl-show");
      if (this.duration < Infinity) {
        this.restartAutoHide();
      }
      await stopAnimations(this.base);
      this.base.hidden = false;
      const { keyframes, options } = getAnimation(this, "alert.show", { dir: this.localize.dir() });
      await animateTo(this.base, keyframes, options);
      this.emit("sl-after-show");
    } else {
      this.emit("sl-hide");
      clearTimeout(this.autoHideTimeout);
      await stopAnimations(this.base);
      const { keyframes, options } = getAnimation(this, "alert.hide", { dir: this.localize.dir() });
      await animateTo(this.base, keyframes, options);
      this.base.hidden = true;
      this.emit("sl-after-hide");
    }
  }
  handleDurationChange() {
    this.restartAutoHide();
  }
  /** Shows the alert. */
  async show() {
    if (this.open) {
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the alert */
  async hide() {
    if (!this.open) {
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  /**
   * Displays the alert as a toast notification. This will move the alert out of its position in the DOM and, when
   * dismissed, it will be removed from the DOM completely. By storing a reference to the alert, you can reuse it by
   * calling this method again. The returned promise will resolve after the alert is hidden.
   */
  async toast() {
    return new Promise((resolve) => {
      if (toastStack.parentElement === null) {
        document.body.append(toastStack);
      }
      toastStack.appendChild(this);
      requestAnimationFrame(() => {
        this.clientWidth;
        this.show();
      });
      this.addEventListener(
        "sl-after-hide",
        () => {
          toastStack.removeChild(this);
          resolve();
          if (toastStack.querySelector("sl-alert") === null) {
            toastStack.remove();
          }
        },
        { once: true }
      );
    });
  }
  render() {
    return html`
      <div
        part="base"
        class=${classMap({
      alert: true,
      "alert--open": this.open,
      "alert--closable": this.closable,
      "alert--has-icon": this.hasSlotController.test("icon"),
      "alert--primary": this.variant === "primary",
      "alert--success": this.variant === "success",
      "alert--neutral": this.variant === "neutral",
      "alert--warning": this.variant === "warning",
      "alert--danger": this.variant === "danger"
    })}
        role="alert"
        aria-hidden=${this.open ? "false" : "true"}
        @mousemove=${this.handleMouseMove}
      >
        <div part="icon" class="alert__icon">
          <slot name="icon"></slot>
        </div>

        <div part="message" class="alert__message" aria-live="polite">
          <slot></slot>
        </div>

        ${this.closable ? html`
              <sl-icon-button
                part="close-button"
                exportparts="base:close-button__base"
                class="alert__close-button"
                name="x-lg"
                library="system"
                label=${this.localize.term("close")}
                @click=${this.handleCloseClick}
              ></sl-icon-button>
            ` : ""}
      </div>
    `;
  }
};
SlAlert.styles = alert_styles_default;
SlAlert.dependencies = { "sl-icon-button": SlIconButton };
__decorateClass([
  query('[part~="base"]')
], SlAlert.prototype, "base", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], SlAlert.prototype, "open", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], SlAlert.prototype, "closable", 2);
__decorateClass([
  property({ reflect: true })
], SlAlert.prototype, "variant", 2);
__decorateClass([
  property({ type: Number })
], SlAlert.prototype, "duration", 2);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlAlert.prototype, "handleOpenChange", 1);
__decorateClass([
  watch("duration")
], SlAlert.prototype, "handleDurationChange", 1);
setDefaultAnimation("alert.show", {
  keyframes: [
    { opacity: 0, scale: 0.8 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("alert.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.8 }
  ],
  options: { duration: 250, easing: "ease" }
});

// ../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.H37XQX4R.js
SlAlert.define("sl-alert");

// ../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.2WKHOBLT.js
var card_styles_default = css`
  ${component_styles_default}

  :host {
    --border-color: var(--sl-color-neutral-200);
    --border-radius: var(--sl-border-radius-medium);
    --border-width: 1px;
    --padding: var(--sl-spacing-large);

    display: inline-block;
  }

  .card {
    display: flex;
    flex-direction: column;
    background-color: var(--sl-panel-background-color);
    box-shadow: var(--sl-shadow-x-small);
    border: solid var(--border-width) var(--border-color);
    border-radius: var(--border-radius);
  }

  .card__image {
    display: flex;
    border-top-left-radius: var(--border-radius);
    border-top-right-radius: var(--border-radius);
    margin: calc(-1 * var(--border-width));
    overflow: hidden;
  }

  .card__image::slotted(img) {
    display: block;
    width: 100%;
  }

  .card:not(.card--has-image) .card__image {
    display: none;
  }

  .card__header {
    display: block;
    border-bottom: solid var(--border-width) var(--border-color);
    padding: calc(var(--padding) / 2) var(--padding);
  }

  .card:not(.card--has-header) .card__header {
    display: none;
  }

  .card:not(.card--has-image) .card__header {
    border-top-left-radius: var(--border-radius);
    border-top-right-radius: var(--border-radius);
  }

  .card__body {
    display: block;
    padding: var(--padding);
  }

  .card--has-footer .card__footer {
    display: block;
    border-top: solid var(--border-width) var(--border-color);
    padding: var(--padding);
  }

  .card:not(.card--has-footer) .card__footer {
    display: none;
  }
`;

// ../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.O4X64UPC.js
var SlCard = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "footer", "header", "image");
  }
  render() {
    return html`
      <div
        part="base"
        class=${classMap({
      card: true,
      "card--has-footer": this.hasSlotController.test("footer"),
      "card--has-image": this.hasSlotController.test("image"),
      "card--has-header": this.hasSlotController.test("header")
    })}
      >
        <slot name="image" part="image" class="card__image"></slot>
        <slot name="header" part="header" class="card__header"></slot>
        <slot part="body" class="card__body"></slot>
        <slot name="footer" part="footer" class="card__footer"></slot>
      </div>
    `;
  }
};
SlCard.styles = card_styles_default;

// ../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.23ERHLGG.js
SlCard.define("sl-card");

// node_modules/@holochain-open-dev/profiles/dist/elements/create-profile.js
var CreateProfile = class CreateProfile2 extends LitElement {
  /** Private properties */
  async createProfile(profile) {
    try {
      await this.store.client.createProfile(profile);
      this.dispatchEvent(new CustomEvent("profile-created", {
        detail: {
          profile
        },
        bubbles: true,
        composed: true
      }));
      await this.store.myProfile.reload();
    } catch (e) {
      console.error(e);
      notifyError(msg("Error creating the profile"));
    }
  }
  render() {
    return html`
      <sl-card>
        <div class="column">
          <span
            class="title"
            style="margin-bottom: 16px; align-self: flex-start"
            >${msg("Create Profile")}</span
          >
          <edit-profile
            .saveProfileLabel=${msg("Create Profile")}
            .store=${this.store}
            @save-profile=${(e) => this.createProfile(e.detail.profile)}
          ></edit-profile></div
      ></sl-card>
    `;
  }
};
CreateProfile.styles = [sharedStyles];
__decorate([
  consume({ context: profilesStoreContext, subscribe: true }),
  property()
], CreateProfile.prototype, "store", void 0);
CreateProfile = __decorate([
  localized(),
  customElement("create-profile")
], CreateProfile);

// node_modules/@holochain-open-dev/profiles/dist/elements/profile-prompt.js
var ProfilePrompt = class ProfilePrompt2 extends LitElement {
  constructor() {
    super(...arguments);
    this._myProfile = new StoreSubscriber(this, () => this.store.myProfile, () => []);
  }
  renderPrompt(myProfile) {
    if (myProfile)
      return html`<slot></slot>`;
    return html`
      <div
        class="column"
        style="align-items: center; justify-content: center; flex: 1; padding-bottom: 10px;"
      >
        <div class="column" style="align-items: center;">
          <slot name="hero"></slot>
          <create-profile></create-profile>
        </div>
      </div>
    `;
  }
  render() {
    switch (this._myProfile.value.status) {
      case "pending":
        return html` <div
          class="column"
          style="align-items: center; justify-content: center; flex: 1;"
        >
          <sl-spinner style="font-size: 2rem;"></sl-spinner>
        </div>`;
      case "complete":
        return this.renderPrompt(this._myProfile.value.value);
      case "error":
        return html`<display-error
          .headline=${msg("Error fetching your profile")}
          .error=${this._myProfile.value.error}
        ></display-error> `;
    }
  }
  static get styles() {
    return [
      sharedStyles,
      css`
        :host {
          display: flex;
          flex: 1;
        }
      `
    ];
  }
};
__decorate([
  consume({ context: profilesStoreContext, subscribe: true }),
  property()
], ProfilePrompt.prototype, "store", void 0);
ProfilePrompt = __decorate([
  localized(),
  customElement("profile-prompt")
], ProfilePrompt);
export {
  ProfilePrompt
};
//# sourceMappingURL=@holochain-open-dev_profiles_dist_elements_profile-prompt__js.js.map
