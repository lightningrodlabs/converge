{
  "version": 3,
  "sources": ["../../../../node_modules/@material/mwc-base/aria-property.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {PropertyDeclaration, ReactiveElement} from '@lit/reactive-element';\n\n/**\n * A value for the `aria-haspopup` ARIA attribute.\n */\nexport type AriaHasPopup =\n    'false'|'true'|'menu'|'listbox'|'tree'|'grid'|'dialog';\n\n/**\n * Expose protected statics on ReactiveElement\n */\ninterface ReactiveElementInternals {\n  getPropertyDescriptor(name: PropertyKey, key: string): PropertyDescriptor;\n  getPropertyOptions(name: PropertyKey): PropertyDeclaration;\n}\n\n/**\n * TypeScript version of the decorator\n * @see https://www.typescriptlang.org/docs/handbook/decorators.html#property-decorators\n */\nfunction tsDecorator(\n    prototype: {}, name: string, descriptor?: PropertyDescriptor) {\n  const constructor =\n      (prototype.constructor as unknown as ReactiveElementInternals);\n  if (!descriptor) {\n    /**\n     * lit uses internal properties with two leading underscores to\n     * provide storage for accessors\n     */\n    const litInternalPropertyKey = `__${name}`;\n    descriptor =\n        constructor.getPropertyDescriptor(name, litInternalPropertyKey);\n    if (!descriptor) {\n      throw new Error('@ariaProperty must be used after a @property decorator');\n    }\n  }\n\n  // descriptor must exist at this point, reassign so typescript understands\n  const propDescriptor = descriptor;\n  let attribute = '';\n\n  if (!propDescriptor.set) {\n    throw new Error(`@ariaProperty requires a setter for ${name}`);\n  }\n\n\n  // TODO(b/202853219): Remove this check when internal tooling is\n  // compatible\n  // tslint:disable-next-line:no-any bail if applied to internal generated class\n  if ((prototype as any).dispatchWizEvent) {\n    return descriptor;\n  }\n\n  const wrappedDescriptor: PropertyDescriptor = {\n    configurable: true,\n    enumerable: true,\n    set(this: ReactiveElement, value: unknown) {\n      if (attribute === '') {\n        const options = constructor.getPropertyOptions(name);\n        // if attribute is not a string, use `name` instead\n        attribute =\n            typeof options.attribute === 'string' ? options.attribute : name;\n      }\n      if (this.hasAttribute(attribute)) {\n        this.removeAttribute(attribute);\n      }\n      propDescriptor.set!.call(this, value);\n    }\n  };\n\n  if (propDescriptor.get) {\n    wrappedDescriptor.get = function(this: ReactiveElement) {\n      return propDescriptor.get!.call(this);\n    };\n  }\n\n  return wrappedDescriptor;\n}\n\n/**\n * A property decorator proxies an aria attribute to an internal node\n *\n * This decorator is only intended for use with ARIA attributes, such as `role`\n * and `aria-label` due to screenreader needs.\n *\n * Upon first render, `@ariaProperty` will remove the attribute from the host\n * element to prevent screenreaders from reading the host instead of the\n * internal node.\n *\n * This decorator should only be used for non-Symbol public fields decorated\n * with `@property`, or on a setter with an optional getter.\n *\n * @example\n * ```ts\n * class MyElement {\n *   @ariaProperty\n *   @property({ type: String, attribute: 'aria-label' })\n *   ariaLabel!: string;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function ariaProperty(\n    protoOrDescriptor: {}, name?: string,\n    // tslint:disable-next-line:no-any any is required as a return type from decorators\n    descriptor?: PropertyDescriptor): any {\n  if (name !== undefined) {\n    return tsDecorator(protoOrDescriptor, name, descriptor);\n  } else {\n    throw new Error('@ariaProperty only supports TypeScript Decorators');\n  }\n}\n"],
  "mappings": ";AA0BA,SAAS,YACL,WAAe,MAAc,YAA+B;AAC9D,QAAM,cACD,UAAU;AACf,MAAI,CAAC,YAAY;AAKf,UAAM,yBAAyB,KAAK,IAAI;AACxC,iBACI,YAAY,sBAAsB,MAAM,sBAAsB;AAClE,QAAI,CAAC,YAAY;AACf,YAAM,IAAI,MAAM,wDAAwD;;;AAK5E,QAAM,iBAAiB;AACvB,MAAI,YAAY;AAEhB,MAAI,CAAC,eAAe,KAAK;AACvB,UAAM,IAAI,MAAM,uCAAuC,IAAI,EAAE;;AAO/D,MAAK,UAAkB,kBAAkB;AACvC,WAAO;;AAGT,QAAM,oBAAwC;IAC5C,cAAc;IACd,YAAY;IACZ,IAA2B,OAAc;AACvC,UAAI,cAAc,IAAI;AACpB,cAAM,UAAU,YAAY,mBAAmB,IAAI;AAEnD,oBACI,OAAO,QAAQ,cAAc,WAAW,QAAQ,YAAY;;AAElE,UAAI,KAAK,aAAa,SAAS,GAAG;AAChC,aAAK,gBAAgB,SAAS;;AAEhC,qBAAe,IAAK,KAAK,MAAM,KAAK;IACtC;;AAGF,MAAI,eAAe,KAAK;AACtB,sBAAkB,MAAM,WAAA;AACtB,aAAO,eAAe,IAAK,KAAK,IAAI;IACtC;;AAGF,SAAO;AACT;AA0BM,SAAU,aACZ,mBAAuB,MAEvB,YAA+B;AACjC,MAAI,SAAS,QAAW;AACtB,WAAO,YAAY,mBAAmB,MAAM,UAAU;SACjD;AACL,UAAM,IAAI,MAAM,mDAAmD;;AAEvE;",
  "names": []
}
