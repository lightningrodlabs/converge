{
  "version": 3,
  "sources": ["../../../../node_modules/@material/mwc-base/observer.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n// tslint:disable:no-any\n\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\n\n/**\n * Observer function type.\n */\nexport interface Observer {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (value: any, old: any): void;\n}\n\ntype ReactiveElementClass = typeof ReactiveElement;\ninterface ReactiveElementClassWithObservers extends ReactiveElementClass {\n  // tslint:disable-next-line:enforce-name-casing\n  _observers: Map<PropertyKey, Observer>;\n}\n\n/**\n * Specifies an observer callback that is run when the decorated property\n * changes. The observer receives the current and old value as arguments.\n */\nexport const observer = (observer: Observer) =>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (proto: any, propName: PropertyKey) => {\n      // if we haven't wrapped `updated` in this class, do so\n      if (!(proto.constructor as ReactiveElementClassWithObservers)\n               ._observers) {\n        proto.constructor._observers = new Map<PropertyKey, Observer>();\n        const userUpdated = proto.updated;\n        proto.updated = function(\n            this: ReactiveElement, changedProperties: PropertyValues) {\n          userUpdated.call(this, changedProperties);\n          changedProperties.forEach((v, k) => {\n            const observers =\n                (this.constructor as ReactiveElementClassWithObservers)\n                    ._observers;\n            const observer = observers.get(k);\n            if (observer !== undefined) {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              observer.call(this, (this as any)[k], v);\n            }\n          });\n        };\n        // clone any existing observers (superclasses)\n        // eslint-disable-next-line no-prototype-builtins\n      } else if (!proto.constructor.hasOwnProperty('_observers')) {\n        const observers = proto.constructor._observers;\n        proto.constructor._observers = new Map();\n        observers.forEach(\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (v: any, k: PropertyKey) => proto.constructor._observers.set(k, v));\n      }\n      // set this method\n      proto.constructor._observers.set(propName, observer);\n    };\n"],
  "mappings": ";AA8BO,IAAM,WAAW,CAACA;;EAErB,CAAC,OAAY,aAAyB;AAEpC,QAAI,CAAE,MAAM,YACF,YAAY;AACpB,YAAM,YAAY,aAAa,oBAAI,IAAG;AACtC,YAAM,cAAc,MAAM;AAC1B,YAAM,UAAU,SACW,mBAAiC;AAC1D,oBAAY,KAAK,MAAM,iBAAiB;AACxC,0BAAkB,QAAQ,CAAC,GAAG,MAAK;AACjC,gBAAM,YACD,KAAK,YACD;AACT,gBAAMA,YAAW,UAAU,IAAI,CAAC;AAChC,cAAIA,cAAa,QAAW;AAE1B,YAAAA,UAAS,KAAK,MAAO,KAAa,CAAC,GAAG,CAAC;;QAE3C,CAAC;MACH;eAGS,CAAC,MAAM,YAAY,eAAe,YAAY,GAAG;AAC1D,YAAM,YAAY,MAAM,YAAY;AACpC,YAAM,YAAY,aAAa,oBAAI,IAAG;AACtC,gBAAU;;QAEN,CAAC,GAAQ,MAAmB,MAAM,YAAY,WAAW,IAAI,GAAG,CAAC;MAAC;;AAGxE,UAAM,YAAY,WAAW,IAAI,UAAUA,SAAQ;EACrD;;",
  "names": ["observer"]
}
