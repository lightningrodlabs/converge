{
  "version": 3,
  "sources": ["../../@holochain-open-dev/profiles/src/profiles-client.ts", "../../@holochain-open-dev/profiles/src/config.ts", "../../@holochain-open-dev/profiles/src/profiles-store.ts"],
  "sourcesContent": ["import { decodeEntry, ZomeClient } from \"@holochain-open-dev/utils\";\nimport {\n  AgentPubKey,\n  Record,\n  AppAgentClient,\n  RoleName,\n} from \"@holochain/client\";\nimport { Profile, ProfilesSignal } from \"./types\";\n\nexport class ProfilesClient extends ZomeClient<ProfilesSignal> {\n  constructor(\n    public client: AppAgentClient,\n    public roleName: RoleName,\n    public zomeName = \"profiles\"\n  ) {\n    super(client, roleName, zomeName);\n  }\n\n  /**\n   * Get the profile for the given agent, if they have created it\n   *\n   * @param agentPubKey the agent to get the profile for\n   * @returns the profile of the agent, if they have created one\n   */\n  async getAgentProfile(\n    agentPubKey: AgentPubKey\n  ): Promise<Profile | undefined> {\n    const record: Record | undefined = await this.callZome(\n      \"get_agent_profile\",\n      agentPubKey\n    );\n\n    return record ? decodeEntry(record) : undefined;\n  }\n\n  /**\n   * Search profiles that start with nicknameFilter\n   *\n   * @param nicknameFilter must be of at least 3 characters\n   * @returns the agents with the nickname starting with nicknameFilter\n   */\n  async searchAgents(nicknameFilter: string): Promise<AgentPubKey[]> {\n    return this.callZome(\"search_agents\", nicknameFilter);\n  }\n\n  /**\n   * Get all the agents in the DHT that have created a profile\n   *\n   * @returns the agent public keys of all agents that have created a profile\n   */\n  async getAgentsWithProfile(): Promise<AgentPubKey[]> {\n    return this.callZome(\"get_agents_with_profile\", null);\n  }\n\n  /**\n   * Create my profile\n   *\n   * @param profile the profile to create\n   */\n  async createProfile(profile: Profile): Promise<void> {\n    return this.callZome(\"create_profile\", profile);\n  }\n\n  /**\n   * Update my profile\n   *\n   * @param profile the profile to create\n   */\n  async updateProfile(profile: Profile): Promise<void> {\n    return this.callZome(\"update_profile\", profile);\n  }\n}\n", "export interface FieldConfig {\n  name: string;\n  label: string;\n  required: boolean;\n}\n\nexport interface ProfilesConfig {\n  avatarMode: 'identicon' | 'avatar-required' | 'avatar-optional';\n  additionalFields: FieldConfig[];\n  minNicknameLength: number;\n}\n\nexport const defaultConfig: ProfilesConfig = {\n  avatarMode: 'avatar-optional',\n  additionalFields: [],\n  minNicknameLength: 3,\n};\n", "import { LazyHoloHashMap, slice } from \"@holochain-open-dev/utils\";\nimport {\n  asyncDeriveStore,\n  AsyncReadable,\n  asyncReadable,\n  lazyLoadAndPoll,\n  joinAsyncMap,\n  lazyLoad,\n  manualReloadStore,\n} from \"@holochain-open-dev/stores\";\nimport { AgentPubKey } from \"@holochain/client\";\n\nimport { ProfilesClient } from \"./profiles-client.js\";\nimport { Profile } from \"./types.js\";\nimport { defaultConfig, ProfilesConfig } from \"./config.js\";\n\nexport class ProfilesStore {\n  config: ProfilesConfig;\n\n  constructor(\n    public client: ProfilesClient,\n    config: Partial<ProfilesConfig> = {}\n  ) {\n    this.config = { ...defaultConfig, ...config };\n  }\n\n  /**\n   * Fetches all the agents that have created a profile in the DHT\n   */\n  agentsWithProfile = lazyLoadAndPoll(\n    () => this.client.getAgentsWithProfile(),\n    1000\n  );\n\n  /**\n   * Fetches the profiles for all agents in the DHT\n   *\n   * This will get slower as the number of agents in the DHT increases\n   */\n  allProfiles = asyncDeriveStore(\n    this.agentsWithProfile,\n    (agents) =>\n      this.agentsProfiles(agents) as AsyncReadable<\n        ReadonlyMap<AgentPubKey, Profile>\n      >\n  );\n\n  // Fetches the profile for the given agent\n  profiles = new LazyHoloHashMap((agent: AgentPubKey) =>\n    asyncReadable<Profile | undefined>(async (set) => {\n      const profile = await this.client.getAgentProfile(agent);\n      set(profile);\n\n      return this.client.onSignal((signal) => {\n        if (this.client.client.myPubKey.toString() !== agent.toString()) return;\n        if (!(signal.type === \"EntryCreated\" || signal.type === \"EntryUpdated\"))\n          return;\n        set(signal.app_entry);\n      });\n    })\n  );\n\n  // Fetches your profile\n  // TODO: change the manual implementation when signals are working consistently\n  myProfile = manualReloadStore(async () =>\n    this.client.getAgentProfile(this.client.client.myPubKey)\n  );\n\n  // Fetches the profiles for the given agents\n  agentsProfiles(\n    agents: Array<AgentPubKey>\n  ): AsyncReadable<ReadonlyMap<AgentPubKey, Profile | undefined>> {\n    return joinAsyncMap(slice(this.profiles, agents));\n  }\n\n  searchProfiles(\n    searchFilter: string\n  ): AsyncReadable<ReadonlyMap<AgentPubKey, Profile>> {\n    return asyncDeriveStore(\n      lazyLoad(async () => this.client.searchAgents(searchFilter)),\n      (agents) =>\n        this.agentsProfiles(agents) as AsyncReadable<\n          ReadonlyMap<AgentPubKey, Profile>\n        >\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AASM,IAAO,iBAAP,cAA8B,WAA0B;EAC5D,YACS,QACA,UACA,WAAW,YAAU;AAE5B,UAAM,QAAQ,UAAU,QAAQ;AAJzB,SAAA,SAAA;AACA,SAAA,WAAA;AACA,SAAA,WAAA;EAGT;;;;;;;EAQA,MAAM,gBACJ,aAAwB;AAExB,UAAM,SAA6B,MAAM,KAAK,SAC5C,qBACA,WAAW;AAGb,WAAO,SAAS,YAAY,MAAM,IAAI;EACxC;;;;;;;EAQA,MAAM,aAAa,gBAAsB;AACvC,WAAO,KAAK,SAAS,iBAAiB,cAAc;EACtD;;;;;;EAOA,MAAM,uBAAoB;AACxB,WAAO,KAAK,SAAS,2BAA2B,IAAI;EACtD;;;;;;EAOA,MAAM,cAAc,SAAgB;AAClC,WAAO,KAAK,SAAS,kBAAkB,OAAO;EAChD;;;;;;EAOA,MAAM,cAAc,SAAgB;AAClC,WAAO,KAAK,SAAS,kBAAkB,OAAO;EAChD;;;;AC1DK,IAAM,gBAAgC;EAC3C,YAAY;EACZ,kBAAkB,CAAA;EAClB,mBAAmB;;;;ACCf,IAAO,gBAAP,MAAoB;EAGxB,YACS,QACP,SAAkC,CAAA,GAAE;AAD7B,SAAA,SAAA;AAST,SAAA,oBAAoB,gBAClB,MAAM,KAAK,OAAO,qBAAoB,GACtC,GAAI;AAQN,SAAA,cAAc,iBACZ,KAAK,mBACL,CAAC,WACC,KAAK,eAAe,MAAM,CAEzB;AAIL,SAAA,WAAW,IAAI,gBAAgB,CAAC,UAC9B,cAAmC,OAAO,QAAO;AAC/C,YAAM,UAAU,MAAM,KAAK,OAAO,gBAAgB,KAAK;AACvD,UAAI,OAAO;AAEX,aAAO,KAAK,OAAO,SAAS,CAAC,WAAU;AACrC,YAAI,KAAK,OAAO,OAAO,SAAS,SAAQ,MAAO,MAAM,SAAQ;AAAI;AACjE,YAAI,EAAE,OAAO,SAAS,kBAAkB,OAAO,SAAS;AACtD;AACF,YAAI,OAAO,SAAS;MACtB,CAAC;IACH,CAAC,CAAC;AAKJ,SAAA,YAAY,kBAAkB,YAC5B,KAAK,OAAO,gBAAgB,KAAK,OAAO,OAAO,QAAQ,CAAC;AA1CxD,SAAK,SAAS,EAAE,GAAG,eAAe,GAAG,OAAM;EAC7C;;EA6CA,eACE,QAA0B;AAE1B,WAAO,aAAa,MAAM,KAAK,UAAU,MAAM,CAAC;EAClD;EAEA,eACE,cAAoB;AAEpB,WAAO,iBACL,SAAS,YAAY,KAAK,OAAO,aAAa,YAAY,CAAC,GAC3D,CAAC,WACC,KAAK,eAAe,MAAM,CAEzB;EAEP;;",
  "names": []
}
