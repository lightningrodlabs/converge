{
  "version": 3,
  "sources": ["../../../../node_modules/@material/mwc-base/utils.ts", "../../../../node_modules/@material/mwc-base/base-element.ts", "../../../../node_modules/@material/base/foundation.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n/**\n * Determines whether a node is an element.\n *\n * @param node Node to check\n */\nexport const isNodeElement = (node: Node): node is Element => {\n  return node.nodeType === Node.ELEMENT_NODE;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type Constructor<T> = new (...args: any[]) => T;\n\nexport function addHasRemoveClass(element: HTMLElement) {\n  return {\n    addClass: (className: string) => {\n      element.classList.add(className);\n    },\n    removeClass: (className: string) => {\n      element.classList.remove(className);\n    },\n    hasClass: (className: string) => element.classList.contains(className),\n  };\n}\n\nlet supportsPassive = false;\nconst fn = () => { /* empty listener */ };\nconst optionsBlock: AddEventListenerOptions = {\n  get passive() {\n    supportsPassive = true;\n    return false;\n  }\n};\ndocument.addEventListener('x', fn, optionsBlock);\ndocument.removeEventListener('x', fn);\n/**\n * Do event listeners suport the `passive` option?\n */\nexport const supportsPassiveEventListener = supportsPassive;\n\nexport const deepActiveElementPath = (doc = window.document): Element[] => {\n  let activeElement = doc.activeElement;\n  const path: Element[] = [];\n\n  if (!activeElement) {\n    return path;\n  }\n\n  while (activeElement) {\n    path.push(activeElement);\n    if (activeElement.shadowRoot) {\n      activeElement = activeElement.shadowRoot.activeElement;\n    } else {\n      break;\n    }\n  }\n\n  return path;\n};\n\nexport const doesElementContainFocus = (element: HTMLElement): boolean => {\n  const activePath = deepActiveElementPath();\n\n  if (!activePath.length) {\n    return false;\n  }\n\n  const deepActiveElement = activePath[activePath.length - 1];\n  const focusEv =\n      new Event('check-if-focused', {bubbles: true, composed: true});\n  let composedPath: EventTarget[] = [];\n  const listener = (ev: Event) => {\n    composedPath = ev.composedPath();\n  };\n\n  document.body.addEventListener('check-if-focused', listener);\n  deepActiveElement.dispatchEvent(focusEv);\n  document.body.removeEventListener('check-if-focused', listener);\n\n  return composedPath.indexOf(element) !== -1;\n};\n\nexport interface RippleInterface {\n  startPress: (e?: Event) => void;\n  endPress: () => void;\n  startFocus: () => void;\n  endFocus: () => void;\n  startHover: () => void;\n  endHover: () => void;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport {MDCFoundation} from '@material/base/foundation.js';\nimport {LitElement} from 'lit';\n\nimport {Constructor} from './utils.js';\n\nexport {CustomEventListener, EventType, SpecificEventListener} from '@material/base/types.js';\nexport {addHasRemoveClass} from './utils.js';\n\n/** @soyCompatible */\nexport abstract class BaseElement extends LitElement {\n  /**\n   * Root element for MDC Foundation usage.\n   *\n   * Define in your component with the `@query` decorator\n   */\n  protected abstract mdcRoot: HTMLElement;\n\n  /**\n   * Return the foundation class for this component\n   */\n  protected abstract readonly mdcFoundationClass?: Constructor<MDCFoundation>;\n\n  /**\n   * An instance of the MDC Foundation class to attach to the root element\n   */\n  protected abstract mdcFoundation?: MDCFoundation;\n\n  /**\n   * Create the adapter for the `mdcFoundation`.\n   *\n   * Override and return an object with the Adapter's functions implemented:\n   *\n   *    {\n   *      addClass: () => {},\n   *      removeClass: () => {},\n   *      ...\n   *    }\n   */\n  protected abstract createAdapter(): unknown;\n\n  override click() {\n    if (this.mdcRoot) {\n      this.mdcRoot.focus();\n      this.mdcRoot.click();\n      return;\n    }\n\n    super.click();\n  }\n\n  /**\n   * Create and attach the MDC Foundation to the instance\n   */\n  protected createFoundation() {\n    if (this.mdcFoundation !== undefined) {\n      this.mdcFoundation.destroy();\n    }\n    if (this.mdcFoundationClass) {\n      this.mdcFoundation = new this.mdcFoundationClass(this.createAdapter());\n      this.mdcFoundation.init();\n    }\n  }\n\n  protected override firstUpdated() {\n    this.createFoundation();\n  }\n}\n", null],
  "mappings": ";;;;;AAqBM,SAAU,kBAAkB,SAAoB;AACpD,SAAO;IACL,UAAU,CAAC,cAAqB;AAC9B,cAAQ,UAAU,IAAI,SAAS;IACjC;IACA,aAAa,CAAC,cAAqB;AACjC,cAAQ,UAAU,OAAO,SAAS;IACpC;IACA,UAAU,CAAC,cAAsB,QAAQ,UAAU,SAAS,SAAS;;AAEzE;AAEA,IAAI,kBAAkB;AACtB,IAAM,KAAK,MAAK;AAAwB;AACxC,IAAM,eAAwC;EAC5C,IAAI,UAAO;AACT,sBAAkB;AAClB,WAAO;EACT;;AAEF,SAAS,iBAAiB,KAAK,IAAI,YAAY;AAC/C,SAAS,oBAAoB,KAAK,EAAE;AAM7B,IAAM,wBAAwB,CAAC,MAAM,OAAO,aAAuB;AACxE,MAAI,gBAAgB,IAAI;AACxB,QAAM,OAAkB,CAAA;AAExB,MAAI,CAAC,eAAe;AAClB,WAAO;;AAGT,SAAO,eAAe;AACpB,SAAK,KAAK,aAAa;AACvB,QAAI,cAAc,YAAY;AAC5B,sBAAgB,cAAc,WAAW;WACpC;AACL;;;AAIJ,SAAO;AACT;;;AC/CM,IAAgB,cAAhB,cAAoC,WAAU;EA+BzC,QAAK;AACZ,QAAI,KAAK,SAAS;AAChB,WAAK,QAAQ,MAAK;AAClB,WAAK,QAAQ,MAAK;AAClB;;AAGF,UAAM,MAAK;EACb;;;;EAKU,mBAAgB;AACxB,QAAI,KAAK,kBAAkB,QAAW;AACpC,WAAK,cAAc,QAAO;;AAE5B,QAAI,KAAK,oBAAoB;AAC3B,WAAK,gBAAgB,IAAI,KAAK,mBAAmB,KAAK,cAAa,CAAE;AACrE,WAAK,cAAc,KAAI;;EAE3B;EAEmB,eAAY;AAC7B,SAAK,iBAAgB;EACvB;;;;ACpDF,IAAA;;EAAA,WAAA;AA0BE,aAAAA,eAAsB,SAAwC;AAAxC,UAAA,YAAA,QAAA;AAAA,kBAAuB,CAAA;MAAiB;AAAxC,WAAA,UAAA;IAA2C;AAzBjE,WAAA,eAAWA,gBAAA,cAAU;WAArB,WAAA;AAGE,eAAO,CAAA;MACT;;;;AAEA,WAAA,eAAWA,gBAAA,WAAO;WAAlB,WAAA;AAGE,eAAO,CAAA;MACT;;;;AAEA,WAAA,eAAWA,gBAAA,WAAO;WAAlB,WAAA;AAGE,eAAO,CAAA;MACT;;;;AAEA,WAAA,eAAWA,gBAAA,kBAAc;WAAzB,WAAA;AAIE,eAAO,CAAA;MACT;;;;AAIA,IAAAA,eAAA,UAAA,OAAA,WAAA;IAEA;AAEA,IAAAA,eAAA,UAAA,UAAA,WAAA;IAEA;AACF,WAAAA;EAAA,EAnCA;;",
  "names": ["MDCFoundation"]
}
