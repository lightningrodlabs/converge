import {
  localized,
  msg
} from "./chunk-VJMV55IO.js";
import {
  hashProperty,
  sharedStyles
} from "./chunk-WEAYHYO7.js";
import {
  StoreSubscriber
} from "./chunk-4Z3R6YLO.js";
import {
  __decorate
} from "./chunk-GXRAUBTD.js";
import {
  consume,
  profilesStoreContext
} from "./chunk-Z4I2FY2W.js";
import {
  customElement,
  property
} from "./chunk-LLKFEKJC.js";
import {
  LitElement,
  html
} from "./chunk-KJJ2SZCS.js";

// node_modules/@holochain-open-dev/profiles/dist/elements/profile-detail.js
var ProfileDetail = class ProfileDetail2 extends LitElement {
  constructor() {
    super(...arguments);
    this._agentProfile = new StoreSubscriber(this, () => this.store.profiles.get(this.agentPubKey), () => [this.agentPubKey]);
  }
  getAdditionalFields(profile) {
    const fields = {};
    for (const [key, value] of Object.entries(profile.fields)) {
      if (key !== "avatar") {
        fields[key] = value;
      }
    }
    return fields;
  }
  renderAdditionalField(fieldId, fieldValue) {
    return html`
      <div class="column" style="margin-top: 16px">
        <span style="margin-bottom: 8px; ">
          <strong
            >${fieldId.substring(0, 1).toUpperCase()}${fieldId.substring(1)}</strong
          ></span
        >
        <span>${fieldValue}</span>
      </div>
    `;
  }
  renderProfile(profile) {
    if (!profile)
      return html`<div
        class="column"
        style="align-items: center; justify-content: center; flex: 1;"
      >
        <span class="placeholder"
          >${msg("This agent hasn't created a profile yet")}</span
        >
      </div>`;
    return html`
      <div class="column">
        <div class="row" style="align-items: center">
          <agent-avatar .agentPubKey=${this.agentPubKey}></agent-avatar>
          <span style="font-size: 16px; margin-left: 8px;"
            >${profile.nickname}</span
          >

          <span style="flex: 1"></span>

          <slot name="action"></slot>
        </div>

        ${Object.entries(this.getAdditionalFields(profile)).filter(([, value]) => value !== "").map(([key, value]) => this.renderAdditionalField(key, value))}
      </div>
    `;
  }
  render() {
    switch (this._agentProfile.value.status) {
      case "pending":
        return html`
          <div class="column">
            <div class="row" style="align-items: center">
              <sl-skeleton
                effect="pulse"
                style="height: 32px; width: 32px; border-radius: 50%;"
              ></sl-skeleton>
              <div>
                <sl-skeleton
                  effect="pulse"
                  style="width: 122px; margin-left: 8px;"
                ></sl-skeleton>
              </div>
            </div>

            ${this.store.config.additionalFields.map(() => html`
                <sl-skeleton
                  effect="pulse"
                  style="width: 200px; margin-top: 16px;"
                ></sl-skeleton>
              `)}
          </div>
        `;
      case "complete":
        return this.renderProfile(this._agentProfile.value.value);
      case "error":
        return html`<display-error
          .headline=${msg("Error fetching the profile")}
          .error=${this._agentProfile.value.error}
        ></display-error>`;
    }
  }
};
ProfileDetail.styles = [sharedStyles];
__decorate([
  property(hashProperty("agent-pub-key"))
], ProfileDetail.prototype, "agentPubKey", void 0);
__decorate([
  consume({ context: profilesStoreContext, subscribe: true }),
  property()
], ProfileDetail.prototype, "store", void 0);
ProfileDetail = __decorate([
  localized(),
  customElement("profile-detail")
], ProfileDetail);

export {
  ProfileDetail
};
//# sourceMappingURL=chunk-4VBEA5G5.js.map
