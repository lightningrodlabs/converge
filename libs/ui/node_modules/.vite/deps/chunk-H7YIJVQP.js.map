{
  "version": 3,
  "sources": ["../../@holochain-open-dev/profiles/node_modules/@holochain/client/lib/api/admin/types.js", "../../@holochain-open-dev/profiles/node_modules/@holochain/client/lib/utils/base64.js", "../../@holochain-open-dev/profiles/node_modules/@holochain/client/lib/api/zome-call-signing.js", "../../@holochain-open-dev/profiles/node_modules/@holochain/client/lib/environments/launcher.js", "../../@holochain-open-dev/profiles/node_modules/@holochain/client/lib/hdk/capabilities.js", "../../@holochain-open-dev/profiles/node_modules/@holochain/client/lib/hdk/action.js", "../../@holochain-open-dev/profiles/node_modules/@holochain/client/lib/hdk/dht-ops.js", "../../@holochain-open-dev/profiles/src/elements/agent-avatar.ts"],
  "sourcesContent": ["/**\n * @public\n */\nexport var CellType;\n(function (CellType) {\n    CellType[\"Provisioned\"] = \"provisioned\";\n    CellType[\"Cloned\"] = \"cloned\";\n    CellType[\"Stem\"] = \"stem\";\n})(CellType || (CellType = {}));\n/**\n * @public\n */\nexport var CellProvisioningStrategy;\n(function (CellProvisioningStrategy) {\n    /**\n     * Always create a new Cell when installing this App\n     */\n    CellProvisioningStrategy[\"Create\"] = \"create\";\n    /**\n     * Always create a new Cell when installing the App,\n     * and use a unique network seed to ensure a distinct DHT network.\n     *\n     * Not implemented\n     */\n    // CreateClone = \"create_clone\",\n    /**\n     * Require that a Cell is already installed which matches the DNA version\n     * spec, and which has an Agent that's associated with this App's agent\n     * via DPKI. If no such Cell exists, *app installation fails*.\n     */\n    CellProvisioningStrategy[\"UseExisting\"] = \"use_existing\";\n    /**\n     * Try `UseExisting`, and if that fails, fallback to `Create`\n     */\n    CellProvisioningStrategy[\"CreateIfNoExists\"] = \"create_if_no_exists\";\n    /**\n     * Disallow provisioning altogether. In this case, we expect\n     * `clone_limit > 0`: otherwise, no Cells will ever be created.\n     *\n     * Not implemented\n     */\n    // Disabled = \"disabled\",\n})(CellProvisioningStrategy || (CellProvisioningStrategy = {}));\n/**\n * @public\n */\nexport var AppStatusFilter;\n(function (AppStatusFilter) {\n    AppStatusFilter[\"Enabled\"] = \"enabled\";\n    AppStatusFilter[\"Disabled\"] = \"disabled\";\n    AppStatusFilter[\"Running\"] = \"running\";\n    AppStatusFilter[\"Stopped\"] = \"stopped\";\n    AppStatusFilter[\"Paused\"] = \"paused\";\n})(AppStatusFilter || (AppStatusFilter = {}));\n", "import { Base64 } from \"js-base64\";\n/**\n * Decodes a Base64 encoded string to a byte array hash.\n *\n * @param hash - The Base64 encoded string to decode.\n * @returns The hash in byte format.\n *\n * @public\n */\nexport function decodeHashFromBase64(hash) {\n    return Base64.toUint8Array(hash.slice(1));\n}\n/**\n * Encode a byte array hash to a Base64 string.\n *\n * @param hash - The hash to encode to a Base64 string.\n * @returns The Base64 encoded string\n *\n * @public\n */\nexport function encodeHashToBase64(hash) {\n    return `u${Base64.fromUint8Array(hash, true)}`;\n}\n", "import * as ed25519 from \"@noble/ed25519\";\nimport { encodeHashToBase64 } from \"../utils/base64.js\";\nif (!globalThis.crypto) {\n    import(\"node:crypto\").then((webcrypto) => (globalThis.crypto = webcrypto));\n}\nconst signingCredentials = new Map();\n/**\n * Get credentials for signing zome calls.\n *\n * @param cellId - Cell id to get credentials of.\n * @returns The keys and cap secret required for signing a zome call.\n *\n * @public\n */\nexport const getSigningCredentials = (cellId) => {\n    const cellIdB64 = encodeHashToBase64(cellId[0]).concat(encodeHashToBase64(cellId[1]));\n    return signingCredentials.get(cellIdB64);\n};\n/**\n * Set credentials for signing zome calls.\n *\n * @param cellId - Cell id to set credentials for.\n *\n * @public\n */\nexport const setSigningCredentials = (cellId, credentials) => {\n    const cellIdB64 = encodeHashToBase64(cellId[0]).concat(encodeHashToBase64(cellId[1]));\n    signingCredentials.set(cellIdB64, credentials);\n};\n/**\n * Generates a key pair for signing zome calls.\n *\n * @returns The signing key pair and an agent pub key based on the public key.\n *\n * @public\n */\nexport const generateSigningKeyPair = async () => {\n    const privateKey = ed25519.utils.randomPrivateKey();\n    const publicKey = await ed25519.getPublicKeyAsync(privateKey);\n    const keyPair = { privateKey, publicKey };\n    const signingKey = new Uint8Array([132, 32, 36].concat(...publicKey).concat(...[0, 0, 0, 0]));\n    return [keyPair, signingKey];\n};\n/**\n * @public\n */\nexport const randomCapSecret = () => randomByteArray(64);\n/**\n * @public\n */\nexport const randomNonce = () => randomByteArray(32);\n/**\n * @public\n */\nexport const randomByteArray = (length) => globalThis.crypto.getRandomValues(new Uint8Array(length));\n/**\n * @public\n */\nexport const getNonceExpiration = () => (Date.now() + 5 * 60 * 1000) * 1000; // 5 mins from now in microseconds\n", "import { encode } from \"@msgpack/msgpack\";\nimport { invoke } from \"@tauri-apps/api/tauri\";\nimport { getNonceExpiration, randomNonce } from \"../api/zome-call-signing.js\";\nconst __HC_LAUNCHER_ENV__ = \"__HC_LAUNCHER_ENV__\";\nexport const isLauncher = globalThis.window && __HC_LAUNCHER_ENV__ in globalThis.window;\nexport const getLauncherEnvironment = () => isLauncher ? globalThis.window[__HC_LAUNCHER_ENV__] : undefined;\nexport const signZomeCallTauri = async (request) => {\n    const zomeCallUnsigned = {\n        provenance: Array.from(request.provenance),\n        cell_id: [Array.from(request.cell_id[0]), Array.from(request.cell_id[1])],\n        zome_name: request.zome_name,\n        fn_name: request.fn_name,\n        payload: Array.from(encode(request.payload)),\n        nonce: Array.from(randomNonce()),\n        expires_at: getNonceExpiration(),\n    };\n    const signedZomeCallTauri = await invoke(\"sign_zome_call\", { zomeCallUnsigned });\n    const signedZomeCall = {\n        provenance: Uint8Array.from(signedZomeCallTauri.provenance),\n        cap_secret: null,\n        cell_id: [\n            Uint8Array.from(signedZomeCallTauri.cell_id[0]),\n            Uint8Array.from(signedZomeCallTauri.cell_id[1]),\n        ],\n        zome_name: signedZomeCallTauri.zome_name,\n        fn_name: signedZomeCallTauri.fn_name,\n        payload: Uint8Array.from(signedZomeCallTauri.payload),\n        signature: Uint8Array.from(signedZomeCallTauri.signature),\n        expires_at: signedZomeCallTauri.expires_at,\n        nonce: Uint8Array.from(signedZomeCallTauri.nonce),\n    };\n    return signedZomeCall;\n};\n", "/**\n * @public\n */\nexport var GrantedFunctionsType;\n(function (GrantedFunctionsType) {\n    GrantedFunctionsType[\"All\"] = \"All\";\n    GrantedFunctionsType[\"Listed\"] = \"Listed\";\n})(GrantedFunctionsType || (GrantedFunctionsType = {}));\n", "/**\n * @public\n */\nexport var ActionType;\n(function (ActionType) {\n    ActionType[\"Dna\"] = \"Dna\";\n    ActionType[\"AgentValidationPkg\"] = \"AgentValidationPkg\";\n    ActionType[\"InitZomesComplete\"] = \"InitZomesComplete\";\n    ActionType[\"CreateLink\"] = \"CreateLink\";\n    ActionType[\"DeleteLink\"] = \"DeleteLink\";\n    ActionType[\"OpenChain\"] = \"OpenChain\";\n    ActionType[\"CloseChain\"] = \"CloseChain\";\n    ActionType[\"Create\"] = \"Create\";\n    ActionType[\"Update\"] = \"Update\";\n    ActionType[\"Delete\"] = \"Delete\";\n})(ActionType || (ActionType = {}));\n", "// https://github.com/holochain/holochain/blob/develop/crates/types/src/dht_op.rs\n/**\n * @public\n */\nexport var DhtOpType;\n(function (DhtOpType) {\n    DhtOpType[\"StoreRecord\"] = \"StoreRecord\";\n    DhtOpType[\"StoreEntry\"] = \"StoreEntry\";\n    DhtOpType[\"RegisterAgentActivity\"] = \"RegisterAgentActivity\";\n    DhtOpType[\"RegisterUpdatedContent\"] = \"RegisterUpdatedContent\";\n    DhtOpType[\"RegisterUpdatedRecord\"] = \"RegisterUpdatedRecord\";\n    DhtOpType[\"RegisterDeletedBy\"] = \"RegisterDeletedBy\";\n    DhtOpType[\"RegisterDeletedEntryAction\"] = \"RegisterDeletedEntryAction\";\n    DhtOpType[\"RegisterAddLink\"] = \"RegisterAddLink\";\n    DhtOpType[\"RegisterRemoveLink\"] = \"RegisterRemoveLink\";\n})(DhtOpType || (DhtOpType = {}));\n/**\n * @public\n */\nexport function getDhtOpType(op) {\n    return Object.keys(op)[0];\n}\n/**\n * @public\n */\nexport function getDhtOpAction(op) {\n    const opType = getDhtOpType(op);\n    const action = Object.values(op)[0][1];\n    if (opType === DhtOpType.RegisterAddLink) {\n        return {\n            type: \"CreateLink\",\n            ...action,\n        };\n    }\n    if (opType === DhtOpType.RegisterUpdatedContent ||\n        opType === DhtOpType.RegisterUpdatedRecord) {\n        return {\n            type: \"Update\",\n            ...action,\n        };\n    }\n    if (action.author)\n        return action;\n    else {\n        const actionType = Object.keys(action)[0];\n        return {\n            type: actionType,\n            ...action[actionType],\n        };\n    }\n}\n/**\n * @public\n */\nexport function getDhtOpEntry(op) {\n    return Object.values(op)[0][2];\n}\n/**\n * @public\n */\nexport function getDhtOpSignature(op) {\n    return Object.values(op)[0][1];\n}\n", "import { consume } from \"@lit-labs/context\";\nimport { hashProperty, sharedStyles } from \"@holochain-open-dev/elements\";\nimport { css, html, LitElement } from \"lit\";\nimport { state, property, customElement } from \"lit/decorators.js\";\nimport { styleMap } from \"lit-html/directives/style-map.js\";\nimport { AgentPubKey, encodeHashToBase64 } from \"@holochain/client\";\nimport { localized, msg } from \"@lit/localize\";\nimport { StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { SlTooltip } from \"@shoelace-style/shoelace\";\n\nimport \"@holochain-open-dev/elements/dist/elements/display-error.js\";\nimport \"@holochain-open-dev/elements/dist/elements/holo-identicon.js\";\nimport \"@shoelace-style/shoelace/dist/components/avatar/avatar.js\";\nimport \"@shoelace-style/shoelace/dist/components/skeleton/skeleton.js\";\nimport \"@shoelace-style/shoelace/dist/components/tooltip/tooltip.js\";\n\nimport { profilesStoreContext } from \"../context.js\";\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { Profile } from \"../types.js\";\n\n@localized()\n@customElement(\"agent-avatar\")\nexport class AgentAvatar extends LitElement {\n  /** Public properties */\n\n  /**\n   * REQUIRED. The public key identifying the agent whose profile is going to be shown.\n   */\n  @property(hashProperty(\"agent-pub-key\"))\n  agentPubKey!: AgentPubKey;\n\n  /**\n   * Size of the avatar image in pixels.\n   */\n  @property({ type: Number })\n  size = 32;\n\n  /**\n   * Disables showing the tooltip for the public key\n   */\n  @property({ type: Boolean, attribute: \"disable-tooltip\" })\n  disableTooltip = false;\n\n  /**\n   * Disable copying of the public key on click\n   */\n  @property({ type: Boolean, attribute: \"disable-copy\" })\n  disableCopy = false;\n\n  /** Dependencies */\n\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /**\n   * @internal\n   */\n  private _agentProfile = new StoreSubscriber(\n    this,\n    () => this.store.profiles.get(this.agentPubKey),\n    () => [this.agentPubKey]\n  );\n\n  renderIdenticon() {\n    return html` <div\n      style=${styleMap({\n        position: \"relative\",\n        height: `${this.size}px`,\n        width: `${this.size}px`,\n      })}\n    >\n      <holo-identicon\n        .disableCopy=${this.disableCopy}\n        .disableTooltip=${this.disableTooltip}\n        .hash=${this.agentPubKey}\n        .size=${this.size}\n      >\n      </holo-identicon>\n      <div class=\"badge\"><slot name=\"badge\"></slot></div>\n    </div>`;\n  }\n\n  /**\n   * @internal\n   */\n  @state()\n  justCopiedHash = false;\n\n  /**\n   * @internal\n   */\n  timeout: any;\n\n  async copyHash() {\n    await navigator.clipboard.writeText(encodeHashToBase64(this.agentPubKey));\n\n    if (this.timeout) clearTimeout(this.timeout);\n\n    this.justCopiedHash = true;\n    (this.shadowRoot!.getElementById(\"tooltip\") as SlTooltip).show();\n\n    this.timeout = setTimeout(() => {\n      (this.shadowRoot!.getElementById(\"tooltip\") as SlTooltip).hide();\n      setTimeout(() => {\n        this.justCopiedHash = false;\n      }, 100);\n    }, 2000);\n  }\n\n  renderProfile(profile: Profile | undefined) {\n    if (!profile || !profile.fields.avatar) return this.renderIdenticon();\n\n    const contents = html`\n      <div\n        @click=${() => {\n          if (!this.disableCopy) this.copyHash();\n        }}\n        style=${styleMap({\n          cursor: this.disableCopy ? \"\" : \"pointer\",\n          position: \"relative\",\n          height: `${this.size}px`,\n          width: `${this.size}px`,\n        })}\n      >\n        <sl-avatar\n          .image=${profile.fields.avatar}\n          style=\"--size: ${this.size}px;\"\n        >\n        </sl-avatar>\n        <div class=\"badge\"><slot name=\"badge\"></slot></div>\n      </div>\n    `;\n\n    return html`\n      <sl-tooltip\n        id=\"tooltip\"\n        placement=\"top\"\n        .content=${this.justCopiedHash || this.disableTooltip\n          ? msg(\"Copied!\")\n          : `${encodeHashToBase64(this.agentPubKey).substring(0, 6)}...`}\n        .trigger=${this.disableTooltip || this.justCopiedHash\n          ? \"manual\"\n          : \"hover focus\"}\n        hoist\n      >\n        ${contents}\n      </sl-tooltip>\n    `;\n  }\n\n  render() {\n    if (this.store.config.avatarMode === \"identicon\")\n      return this.renderIdenticon();\n    switch (this._agentProfile.value.status) {\n      case \"pending\":\n        return html`<sl-skeleton\n          effect=\"pulse\"\n          style=\"height: ${this.size}px; width: ${this.size}px\"\n        ></sl-skeleton>`;\n      case \"complete\":\n        return this.renderProfile(this._agentProfile.value.value);\n      case \"error\":\n        return html`\n          <display-error\n            tooltip\n            .headline=${msg(\"Error fetching the agent's avatar\")}\n            .error=${this._agentProfile.value.error}\n          ></display-error>\n        `;\n    }\n  }\n\n  static styles = [\n    sharedStyles,\n    css`\n      .badge {\n        position: absolute;\n        right: 0;\n        bottom: 0;\n      }\n    `,\n  ];\n}\n"],
  "mappings": "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",
  "names": ["CellType", "CellProvisioningStrategy", "AppStatusFilter", "GrantedFunctionsType", "ActionType", "DhtOpType", "AgentAvatar"]
}
