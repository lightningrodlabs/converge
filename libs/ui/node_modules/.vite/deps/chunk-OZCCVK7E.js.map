{
  "version": 3,
  "sources": ["../../../../node_modules/@holo-host/identicon/index.js", "../../@holochain-open-dev/elements/src/elements/holo-identicon.ts"],
  "sourcesContent": ["let bytes = [0]\nlet byteIndex = 0\n\nfunction setBytes (hash) {\n  if (hash[0] === 132 && hash[1] === 32 && hash[2] === 36) {\n    // removing hCAk\n    bytes = hash.slice(3)\n  } else {\n    bytes = hash || []\n  }\n  byteIndex = 0\n}\n\n// returns a value from 0 to 1, determined by the next byte in the hash\nfunction value () {\n  const getByte = () => {\n    const result = bytes[byteIndex]\n    byteIndex = (byteIndex + 1) % bytes.length\n    return result\n  }\n\n  return getByte() / 256\n}\n\nfunction createColor (lightness) {\n  // hue is the whole color spectrum\n  const h = Math.floor(value() * 360)\n  // saturation goes from 40 to 100, it avoids greyish colors\n  const s = ((value() * 60) + 40)\n  // lightness can be anything from 0 to 100, but with a little bump in the distribution around the middle\n  const l = lightness || (value() * 100 + ((value() + value() + value() + value()) * 25)) / 2\n\n  // other possible distributions of l\n  // const l = ((value() + value() + value() + value()) * 25)\n  // const l = ((value() + value()) * 50)\n  // const l = value() * 100\n  return { h, s, l }\n}\n\nfunction encodeColor ({ h, s, l }) {\n  return `hsl(${h}, ${s}%, ${l}%)`\n}\n\nfunction drawTriangle (cc, radius, center) {\n  const a1 = value() * 2 * Math.PI\n  const dx1 = radius * Math.cos(a1)\n  const dy1 = radius * Math.sin(a1)\n  const x1 = center.x + dx1\n  const y1 = center.x + dy1\n\n  const a2 = a1 + (2 * Math.PI * 0.3)\n  const dx2 = radius * Math.cos(a2)\n  const dy2 = radius * Math.sin(a2)\n  const x2 = center.x + dx2\n  const y2 = center.x + dy2\n\n  const a3 = a2 + (2 * Math.PI * 0.3)\n  const dx3 = radius * Math.cos(a3)\n  const dy3 = radius * Math.sin(a3)\n  const x3 = center.x + dx3\n  const y3 = center.x + dy3\n\n  cc.beginPath()\n  cc.moveTo(x1, y1)\n  cc.lineTo(x2, y2)\n  cc.lineTo(x3, y3)\n  cc.fill()\n}\n\nfunction buildOpts (opts) {\n  const hash = opts.hash || [0]\n  setBytes(hash)\n\n  return {\n    backgroundColor: opts.backgroundColor || encodeColor(createColor()),\n    hash,\n    size: opts.size || 32\n  }\n}\n\n// opts : {\n//   hash: Uint8Array\n//   backgroundColor: String (a css color specification)\n//   size: Int\n// }\n// canvas: HTMLCanvasElement\n// This is currently not ideal identicon generation code in two ways:\n// 1) it doesn't use all of the bits of every byte, specifically when using a whole byte to chose a shape.\n// 2) There are possible collisions where two different hashes might generate the same identicon (eg)\n\nexport default function renderIdenticon (opts, canvas) {\n  if (opts.hash && !(opts.hash instanceof Uint8Array)) {\n    throw new Error('invalid type for opts.hash, expecting Uint8Array or null')\n  }\n\n  opts = buildOpts(opts || {})\n  const { size, backgroundColor } = opts\n\n  canvas.width = canvas.height = size\n\n  const cc = canvas.getContext('2d')\n  if (!cc) return // we're in a testing environment without a real canvas\n\n  cc.fillStyle = backgroundColor\n  cc.fillRect(0, 0, canvas.width, canvas.height)\n  const numShapes = value() < 0.5 ? 3 : 4\n  const shapes = Array.apply(null, Array(numShapes)).map((_, i) => {\n    // gaurantees one bright shape and one dark shape, hopefully helpful for color blind users\n    const lightness = i === 0\n      ? 5 + (value() * 25)\n      : i === 1\n        ? 70 + (value() * 25)\n        : null\n    return {\n      x: value() * size,\n      y: value() * size,\n      radius: 5 + (value() * size * 0.25),\n      type: Math.floor(value() * 3),\n      color: encodeColor(createColor(lightness))\n    }\n  }).sort((a, b) => (a.radius > b.radius) ? -1 : 1) // puts the small shapes in front of the large\n\n  for (let i = 0; i < numShapes; i++) {\n    const shape = shapes[i]\n    const { x, y, radius, type, color } = shape\n    cc.fillStyle = color\n\n    switch (type) {\n      case 0:\n        cc.beginPath()\n        cc.arc(x, y, radius, 0, 2 * Math.PI)\n        cc.fill()\n        break\n      case 1:\n        cc.fillRect(x, y, radius * 2, radius * 2)\n        break\n      case 2:\n        drawTriangle(cc, radius * 2, { x, y })\n        break\n      default:\n        throw new Error('shape is greater than 2, this should never happen')\n    }\n  }\n\n  return canvas\n}\n", null],
  "mappings": "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",
  "names": ["HoloIdenticon"]
}
