{
  "version": 3,
  "sources": ["../../@holochain-open-dev/profiles/src/elements/list-profiles.ts"],
  "sourcesContent": ["import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators.js\";\nimport { AgentPubKey } from \"@holochain/client\";\nimport { consume } from \"@lit-labs/context\";\nimport { sharedStyles } from \"@holochain-open-dev/elements\";\nimport { StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { localized, msg } from \"@lit/localize\";\n\nimport \"@holochain-open-dev/elements/dist/elements/display-error.js\";\nimport \"./agent-avatar.js\";\nimport \"./profile-list-item-skeleton.js\";\n\nimport { ProfilesStore } from \"../profiles-store\";\nimport { profilesStoreContext } from \"../context\";\nimport { Profile } from \"../types\";\n\n/**\n * @element list-profiles\n * @fires agent-selected - Fired when the user selects an agent from the list. Detail will have this shape: { agentPubKey: <AGENT_PUB_KEY as Uint8Array> }\n */\n@localized()\n@customElement(\"list-profiles\")\nexport class ListProfiles extends LitElement {\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /** Private properties */\n\n  /**\n   * @internal\n   */\n  private _allProfiles = new StoreSubscriber(\n    this,\n    () => this.store.allProfiles\n  );\n\n  initials(nickname: string): string {\n    return nickname\n      .split(\" \")\n      .map((name) => name[0])\n      .join(\"\");\n  }\n\n  fireAgentSelected(agentPubKey: AgentPubKey) {\n    if (agentPubKey) {\n      this.dispatchEvent(\n        new CustomEvent(\"agent-selected\", {\n          bubbles: true,\n          composed: true,\n          detail: {\n            agentPubKey,\n          },\n        })\n      );\n    }\n  }\n\n  renderList(profiles: ReadonlyMap<AgentPubKey, Profile>) {\n    if (profiles.size === 0)\n      return html`<span>${msg(\"There are no created profiles yet\")} ></span>`;\n\n    return html`\n      <div style=\"min-width: 80px; flex: 1;\" }>\n        ${Array.from(profiles.entries()).map(\n          ([agent_pub_key, profile]) => html`\n            <div class=\"row\" style=\"align-items: center; margin-bottom: 16px;\">\n              <agent-avatar\n                style=\"margin-right: 8px;\"\n                .agentPubKey=${agent_pub_key}\n                @click=${() => this.fireAgentSelected(agent_pub_key)}\n              >\n              </agent-avatar\n              ><span> ${profile.nickname}</span>\n            </div>\n          `\n        )}\n      </div>\n    `;\n  }\n\n  render() {\n    switch (this._allProfiles.value.status) {\n      case \"pending\":\n        return html`<div class=\"column center-content\">\n          <profile-list-item-skeleton> </profile-list-item-skeleton>\n          <profile-list-item-skeleton> </profile-list-item-skeleton>\n          <profile-list-item-skeleton> </profile-list-item-skeleton>\n        </div>`;\n      case \"error\":\n        return html`<display-error\n          .headline=${msg(\"Error fetching the profiles for all agents\")}\n          .error=${this._allProfiles.value.error}\n        ></display-error>`;\n      case \"complete\":\n        return this.renderList(this._allProfiles.value.value);\n    }\n  }\n\n  static styles = [\n    sharedStyles,\n    css`\n      :host {\n        display: flex;\n      }\n    `,\n  ];\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBO,IAAM,eAAN,MAAMA,sBAAqB,WAAU;EAArC,cAAA;;AAaG,SAAA,eAAe,IAAI,gBACzB,MACA,MAAM,KAAK,MAAM,WAAW;EAyEhC;EAtEE,SAAS,UAAgB;AACvB,WAAO,SACJ,MAAM,GAAG,EACT,IAAI,CAAC,SAAS,KAAK,CAAC,CAAC,EACrB,KAAK,EAAE;EACZ;EAEA,kBAAkB,aAAwB;AACxC,QAAI,aAAa;AACf,WAAK,cACH,IAAI,YAAY,kBAAkB;QAChC,SAAS;QACT,UAAU;QACV,QAAQ;UACN;;OAEH,CAAC;;EAGR;EAEA,WAAW,UAA2C;AACpD,QAAI,SAAS,SAAS;AACpB,aAAO,aAAa,IAAI,mCAAmC,CAAC;AAE9D,WAAO;;UAED,MAAM,KAAK,SAAS,QAAO,CAAE,EAAE,IAC/B,CAAC,CAAC,eAAe,OAAO,MAAM;;;;+BAIT,aAAa;yBACnB,MAAM,KAAK,kBAAkB,aAAa,CAAC;;;wBAG5C,QAAQ,QAAQ;;WAE7B,CACF;;;EAGP;EAEA,SAAM;AACJ,YAAQ,KAAK,aAAa,MAAM,QAAQ;MACtC,KAAK;AACH,eAAO;;;;;MAKT,KAAK;AACH,eAAO;sBACO,IAAI,4CAA4C,CAAC;mBACpD,KAAK,aAAa,MAAM,KAAK;;MAE1C,KAAK;AACH,eAAO,KAAK,WAAW,KAAK,aAAa,MAAM,KAAK;;EAE1D;;AAEO,aAAA,SAAS;EACd;EACA;;;;;;AA5EF,WAAA;EAFC,QAAQ,EAAE,SAAS,sBAAsB,WAAW,KAAI,CAAE;EAC1D,SAAQ;;AALE,eAAY,WAAA;EAFxB,UAAS;EACT,cAAc,eAAe;GACjB,YAAY;",
  "names": ["ListProfiles"]
}
