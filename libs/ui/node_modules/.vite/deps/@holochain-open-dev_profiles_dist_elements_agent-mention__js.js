import "./chunk-OZCCVK7E.js";
import "./chunk-AXFKINVK.js";
import {
  SlIconButton
} from "./chunk-4TTHA5FM.js";
import {
  LocalizeController,
  localized,
  msg
} from "./chunk-VJMV55IO.js";
import {
  ShoelaceElement,
  __decorateClass,
  component_styles_default,
  hashProperty,
  sharedStyles
} from "./chunk-WEAYHYO7.js";
import {
  StoreSubscriber
} from "./chunk-4Z3R6YLO.js";
import "./chunk-22VNO7Y6.js";
import "./chunk-IFZRPEIZ.js";
import "./chunk-CCLU3OJM.js";
import "./chunk-2AWGVYMQ.js";
import "./chunk-ZPGR2TPQ.js";
import {
  __decorate
} from "./chunk-GXRAUBTD.js";
import {
  consume,
  profilesStoreContext
} from "./chunk-Z4I2FY2W.js";
import "./chunk-IGAVQDRX.js";
import {
  styleMap
} from "./chunk-WQJA2ZTO.js";
import "./chunk-3UHMJHWB.js";
import {
  classMap
} from "./chunk-XHTW3CQQ.js";
import {
  customElement,
  property
} from "./chunk-LLKFEKJC.js";
import {
  LitElement,
  html
} from "./chunk-KJJ2SZCS.js";
import "./chunk-HKTNVJXR.js";
import {
  css
} from "./chunk-QK5UQRR6.js";
import "./chunk-PDNTOHOW.js";
import "./chunk-TCQZMY3T.js";

// ../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.CGXJYWRD.js
var tag_styles_default = css`
  ${component_styles_default}

  :host {
    display: inline-block;
  }

  .tag {
    display: flex;
    align-items: center;
    border: solid 1px;
    line-height: 1;
    white-space: nowrap;
    user-select: none;
  }

  .tag__remove::part(base) {
    color: inherit;
    padding: 0;
  }

  /*
   * Variant modifiers
   */

  .tag--primary {
    background-color: var(--sl-color-primary-50);
    border-color: var(--sl-color-primary-200);
    color: var(--sl-color-primary-800);
  }

  .tag--primary:active > sl-icon-button {
    color: var(--sl-color-primary-600);
  }

  .tag--success {
    background-color: var(--sl-color-success-50);
    border-color: var(--sl-color-success-200);
    color: var(--sl-color-success-800);
  }

  .tag--success:active > sl-icon-button {
    color: var(--sl-color-success-600);
  }

  .tag--neutral {
    background-color: var(--sl-color-neutral-50);
    border-color: var(--sl-color-neutral-200);
    color: var(--sl-color-neutral-800);
  }

  .tag--neutral:active > sl-icon-button {
    color: var(--sl-color-neutral-600);
  }

  .tag--warning {
    background-color: var(--sl-color-warning-50);
    border-color: var(--sl-color-warning-200);
    color: var(--sl-color-warning-800);
  }

  .tag--warning:active > sl-icon-button {
    color: var(--sl-color-warning-600);
  }

  .tag--danger {
    background-color: var(--sl-color-danger-50);
    border-color: var(--sl-color-danger-200);
    color: var(--sl-color-danger-800);
  }

  .tag--danger:active > sl-icon-button {
    color: var(--sl-color-danger-600);
  }

  /*
   * Size modifiers
   */

  .tag--small {
    font-size: var(--sl-button-font-size-small);
    height: calc(var(--sl-input-height-small) * 0.8);
    line-height: calc(var(--sl-input-height-small) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-small);
    padding: 0 var(--sl-spacing-x-small);
  }

  .tag--medium {
    font-size: var(--sl-button-font-size-medium);
    height: calc(var(--sl-input-height-medium) * 0.8);
    line-height: calc(var(--sl-input-height-medium) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-medium);
    padding: 0 var(--sl-spacing-small);
  }

  .tag--large {
    font-size: var(--sl-button-font-size-large);
    height: calc(var(--sl-input-height-large) * 0.8);
    line-height: calc(var(--sl-input-height-large) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-large);
    padding: 0 var(--sl-spacing-medium);
  }

  .tag__remove {
    margin-inline-start: var(--sl-spacing-x-small);
  }

  /*
   * Pill modifier
   */

  .tag--pill {
    border-radius: var(--sl-border-radius-pill);
  }
`;

// ../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.QZPGQ7KX.js
var SlTag = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController(this);
    this.variant = "neutral";
    this.size = "medium";
    this.pill = false;
    this.removable = false;
  }
  handleRemoveClick() {
    this.emit("sl-remove");
  }
  render() {
    return html`
      <span
        part="base"
        class=${classMap({
      tag: true,
      // Types
      "tag--primary": this.variant === "primary",
      "tag--success": this.variant === "success",
      "tag--neutral": this.variant === "neutral",
      "tag--warning": this.variant === "warning",
      "tag--danger": this.variant === "danger",
      "tag--text": this.variant === "text",
      // Sizes
      "tag--small": this.size === "small",
      "tag--medium": this.size === "medium",
      "tag--large": this.size === "large",
      // Modifiers
      "tag--pill": this.pill,
      "tag--removable": this.removable
    })}
      >
        <slot part="content" class="tag__content"></slot>

        ${this.removable ? html`
              <sl-icon-button
                part="remove-button"
                exportparts="base:remove-button__base"
                name="x-lg"
                library="system"
                label=${this.localize.term("remove")}
                class="tag__remove"
                @click=${this.handleRemoveClick}
                tabindex="-1"
              ></sl-icon-button>
            ` : ""}
      </span>
    `;
  }
};
SlTag.styles = tag_styles_default;
SlTag.dependencies = { "sl-icon-button": SlIconButton };
__decorateClass([
  property({ reflect: true })
], SlTag.prototype, "variant", 2);
__decorateClass([
  property({ reflect: true })
], SlTag.prototype, "size", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], SlTag.prototype, "pill", 2);
__decorateClass([
  property({ type: Boolean })
], SlTag.prototype, "removable", 2);

// ../node_modules/@shoelace-style/shoelace/dist/chunks/chunk.MEBHPCEW.js
SlTag.define("sl-tag");

// node_modules/@holochain-open-dev/profiles/dist/elements/agent-mention.js
var AgentMention = class AgentMention2 extends LitElement {
  constructor() {
    super(...arguments);
    this.size = 24;
    this._agentProfile = new StoreSubscriber(this, () => this.store.profiles.get(this.agentPubKey), () => [this.agentPubKey]);
  }
  renderAvatar(profile) {
    if (!profile || !profile.fields.avatar) {
      return html` <div
        style=${styleMap({
        position: "relative",
        height: `${this.size}px`,
        width: `${this.size}px`
      })}
      >
        <holo-identicon
          .disableCopy=${true}
          .disableTooltip=${true}
          .hash=${this.agentPubKey}
          .size=${this.size}
        >
        </holo-identicon>
      </div>`;
    }
    return html`
      <sl-avatar
        .image=${profile.fields.avatar}
        style="--size: ${this.size}px;"
      >
      </sl-avatar>
    `;
  }
  renderProfile(profile) {
    return html`
      <div class="row">
        ${this.renderAvatar(profile)}
        <span style="margin-left: 8px">${profile === null || profile === void 0 ? void 0 : profile.nickname}</span>
      </div>
    `;
  }
  renderContent() {
    switch (this._agentProfile.value.status) {
      case "pending":
        return html`<sl-skeleton effect="pulse"></sl-skeleton>`;
      case "complete":
        return this.renderProfile(this._agentProfile.value.value);
      case "error":
        return html`
          <display-error
            tooltip
            .headline=${msg("Error fetching the agent's avatar")}
            .error=${this._agentProfile.value.error}
          ></display-error>
        `;
    }
  }
  render() {
    return html`
      <sl-tag pill style="display: inline-flex">${this.renderContent()}</sl-tag>
    `;
  }
};
AgentMention.styles = [
  sharedStyles,
  css`
      :host {
        display: inline-flex;
      }
    `
];
__decorate([
  property(hashProperty("agent-pub-key"))
], AgentMention.prototype, "agentPubKey", void 0);
__decorate([
  property({ type: Number })
], AgentMention.prototype, "size", void 0);
__decorate([
  consume({ context: profilesStoreContext, subscribe: true }),
  property()
], AgentMention.prototype, "store", void 0);
AgentMention = __decorate([
  localized(),
  customElement("agent-mention")
], AgentMention);
export {
  AgentMention
};
//# sourceMappingURL=@holochain-open-dev_profiles_dist_elements_agent-mention__js.js.map
