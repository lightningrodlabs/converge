import {
  localized,
  msg
} from "./chunk-VJMV55IO.js";
import {
  hashProperty,
  sharedStyles
} from "./chunk-WEAYHYO7.js";
import {
  StoreSubscriber
} from "./chunk-4Z3R6YLO.js";
import {
  gBase64
} from "./chunk-2AWGVYMQ.js";
import {
  __decorate
} from "./chunk-GXRAUBTD.js";
import {
  consume,
  profilesStoreContext
} from "./chunk-Z4I2FY2W.js";
import {
  styleMap
} from "./chunk-WQJA2ZTO.js";
import {
  customElement,
  property,
  state
} from "./chunk-LLKFEKJC.js";
import {
  LitElement,
  html
} from "./chunk-KJJ2SZCS.js";
import {
  css
} from "./chunk-QK5UQRR6.js";

// node_modules/@holochain-open-dev/profiles/node_modules/@holochain/client/lib/api/admin/types.js
var CellType;
(function(CellType2) {
  CellType2["Provisioned"] = "provisioned";
  CellType2["Cloned"] = "cloned";
  CellType2["Stem"] = "stem";
})(CellType || (CellType = {}));
var CellProvisioningStrategy;
(function(CellProvisioningStrategy2) {
  CellProvisioningStrategy2["Create"] = "create";
  CellProvisioningStrategy2["UseExisting"] = "use_existing";
  CellProvisioningStrategy2["CreateIfNoExists"] = "create_if_no_exists";
})(CellProvisioningStrategy || (CellProvisioningStrategy = {}));
var AppStatusFilter;
(function(AppStatusFilter2) {
  AppStatusFilter2["Enabled"] = "enabled";
  AppStatusFilter2["Disabled"] = "disabled";
  AppStatusFilter2["Running"] = "running";
  AppStatusFilter2["Stopped"] = "stopped";
  AppStatusFilter2["Paused"] = "paused";
})(AppStatusFilter || (AppStatusFilter = {}));

// node_modules/@holochain-open-dev/profiles/node_modules/@holochain/client/lib/utils/base64.js
function encodeHashToBase64(hash) {
  return `u${gBase64.fromUint8Array(hash, true)}`;
}

// node_modules/@holochain-open-dev/profiles/node_modules/@holochain/client/lib/api/zome-call-signing.js
if (!globalThis.crypto) {
  import("./node_crypto-ZKBL4SRI.js").then((webcrypto) => globalThis.crypto = webcrypto);
}

// node_modules/@holochain-open-dev/profiles/node_modules/@holochain/client/lib/environments/launcher.js
var __HC_LAUNCHER_ENV__ = "__HC_LAUNCHER_ENV__";
var isLauncher = globalThis.window && __HC_LAUNCHER_ENV__ in globalThis.window;

// node_modules/@holochain-open-dev/profiles/node_modules/@holochain/client/lib/hdk/capabilities.js
var GrantedFunctionsType;
(function(GrantedFunctionsType2) {
  GrantedFunctionsType2["All"] = "All";
  GrantedFunctionsType2["Listed"] = "Listed";
})(GrantedFunctionsType || (GrantedFunctionsType = {}));

// node_modules/@holochain-open-dev/profiles/node_modules/@holochain/client/lib/hdk/action.js
var ActionType;
(function(ActionType2) {
  ActionType2["Dna"] = "Dna";
  ActionType2["AgentValidationPkg"] = "AgentValidationPkg";
  ActionType2["InitZomesComplete"] = "InitZomesComplete";
  ActionType2["CreateLink"] = "CreateLink";
  ActionType2["DeleteLink"] = "DeleteLink";
  ActionType2["OpenChain"] = "OpenChain";
  ActionType2["CloseChain"] = "CloseChain";
  ActionType2["Create"] = "Create";
  ActionType2["Update"] = "Update";
  ActionType2["Delete"] = "Delete";
})(ActionType || (ActionType = {}));

// node_modules/@holochain-open-dev/profiles/node_modules/@holochain/client/lib/hdk/dht-ops.js
var DhtOpType;
(function(DhtOpType2) {
  DhtOpType2["StoreRecord"] = "StoreRecord";
  DhtOpType2["StoreEntry"] = "StoreEntry";
  DhtOpType2["RegisterAgentActivity"] = "RegisterAgentActivity";
  DhtOpType2["RegisterUpdatedContent"] = "RegisterUpdatedContent";
  DhtOpType2["RegisterUpdatedRecord"] = "RegisterUpdatedRecord";
  DhtOpType2["RegisterDeletedBy"] = "RegisterDeletedBy";
  DhtOpType2["RegisterDeletedEntryAction"] = "RegisterDeletedEntryAction";
  DhtOpType2["RegisterAddLink"] = "RegisterAddLink";
  DhtOpType2["RegisterRemoveLink"] = "RegisterRemoveLink";
})(DhtOpType || (DhtOpType = {}));

// node_modules/@holochain-open-dev/profiles/dist/elements/agent-avatar.js
var AgentAvatar = class AgentAvatar2 extends LitElement {
  constructor() {
    super(...arguments);
    this.size = 32;
    this.disableTooltip = false;
    this.disableCopy = false;
    this._agentProfile = new StoreSubscriber(this, () => this.store.profiles.get(this.agentPubKey), () => [this.agentPubKey]);
    this.justCopiedHash = false;
  }
  renderIdenticon() {
    return html` <div
      style=${styleMap({
      position: "relative",
      height: `${this.size}px`,
      width: `${this.size}px`
    })}
    >
      <holo-identicon
        .disableCopy=${this.disableCopy}
        .disableTooltip=${this.disableTooltip}
        .hash=${this.agentPubKey}
        .size=${this.size}
      >
      </holo-identicon>
      <div class="badge"><slot name="badge"></slot></div>
    </div>`;
  }
  async copyHash() {
    await navigator.clipboard.writeText(encodeHashToBase64(this.agentPubKey));
    if (this.timeout)
      clearTimeout(this.timeout);
    this.justCopiedHash = true;
    this.shadowRoot.getElementById("tooltip").show();
    this.timeout = setTimeout(() => {
      this.shadowRoot.getElementById("tooltip").hide();
      setTimeout(() => {
        this.justCopiedHash = false;
      }, 100);
    }, 2e3);
  }
  renderProfile(profile) {
    if (!profile || !profile.fields.avatar)
      return this.renderIdenticon();
    const contents = html`
      <div
        @click=${() => {
      if (!this.disableCopy)
        this.copyHash();
    }}
        style=${styleMap({
      cursor: this.disableCopy ? "" : "pointer",
      position: "relative",
      height: `${this.size}px`,
      width: `${this.size}px`
    })}
      >
        <sl-avatar
          .image=${profile.fields.avatar}
          style="--size: ${this.size}px;"
        >
        </sl-avatar>
        <div class="badge"><slot name="badge"></slot></div>
      </div>
    `;
    return html`
      <sl-tooltip
        id="tooltip"
        placement="top"
        .content=${this.justCopiedHash || this.disableTooltip ? msg("Copied!") : `${encodeHashToBase64(this.agentPubKey).substring(0, 6)}...`}
        .trigger=${this.disableTooltip || this.justCopiedHash ? "manual" : "hover focus"}
        hoist
      >
        ${contents}
      </sl-tooltip>
    `;
  }
  render() {
    if (this.store.config.avatarMode === "identicon")
      return this.renderIdenticon();
    switch (this._agentProfile.value.status) {
      case "pending":
        return html`<sl-skeleton
          effect="pulse"
          style="height: ${this.size}px; width: ${this.size}px"
        ></sl-skeleton>`;
      case "complete":
        return this.renderProfile(this._agentProfile.value.value);
      case "error":
        return html`
          <display-error
            tooltip
            .headline=${msg("Error fetching the agent's avatar")}
            .error=${this._agentProfile.value.error}
          ></display-error>
        `;
    }
  }
};
AgentAvatar.styles = [
  sharedStyles,
  css`
      .badge {
        position: absolute;
        right: 0;
        bottom: 0;
      }
    `
];
__decorate([
  property(hashProperty("agent-pub-key"))
], AgentAvatar.prototype, "agentPubKey", void 0);
__decorate([
  property({ type: Number })
], AgentAvatar.prototype, "size", void 0);
__decorate([
  property({ type: Boolean, attribute: "disable-tooltip" })
], AgentAvatar.prototype, "disableTooltip", void 0);
__decorate([
  property({ type: Boolean, attribute: "disable-copy" })
], AgentAvatar.prototype, "disableCopy", void 0);
__decorate([
  consume({ context: profilesStoreContext, subscribe: true }),
  property()
], AgentAvatar.prototype, "store", void 0);
__decorate([
  state()
], AgentAvatar.prototype, "justCopiedHash", void 0);
AgentAvatar = __decorate([
  localized(),
  customElement("agent-avatar")
], AgentAvatar);

export {
  AgentAvatar
};
//# sourceMappingURL=chunk-H7YIJVQP.js.map
