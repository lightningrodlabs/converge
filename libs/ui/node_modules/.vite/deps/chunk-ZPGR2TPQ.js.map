{
  "version": 3,
  "sources": ["../../../../node_modules/@msgpack/msgpack/src/utils/int.ts", "../../../../node_modules/@msgpack/msgpack/src/utils/utf8.ts", "../../../../node_modules/@msgpack/msgpack/src/ExtData.ts", "../../../../node_modules/@msgpack/msgpack/src/DecodeError.ts", "../../../../node_modules/@msgpack/msgpack/src/timestamp.ts", "../../../../node_modules/@msgpack/msgpack/src/ExtensionCodec.ts", "../../../../node_modules/@msgpack/msgpack/src/utils/typedArrays.ts", "../../../../node_modules/@msgpack/msgpack/src/Encoder.ts", "../../../../node_modules/@msgpack/msgpack/src/encode.ts", "../../../../node_modules/@msgpack/msgpack/src/utils/prettyByte.ts", "../../../../node_modules/@msgpack/msgpack/src/CachedKeyDecoder.ts", "../../../../node_modules/@msgpack/msgpack/src/Decoder.ts", "../../../../node_modules/@msgpack/msgpack/src/decode.ts", "../../../../node_modules/@msgpack/msgpack/src/utils/stream.ts", "../../../../node_modules/@msgpack/msgpack/src/decodeAsync.ts"],
  "sourcesContent": ["// Integer Utility\n\nexport const UINT32_MAX = 0xffff_ffff;\n\n// DataView extension to handle int64 / uint64,\n// where the actual range is 53-bits integer (a.k.a. safe integer)\n\nexport function setUint64(view: DataView, offset: number, value: number): void {\n  const high = value / 0x1_0000_0000;\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function setInt64(view: DataView, offset: number, value: number): void {\n  const high = Math.floor(value / 0x1_0000_0000);\n  const low = value; // high bits are truncated by DataView\n  view.setUint32(offset, high);\n  view.setUint32(offset + 4, low);\n}\n\nexport function getInt64(view: DataView, offset: number): number {\n  const high = view.getInt32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n\nexport function getUint64(view: DataView, offset: number): number {\n  const high = view.getUint32(offset);\n  const low = view.getUint32(offset + 4);\n  return high * 0x1_0000_0000 + low;\n}\n", "/* eslint-disable @typescript-eslint/no-unnecessary-condition */\nimport { UINT32_MAX } from \"./int\";\n\nconst TEXT_ENCODING_AVAILABLE =\n  (typeof process === \"undefined\" || process?.env?.[\"TEXT_ENCODING\"] !== \"never\") &&\n  typeof TextEncoder !== \"undefined\" &&\n  typeof TextDecoder !== \"undefined\";\n\nexport function utf8Count(str: string): number {\n  const strLength = str.length;\n\n  let byteLength = 0;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      byteLength++;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      byteLength += 2;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        byteLength += 3;\n      } else {\n        // 4-byte\n        byteLength += 4;\n      }\n    }\n  }\n  return byteLength;\n}\n\nexport function utf8EncodeJs(str: string, output: Uint8Array, outputOffset: number): void {\n  const strLength = str.length;\n  let offset = outputOffset;\n  let pos = 0;\n  while (pos < strLength) {\n    let value = str.charCodeAt(pos++);\n\n    if ((value & 0xffffff80) === 0) {\n      // 1-byte\n      output[offset++] = value;\n      continue;\n    } else if ((value & 0xfffff800) === 0) {\n      // 2-bytes\n      output[offset++] = ((value >> 6) & 0x1f) | 0xc0;\n    } else {\n      // handle surrogate pair\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < strLength) {\n          const extra = str.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n      }\n\n      if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        output[offset++] = ((value >> 12) & 0x0f) | 0xe0;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // 4-byte\n        output[offset++] = ((value >> 18) & 0x07) | 0xf0;\n        output[offset++] = ((value >> 12) & 0x3f) | 0x80;\n        output[offset++] = ((value >> 6) & 0x3f) | 0x80;\n      }\n    }\n\n    output[offset++] = (value & 0x3f) | 0x80;\n  }\n}\n\nconst sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;\nexport const TEXT_ENCODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n  ? UINT32_MAX\n  : typeof process !== \"undefined\" && process?.env?.[\"TEXT_ENCODING\"] !== \"force\"\n  ? 200\n  : 0;\n\nfunction utf8EncodeTEencode(str: string, output: Uint8Array, outputOffset: number): void {\n  output.set(sharedTextEncoder!.encode(str), outputOffset);\n}\n\nfunction utf8EncodeTEencodeInto(str: string, output: Uint8Array, outputOffset: number): void {\n  sharedTextEncoder!.encodeInto(str, output.subarray(outputOffset));\n}\n\nexport const utf8EncodeTE = sharedTextEncoder?.encodeInto ? utf8EncodeTEencodeInto : utf8EncodeTEencode;\n\nconst CHUNK_SIZE = 0x1_000;\n\nexport function utf8DecodeJs(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  let offset = inputOffset;\n  const end = offset + byteLength;\n\n  const units: Array<number> = [];\n  let result = \"\";\n  while (offset < end) {\n    const byte1 = bytes[offset++]!;\n    if ((byte1 & 0x80) === 0) {\n      // 1 byte\n      units.push(byte1);\n    } else if ((byte1 & 0xe0) === 0xc0) {\n      // 2 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      units.push(((byte1 & 0x1f) << 6) | byte2);\n    } else if ((byte1 & 0xf0) === 0xe0) {\n      // 3 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      const byte3 = bytes[offset++]! & 0x3f;\n      units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n    } else if ((byte1 & 0xf8) === 0xf0) {\n      // 4 bytes\n      const byte2 = bytes[offset++]! & 0x3f;\n      const byte3 = bytes[offset++]! & 0x3f;\n      const byte4 = bytes[offset++]! & 0x3f;\n      let unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n      if (unit > 0xffff) {\n        unit -= 0x10000;\n        units.push(((unit >>> 10) & 0x3ff) | 0xd800);\n        unit = 0xdc00 | (unit & 0x3ff);\n      }\n      units.push(unit);\n    } else {\n      units.push(byte1);\n    }\n\n    if (units.length >= CHUNK_SIZE) {\n      result += String.fromCharCode(...units);\n      units.length = 0;\n    }\n  }\n\n  if (units.length > 0) {\n    result += String.fromCharCode(...units);\n  }\n\n  return result;\n}\n\nconst sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;\nexport const TEXT_DECODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE\n  ? UINT32_MAX\n  : typeof process !== \"undefined\" && process?.env?.[\"TEXT_DECODER\"] !== \"force\"\n  ? 200\n  : 0;\n\nexport function utf8DecodeTD(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n  const stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);\n  return sharedTextDecoder!.decode(stringBytes);\n}\n", "/**\n * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.\n */\nexport class ExtData {\n  constructor(readonly type: number, readonly data: Uint8Array) {}\n}\n", "export class DecodeError extends Error {\n  constructor(message: string) {\n    super(message);\n\n    // fix the prototype chain in a cross-platform way\n    const proto: typeof DecodeError.prototype = Object.create(DecodeError.prototype);\n    Object.setPrototypeOf(this, proto);\n\n    Object.defineProperty(this, \"name\", {\n      configurable: true,\n      enumerable: false,\n      value: DecodeError.name,\n    });\n  }\n}\n", "// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\nimport { DecodeError } from \"./DecodeError\";\nimport { getInt64, setInt64 } from \"./utils/int\";\n\nexport const EXT_TIMESTAMP = -1;\n\nexport type TimeSpec = {\n  sec: number;\n  nsec: number;\n};\n\nconst TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int\nconst TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int\n\nexport function encodeTimeSpecToTimestamp({ sec, nsec }: TimeSpec): Uint8Array {\n  if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {\n    // Here sec >= 0 && nsec >= 0\n    if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {\n      // timestamp 32 = { sec32 (unsigned) }\n      const rv = new Uint8Array(4);\n      const view = new DataView(rv.buffer);\n      view.setUint32(0, sec);\n      return rv;\n    } else {\n      // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }\n      const secHigh = sec / 0x100000000;\n      const secLow = sec & 0xffffffff;\n      const rv = new Uint8Array(8);\n      const view = new DataView(rv.buffer);\n      // nsec30 | secHigh2\n      view.setUint32(0, (nsec << 2) | (secHigh & 0x3));\n      // secLow32\n      view.setUint32(4, secLow);\n      return rv;\n    }\n  } else {\n    // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n    const rv = new Uint8Array(12);\n    const view = new DataView(rv.buffer);\n    view.setUint32(0, nsec);\n    setInt64(view, 4, sec);\n    return rv;\n  }\n}\n\nexport function encodeDateToTimeSpec(date: Date): TimeSpec {\n  const msec = date.getTime();\n  const sec = Math.floor(msec / 1e3);\n  const nsec = (msec - sec * 1e3) * 1e6;\n\n  // Normalizes { sec, nsec } to ensure nsec is unsigned.\n  const nsecInSec = Math.floor(nsec / 1e9);\n  return {\n    sec: sec + nsecInSec,\n    nsec: nsec - nsecInSec * 1e9,\n  };\n}\n\nexport function encodeTimestampExtension(object: unknown): Uint8Array | null {\n  if (object instanceof Date) {\n    const timeSpec = encodeDateToTimeSpec(object);\n    return encodeTimeSpecToTimestamp(timeSpec);\n  } else {\n    return null;\n  }\n}\n\nexport function decodeTimestampToTimeSpec(data: Uint8Array): TimeSpec {\n  const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\n  // data may be 32, 64, or 96 bits\n  switch (data.byteLength) {\n    case 4: {\n      // timestamp 32 = { sec32 }\n      const sec = view.getUint32(0);\n      const nsec = 0;\n      return { sec, nsec };\n    }\n    case 8: {\n      // timestamp 64 = { nsec30, sec34 }\n      const nsec30AndSecHigh2 = view.getUint32(0);\n      const secLow32 = view.getUint32(4);\n      const sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;\n      const nsec = nsec30AndSecHigh2 >>> 2;\n      return { sec, nsec };\n    }\n    case 12: {\n      // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }\n\n      const sec = getInt64(view, 4);\n      const nsec = view.getUint32(0);\n      return { sec, nsec };\n    }\n    default:\n      throw new DecodeError(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${data.length}`);\n  }\n}\n\nexport function decodeTimestampExtension(data: Uint8Array): Date {\n  const timeSpec = decodeTimestampToTimeSpec(data);\n  return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);\n}\n\nexport const timestampExtension = {\n  type: EXT_TIMESTAMP,\n  encode: encodeTimestampExtension,\n  decode: decodeTimestampExtension,\n};\n", "// ExtensionCodec to handle MessagePack extensions\n\nimport { ExtData } from \"./ExtData\";\nimport { timestampExtension } from \"./timestamp\";\n\nexport type ExtensionDecoderType<ContextType> = (\n  data: Uint8Array,\n  extensionType: number,\n  context: ContextType,\n) => unknown;\n\nexport type ExtensionEncoderType<ContextType> = (input: unknown, context: ContextType) => Uint8Array | null;\n\n// immutable interface to ExtensionCodec\nexport type ExtensionCodecType<ContextType> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n  tryToEncode(object: unknown, context: ContextType): ExtData | null;\n  decode(data: Uint8Array, extType: number, context: ContextType): unknown;\n};\n\nexport class ExtensionCodec<ContextType = undefined> implements ExtensionCodecType<ContextType> {\n  public static readonly defaultCodec: ExtensionCodecType<undefined> = new ExtensionCodec();\n\n  // ensures ExtensionCodecType<X> matches ExtensionCodec<X>\n  // this will make type errors a lot more clear\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n\n  // built-in extensions\n  private readonly builtInEncoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly builtInDecoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  // custom extensions\n  private readonly encoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly decoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  public constructor() {\n    this.register(timestampExtension);\n  }\n\n  public register({\n    type,\n    encode,\n    decode,\n  }: {\n    type: number;\n    encode: ExtensionEncoderType<ContextType>;\n    decode: ExtensionDecoderType<ContextType>;\n  }): void {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = 1 + type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n\n  public tryToEncode(object: unknown, context: ContextType): ExtData | null {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encodeExt = this.builtInEncoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    // custom extensions\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encodeExt = this.encoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  }\n\n  public decode(data: Uint8Array, type: number, context: ContextType): unknown {\n    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decodeExt) {\n      return decodeExt(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  }\n}\n", "export function ensureUint8Array(buffer: ArrayLike<number> | Uint8Array | ArrayBufferView | ArrayBuffer): Uint8Array {\n  if (buffer instanceof Uint8Array) {\n    return buffer;\n  } else if (ArrayBuffer.isView(buffer)) {\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  } else if (buffer instanceof ArrayBuffer) {\n    return new Uint8Array(buffer);\n  } else {\n    // ArrayLike<number>\n    return Uint8Array.from(buffer);\n  }\n}\n\nexport function createDataView(buffer: ArrayLike<number> | ArrayBufferView | ArrayBuffer): DataView {\n  if (buffer instanceof ArrayBuffer) {\n    return new DataView(buffer);\n  }\n\n  const bufferView = ensureUint8Array(buffer);\n  return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);\n}\n", "import { utf8EncodeJs, utf8Count, TEXT_ENCODER_THRESHOLD, utf8EncodeTE } from \"./utils/utf8\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { setInt64, setUint64 } from \"./utils/int\";\nimport { ensureUint8Array } from \"./utils/typedArrays\";\nimport type { ExtData } from \"./ExtData\";\n\nexport const DEFAULT_MAX_DEPTH = 100;\nexport const DEFAULT_INITIAL_BUFFER_SIZE = 2048;\n\nexport class Encoder<ContextType = undefined> {\n  private pos = 0;\n  private view = new DataView(new ArrayBuffer(this.initialBufferSize));\n  private bytes = new Uint8Array(this.view.buffer);\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxDepth = DEFAULT_MAX_DEPTH,\n    private readonly initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE,\n    private readonly sortKeys = false,\n    private readonly forceFloat32 = false,\n    private readonly ignoreUndefined = false,\n    private readonly forceIntegerToFloat = false,\n  ) {}\n\n  private reinitializeState() {\n    this.pos = 0;\n  }\n\n  /**\n   * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.\n   *\n   * @returns Encodes the object and returns a shared reference the encoder's internal buffer.\n   */\n  public encodeSharedRef(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.subarray(0, this.pos);\n  }\n\n  /**\n   * @returns Encodes the object and returns a copy of the encoder's internal buffer.\n   */\n  public encode(object: unknown): Uint8Array {\n    this.reinitializeState();\n    this.doEncode(object, 1);\n    return this.bytes.slice(0, this.pos);\n  }\n\n  private doEncode(object: unknown, depth: number): void {\n    if (depth > this.maxDepth) {\n      throw new Error(`Too deep objects in depth ${depth}`);\n    }\n\n    if (object == null) {\n      this.encodeNil();\n    } else if (typeof object === \"boolean\") {\n      this.encodeBoolean(object);\n    } else if (typeof object === \"number\") {\n      this.encodeNumber(object);\n    } else if (typeof object === \"string\") {\n      this.encodeString(object);\n    } else {\n      this.encodeObject(object, depth);\n    }\n  }\n\n  private ensureBufferSizeToWrite(sizeToWrite: number) {\n    const requiredSize = this.pos + sizeToWrite;\n\n    if (this.view.byteLength < requiredSize) {\n      this.resizeBuffer(requiredSize * 2);\n    }\n  }\n\n  private resizeBuffer(newSize: number) {\n    const newBuffer = new ArrayBuffer(newSize);\n    const newBytes = new Uint8Array(newBuffer);\n    const newView = new DataView(newBuffer);\n\n    newBytes.set(this.bytes);\n\n    this.view = newView;\n    this.bytes = newBytes;\n  }\n\n  private encodeNil() {\n    this.writeU8(0xc0);\n  }\n\n  private encodeBoolean(object: boolean) {\n    if (object === false) {\n      this.writeU8(0xc2);\n    } else {\n      this.writeU8(0xc3);\n    }\n  }\n  private encodeNumber(object: number) {\n    if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {\n      if (object >= 0) {\n        if (object < 0x80) {\n          // positive fixint\n          this.writeU8(object);\n        } else if (object < 0x100) {\n          // uint 8\n          this.writeU8(0xcc);\n          this.writeU8(object);\n        } else if (object < 0x10000) {\n          // uint 16\n          this.writeU8(0xcd);\n          this.writeU16(object);\n        } else if (object < 0x100000000) {\n          // uint 32\n          this.writeU8(0xce);\n          this.writeU32(object);\n        } else {\n          // uint 64\n          this.writeU8(0xcf);\n          this.writeU64(object);\n        }\n      } else {\n        if (object >= -0x20) {\n          // negative fixint\n          this.writeU8(0xe0 | (object + 0x20));\n        } else if (object >= -0x80) {\n          // int 8\n          this.writeU8(0xd0);\n          this.writeI8(object);\n        } else if (object >= -0x8000) {\n          // int 16\n          this.writeU8(0xd1);\n          this.writeI16(object);\n        } else if (object >= -0x80000000) {\n          // int 32\n          this.writeU8(0xd2);\n          this.writeI32(object);\n        } else {\n          // int 64\n          this.writeU8(0xd3);\n          this.writeI64(object);\n        }\n      }\n    } else {\n      // non-integer numbers\n      if (this.forceFloat32) {\n        // float 32\n        this.writeU8(0xca);\n        this.writeF32(object);\n      } else {\n        // float 64\n        this.writeU8(0xcb);\n        this.writeF64(object);\n      }\n    }\n  }\n\n  private writeStringHeader(byteLength: number) {\n    if (byteLength < 32) {\n      // fixstr\n      this.writeU8(0xa0 + byteLength);\n    } else if (byteLength < 0x100) {\n      // str 8\n      this.writeU8(0xd9);\n      this.writeU8(byteLength);\n    } else if (byteLength < 0x10000) {\n      // str 16\n      this.writeU8(0xda);\n      this.writeU16(byteLength);\n    } else if (byteLength < 0x100000000) {\n      // str 32\n      this.writeU8(0xdb);\n      this.writeU32(byteLength);\n    } else {\n      throw new Error(`Too long string: ${byteLength} bytes in UTF-8`);\n    }\n  }\n\n  private encodeString(object: string) {\n    const maxHeaderSize = 1 + 4;\n    const strLength = object.length;\n\n    if (strLength > TEXT_ENCODER_THRESHOLD) {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeTE(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    } else {\n      const byteLength = utf8Count(object);\n      this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);\n      this.writeStringHeader(byteLength);\n      utf8EncodeJs(object, this.bytes, this.pos);\n      this.pos += byteLength;\n    }\n  }\n\n  private encodeObject(object: unknown, depth: number) {\n    // try to encode objects with custom codec first of non-primitives\n    const ext = this.extensionCodec.tryToEncode(object, this.context);\n    if (ext != null) {\n      this.encodeExtension(ext);\n    } else if (Array.isArray(object)) {\n      this.encodeArray(object, depth);\n    } else if (ArrayBuffer.isView(object)) {\n      this.encodeBinary(object);\n    } else if (typeof object === \"object\") {\n      this.encodeMap(object as Record<string, unknown>, depth);\n    } else {\n      // symbol, function and other special object come here unless extensionCodec handles them.\n      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(object)}`);\n    }\n  }\n\n  private encodeBinary(object: ArrayBufferView) {\n    const size = object.byteLength;\n    if (size < 0x100) {\n      // bin 8\n      this.writeU8(0xc4);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // bin 16\n      this.writeU8(0xc5);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // bin 32\n      this.writeU8(0xc6);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large binary: ${size}`);\n    }\n    const bytes = ensureUint8Array(object);\n    this.writeU8a(bytes);\n  }\n\n  private encodeArray(object: Array<unknown>, depth: number) {\n    const size = object.length;\n    if (size < 16) {\n      // fixarray\n      this.writeU8(0x90 + size);\n    } else if (size < 0x10000) {\n      // array 16\n      this.writeU8(0xdc);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // array 32\n      this.writeU8(0xdd);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large array: ${size}`);\n    }\n    for (const item of object) {\n      this.doEncode(item, depth + 1);\n    }\n  }\n\n  private countWithoutUndefined(object: Record<string, unknown>, keys: ReadonlyArray<string>): number {\n    let count = 0;\n\n    for (const key of keys) {\n      if (object[key] !== undefined) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  private encodeMap(object: Record<string, unknown>, depth: number) {\n    const keys = Object.keys(object);\n    if (this.sortKeys) {\n      keys.sort();\n    }\n\n    const size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;\n\n    if (size < 16) {\n      // fixmap\n      this.writeU8(0x80 + size);\n    } else if (size < 0x10000) {\n      // map 16\n      this.writeU8(0xde);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // map 32\n      this.writeU8(0xdf);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large map object: ${size}`);\n    }\n\n    for (const key of keys) {\n      const value = object[key];\n\n      if (!(this.ignoreUndefined && value === undefined)) {\n        this.encodeString(key);\n        this.doEncode(value, depth + 1);\n      }\n    }\n  }\n\n  private encodeExtension(ext: ExtData) {\n    const size = ext.data.length;\n    if (size === 1) {\n      // fixext 1\n      this.writeU8(0xd4);\n    } else if (size === 2) {\n      // fixext 2\n      this.writeU8(0xd5);\n    } else if (size === 4) {\n      // fixext 4\n      this.writeU8(0xd6);\n    } else if (size === 8) {\n      // fixext 8\n      this.writeU8(0xd7);\n    } else if (size === 16) {\n      // fixext 16\n      this.writeU8(0xd8);\n    } else if (size < 0x100) {\n      // ext 8\n      this.writeU8(0xc7);\n      this.writeU8(size);\n    } else if (size < 0x10000) {\n      // ext 16\n      this.writeU8(0xc8);\n      this.writeU16(size);\n    } else if (size < 0x100000000) {\n      // ext 32\n      this.writeU8(0xc9);\n      this.writeU32(size);\n    } else {\n      throw new Error(`Too large extension object: ${size}`);\n    }\n    this.writeI8(ext.type);\n    this.writeU8a(ext.data);\n  }\n\n  private writeU8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setUint8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU8a(values: ArrayLike<number>) {\n    const size = values.length;\n    this.ensureBufferSizeToWrite(size);\n\n    this.bytes.set(values, this.pos);\n    this.pos += size;\n  }\n\n  private writeI8(value: number) {\n    this.ensureBufferSizeToWrite(1);\n\n    this.view.setInt8(this.pos, value);\n    this.pos++;\n  }\n\n  private writeU16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setUint16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeI16(value: number) {\n    this.ensureBufferSizeToWrite(2);\n\n    this.view.setInt16(this.pos, value);\n    this.pos += 2;\n  }\n\n  private writeU32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setUint32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeI32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n\n    this.view.setInt32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF32(value: number) {\n    this.ensureBufferSizeToWrite(4);\n    this.view.setFloat32(this.pos, value);\n    this.pos += 4;\n  }\n\n  private writeF64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n    this.view.setFloat64(this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeU64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setUint64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n\n  private writeI64(value: number) {\n    this.ensureBufferSizeToWrite(8);\n\n    setInt64(this.view, this.pos, value);\n    this.pos += 8;\n  }\n}\n", "import { Encoder } from \"./Encoder\";\nimport type { ExtensionCodecType } from \"./ExtensionCodec\";\nimport type { ContextOf, SplitUndefined } from \"./context\";\n\nexport type EncodeOptions<ContextType = undefined> = Partial<\n  Readonly<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * The maximum depth in nested objects and arrays.\n     *\n     * Defaults to 100.\n     */\n    maxDepth: number;\n\n    /**\n     * The initial size of the internal buffer.\n     *\n     * Defaults to 2048.\n     */\n    initialBufferSize: number;\n\n    /**\n     * If `true`, the keys of an object is sorted. In other words, the encoded\n     * binary is canonical and thus comparable to another encoded binary.\n     *\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\n     */\n    sortKeys: boolean;\n    /**\n     * If `true`, non-integer numbers are encoded in float32, not in float64 (the default).\n     *\n     * Only use it if precisions don't matter.\n     *\n     * Defaults to `false`.\n     */\n    forceFloat32: boolean;\n\n    /**\n     * If `true`, an object property with `undefined` value are ignored.\n     * e.g. `{ foo: undefined }` will be encoded as `{}`, as `JSON.stringify()` does.\n     *\n     * Defaults to `false`. If enabled, it spends more time in encoding objects.\n     */\n    ignoreUndefined: boolean;\n\n    /**\n     * If `true`, integer numbers are encoded as floating point numbers,\n     * with the `forceFloat32` option taken into account.\n     *\n     * Defaults to `false`.\n     */\n    forceIntegerToFloat: boolean;\n  }>\n> &\n  ContextOf<ContextType>;\n\nconst defaultEncodeOptions: EncodeOptions = {};\n\n/**\n * It encodes `value` in the MessagePack format and\n * returns a byte buffer.\n *\n * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.\n */\nexport function encode<ContextType = undefined>(\n  value: unknown,\n  options: EncodeOptions<SplitUndefined<ContextType>> = defaultEncodeOptions as any,\n): Uint8Array {\n  const encoder = new Encoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxDepth,\n    options.initialBufferSize,\n    options.sortKeys,\n    options.forceFloat32,\n    options.ignoreUndefined,\n    options.forceIntegerToFloat,\n  );\n  return encoder.encodeSharedRef(value);\n}\n", "export function prettyByte(byte: number): string {\n  return `${byte < 0 ? \"-\" : \"\"}0x${Math.abs(byte).toString(16).padStart(2, \"0\")}`;\n}\n", "import { utf8DecodeJs } from \"./utils/utf8\";\n\nconst DEFAULT_MAX_KEY_LENGTH = 16;\nconst DEFAULT_MAX_LENGTH_PER_KEY = 16;\n\nexport interface KeyDecoder {\n  canBeCached(byteLength: number): boolean;\n  decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string;\n}\ninterface KeyCacheRecord {\n  readonly bytes: Uint8Array;\n  readonly str: string;\n}\n\nexport class CachedKeyDecoder implements KeyDecoder {\n  hit = 0;\n  miss = 0;\n  private readonly caches: Array<Array<KeyCacheRecord>>;\n\n  constructor(readonly maxKeyLength = DEFAULT_MAX_KEY_LENGTH, readonly maxLengthPerKey = DEFAULT_MAX_LENGTH_PER_KEY) {\n    // avoid `new Array(N)`, which makes a sparse array,\n    // because a sparse array is typically slower than a non-sparse array.\n    this.caches = [];\n    for (let i = 0; i < this.maxKeyLength; i++) {\n      this.caches.push([]);\n    }\n  }\n\n  public canBeCached(byteLength: number): boolean {\n    return byteLength > 0 && byteLength <= this.maxKeyLength;\n  }\n\n  private find(bytes: Uint8Array, inputOffset: number, byteLength: number): string | null {\n    const records = this.caches[byteLength - 1]!;\n\n    FIND_CHUNK: for (const record of records) {\n      const recordBytes = record.bytes;\n\n      for (let j = 0; j < byteLength; j++) {\n        if (recordBytes[j] !== bytes[inputOffset + j]) {\n          continue FIND_CHUNK;\n        }\n      }\n      return record.str;\n    }\n    return null;\n  }\n\n  private store(bytes: Uint8Array, value: string) {\n    const records = this.caches[bytes.length - 1]!;\n    const record: KeyCacheRecord = { bytes, str: value };\n\n    if (records.length >= this.maxLengthPerKey) {\n      // `records` are full!\n      // Set `record` to an arbitrary position.\n      records[(Math.random() * records.length) | 0] = record;\n    } else {\n      records.push(record);\n    }\n  }\n\n  public decode(bytes: Uint8Array, inputOffset: number, byteLength: number): string {\n    const cachedValue = this.find(bytes, inputOffset, byteLength);\n    if (cachedValue != null) {\n      this.hit++;\n      return cachedValue;\n    }\n    this.miss++;\n\n    const str = utf8DecodeJs(bytes, inputOffset, byteLength);\n    // Ensure to copy a slice of bytes because the byte may be NodeJS Buffer and Buffer#slice() returns a reference to its internal ArrayBuffer.\n    const slicedCopyOfBytes = Uint8Array.prototype.slice.call(bytes, inputOffset, inputOffset + byteLength);\n    this.store(slicedCopyOfBytes, str);\n    return str;\n  }\n}\n", "import { prettyByte } from \"./utils/prettyByte\";\nimport { ExtensionCodec, ExtensionCodecType } from \"./ExtensionCodec\";\nimport { getInt64, getUint64, UINT32_MAX } from \"./utils/int\";\nimport { utf8DecodeJs, TEXT_DECODER_THRESHOLD, utf8DecodeTD } from \"./utils/utf8\";\nimport { createDataView, ensureUint8Array } from \"./utils/typedArrays\";\nimport { CachedKeyDecoder, KeyDecoder } from \"./CachedKeyDecoder\";\nimport { DecodeError } from \"./DecodeError\";\n\nconst enum State {\n  ARRAY,\n  MAP_KEY,\n  MAP_VALUE,\n}\n\ntype MapKeyType = string | number;\n\nconst isValidMapKeyType = (key: unknown): key is MapKeyType => {\n  const keyType = typeof key;\n\n  return keyType === \"string\" || keyType === \"number\";\n};\n\ntype StackMapState = {\n  type: State.MAP_KEY | State.MAP_VALUE;\n  size: number;\n  key: MapKeyType | null;\n  readCount: number;\n  map: Record<string, unknown>;\n};\n\ntype StackArrayState = {\n  type: State.ARRAY;\n  size: number;\n  array: Array<unknown>;\n  position: number;\n};\n\ntype StackState = StackArrayState | StackMapState;\n\nconst HEAD_BYTE_REQUIRED = -1;\n\nconst EMPTY_VIEW = new DataView(new ArrayBuffer(0));\nconst EMPTY_BYTES = new Uint8Array(EMPTY_VIEW.buffer);\n\n// IE11: Hack to support IE11.\n// IE11: Drop this hack and just use RangeError when IE11 is obsolete.\nexport const DataViewIndexOutOfBoundsError: typeof Error = (() => {\n  try {\n    // IE11: The spec says it should throw RangeError,\n    // IE11: but in IE11 it throws TypeError.\n    EMPTY_VIEW.getInt8(0);\n  } catch (e: any) {\n    return e.constructor;\n  }\n  throw new Error(\"never reached\");\n})();\n\nconst MORE_DATA = new DataViewIndexOutOfBoundsError(\"Insufficient data\");\n\nconst sharedCachedKeyDecoder = new CachedKeyDecoder();\n\nexport class Decoder<ContextType = undefined> {\n  private totalPos = 0;\n  private pos = 0;\n\n  private view = EMPTY_VIEW;\n  private bytes = EMPTY_BYTES;\n  private headByte = HEAD_BYTE_REQUIRED;\n  private readonly stack: Array<StackState> = [];\n\n  public constructor(\n    private readonly extensionCodec: ExtensionCodecType<ContextType> = ExtensionCodec.defaultCodec as any,\n    private readonly context: ContextType = undefined as any,\n    private readonly maxStrLength = UINT32_MAX,\n    private readonly maxBinLength = UINT32_MAX,\n    private readonly maxArrayLength = UINT32_MAX,\n    private readonly maxMapLength = UINT32_MAX,\n    private readonly maxExtLength = UINT32_MAX,\n    private readonly keyDecoder: KeyDecoder | null = sharedCachedKeyDecoder,\n  ) {}\n\n  private reinitializeState() {\n    this.totalPos = 0;\n    this.headByte = HEAD_BYTE_REQUIRED;\n    this.stack.length = 0;\n\n    // view, bytes, and pos will be re-initialized in setBuffer()\n  }\n\n  private setBuffer(buffer: ArrayLike<number> | BufferSource): void {\n    this.bytes = ensureUint8Array(buffer);\n    this.view = createDataView(this.bytes);\n    this.pos = 0;\n  }\n\n  private appendBuffer(buffer: ArrayLike<number> | BufferSource) {\n    if (this.headByte === HEAD_BYTE_REQUIRED && !this.hasRemaining(1)) {\n      this.setBuffer(buffer);\n    } else {\n      const remainingData = this.bytes.subarray(this.pos);\n      const newData = ensureUint8Array(buffer);\n\n      // concat remainingData + newData\n      const newBuffer = new Uint8Array(remainingData.length + newData.length);\n      newBuffer.set(remainingData);\n      newBuffer.set(newData, remainingData.length);\n      this.setBuffer(newBuffer);\n    }\n  }\n\n  private hasRemaining(size: number) {\n    return this.view.byteLength - this.pos >= size;\n  }\n\n  private createExtraByteError(posToShow: number): Error {\n    const { view, pos } = this;\n    return new RangeError(`Extra ${view.byteLength - pos} of ${view.byteLength} byte(s) found at buffer[${posToShow}]`);\n  }\n\n  /**\n   * @throws {@link DecodeError}\n   * @throws {@link RangeError}\n   */\n  public decode(buffer: ArrayLike<number> | BufferSource): unknown {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n\n    const object = this.doDecodeSync();\n    if (this.hasRemaining(1)) {\n      throw this.createExtraByteError(this.pos);\n    }\n    return object;\n  }\n\n  public *decodeMulti(buffer: ArrayLike<number> | BufferSource): Generator<unknown, void, unknown> {\n    this.reinitializeState();\n    this.setBuffer(buffer);\n\n    while (this.hasRemaining(1)) {\n      yield this.doDecodeSync();\n    }\n  }\n\n  public async decodeAsync(stream: AsyncIterable<ArrayLike<number> | BufferSource>): Promise<unknown> {\n    let decoded = false;\n    let object: unknown;\n    for await (const buffer of stream) {\n      if (decoded) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      try {\n        object = this.doDecodeSync();\n        decoded = true;\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n\n    if (decoded) {\n      if (this.hasRemaining(1)) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n      return object;\n    }\n\n    const { headByte, pos, totalPos } = this;\n    throw new RangeError(\n      `Insufficient data in parsing ${prettyByte(headByte)} at ${totalPos} (${pos} in the current buffer)`,\n    );\n  }\n\n  public decodeArrayStream(\n    stream: AsyncIterable<ArrayLike<number> | BufferSource>,\n  ): AsyncGenerator<unknown, void, unknown> {\n    return this.decodeMultiAsync(stream, true);\n  }\n\n  public decodeStream(stream: AsyncIterable<ArrayLike<number> | BufferSource>): AsyncGenerator<unknown, void, unknown> {\n    return this.decodeMultiAsync(stream, false);\n  }\n\n  private async *decodeMultiAsync(stream: AsyncIterable<ArrayLike<number> | BufferSource>, isArray: boolean) {\n    let isArrayHeaderRequired = isArray;\n    let arrayItemsLeft = -1;\n\n    for await (const buffer of stream) {\n      if (isArray && arrayItemsLeft === 0) {\n        throw this.createExtraByteError(this.totalPos);\n      }\n\n      this.appendBuffer(buffer);\n\n      if (isArrayHeaderRequired) {\n        arrayItemsLeft = this.readArraySize();\n        isArrayHeaderRequired = false;\n        this.complete();\n      }\n\n      try {\n        while (true) {\n          yield this.doDecodeSync();\n          if (--arrayItemsLeft === 0) {\n            break;\n          }\n        }\n      } catch (e) {\n        if (!(e instanceof DataViewIndexOutOfBoundsError)) {\n          throw e; // rethrow\n        }\n        // fallthrough\n      }\n      this.totalPos += this.pos;\n    }\n  }\n\n  private doDecodeSync(): unknown {\n    DECODE: while (true) {\n      const headByte = this.readHeadByte();\n      let object: unknown;\n\n      if (headByte >= 0xe0) {\n        // negative fixint (111x xxxx) 0xe0 - 0xff\n        object = headByte - 0x100;\n      } else if (headByte < 0xc0) {\n        if (headByte < 0x80) {\n          // positive fixint (0xxx xxxx) 0x00 - 0x7f\n          object = headByte;\n        } else if (headByte < 0x90) {\n          // fixmap (1000 xxxx) 0x80 - 0x8f\n          const size = headByte - 0x80;\n          if (size !== 0) {\n            this.pushMapState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = {};\n          }\n        } else if (headByte < 0xa0) {\n          // fixarray (1001 xxxx) 0x90 - 0x9f\n          const size = headByte - 0x90;\n          if (size !== 0) {\n            this.pushArrayState(size);\n            this.complete();\n            continue DECODE;\n          } else {\n            object = [];\n          }\n        } else {\n          // fixstr (101x xxxx) 0xa0 - 0xbf\n          const byteLength = headByte - 0xa0;\n          object = this.decodeUtf8String(byteLength, 0);\n        }\n      } else if (headByte === 0xc0) {\n        // nil\n        object = null;\n      } else if (headByte === 0xc2) {\n        // false\n        object = false;\n      } else if (headByte === 0xc3) {\n        // true\n        object = true;\n      } else if (headByte === 0xca) {\n        // float 32\n        object = this.readF32();\n      } else if (headByte === 0xcb) {\n        // float 64\n        object = this.readF64();\n      } else if (headByte === 0xcc) {\n        // uint 8\n        object = this.readU8();\n      } else if (headByte === 0xcd) {\n        // uint 16\n        object = this.readU16();\n      } else if (headByte === 0xce) {\n        // uint 32\n        object = this.readU32();\n      } else if (headByte === 0xcf) {\n        // uint 64\n        object = this.readU64();\n      } else if (headByte === 0xd0) {\n        // int 8\n        object = this.readI8();\n      } else if (headByte === 0xd1) {\n        // int 16\n        object = this.readI16();\n      } else if (headByte === 0xd2) {\n        // int 32\n        object = this.readI32();\n      } else if (headByte === 0xd3) {\n        // int 64\n        object = this.readI64();\n      } else if (headByte === 0xd9) {\n        // str 8\n        const byteLength = this.lookU8();\n        object = this.decodeUtf8String(byteLength, 1);\n      } else if (headByte === 0xda) {\n        // str 16\n        const byteLength = this.lookU16();\n        object = this.decodeUtf8String(byteLength, 2);\n      } else if (headByte === 0xdb) {\n        // str 32\n        const byteLength = this.lookU32();\n        object = this.decodeUtf8String(byteLength, 4);\n      } else if (headByte === 0xdc) {\n        // array 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xdd) {\n        // array 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushArrayState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = [];\n        }\n      } else if (headByte === 0xde) {\n        // map 16\n        const size = this.readU16();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xdf) {\n        // map 32\n        const size = this.readU32();\n        if (size !== 0) {\n          this.pushMapState(size);\n          this.complete();\n          continue DECODE;\n        } else {\n          object = {};\n        }\n      } else if (headByte === 0xc4) {\n        // bin 8\n        const size = this.lookU8();\n        object = this.decodeBinary(size, 1);\n      } else if (headByte === 0xc5) {\n        // bin 16\n        const size = this.lookU16();\n        object = this.decodeBinary(size, 2);\n      } else if (headByte === 0xc6) {\n        // bin 32\n        const size = this.lookU32();\n        object = this.decodeBinary(size, 4);\n      } else if (headByte === 0xd4) {\n        // fixext 1\n        object = this.decodeExtension(1, 0);\n      } else if (headByte === 0xd5) {\n        // fixext 2\n        object = this.decodeExtension(2, 0);\n      } else if (headByte === 0xd6) {\n        // fixext 4\n        object = this.decodeExtension(4, 0);\n      } else if (headByte === 0xd7) {\n        // fixext 8\n        object = this.decodeExtension(8, 0);\n      } else if (headByte === 0xd8) {\n        // fixext 16\n        object = this.decodeExtension(16, 0);\n      } else if (headByte === 0xc7) {\n        // ext 8\n        const size = this.lookU8();\n        object = this.decodeExtension(size, 1);\n      } else if (headByte === 0xc8) {\n        // ext 16\n        const size = this.lookU16();\n        object = this.decodeExtension(size, 2);\n      } else if (headByte === 0xc9) {\n        // ext 32\n        const size = this.lookU32();\n        object = this.decodeExtension(size, 4);\n      } else {\n        throw new DecodeError(`Unrecognized type byte: ${prettyByte(headByte)}`);\n      }\n\n      this.complete();\n\n      const stack = this.stack;\n      while (stack.length > 0) {\n        // arrays and maps\n        const state = stack[stack.length - 1]!;\n        if (state.type === State.ARRAY) {\n          state.array[state.position] = object;\n          state.position++;\n          if (state.position === state.size) {\n            stack.pop();\n            object = state.array;\n          } else {\n            continue DECODE;\n          }\n        } else if (state.type === State.MAP_KEY) {\n          if (!isValidMapKeyType(object)) {\n            throw new DecodeError(\"The type of key must be string or number but \" + typeof object);\n          }\n          if (object === \"__proto__\") {\n            throw new DecodeError(\"The key __proto__ is not allowed\");\n          }\n\n          state.key = object;\n          state.type = State.MAP_VALUE;\n          continue DECODE;\n        } else {\n          // it must be `state.type === State.MAP_VALUE` here\n\n          state.map[state.key!] = object;\n          state.readCount++;\n\n          if (state.readCount === state.size) {\n            stack.pop();\n            object = state.map;\n          } else {\n            state.key = null;\n            state.type = State.MAP_KEY;\n            continue DECODE;\n          }\n        }\n      }\n\n      return object;\n    }\n  }\n\n  private readHeadByte(): number {\n    if (this.headByte === HEAD_BYTE_REQUIRED) {\n      this.headByte = this.readU8();\n      // console.log(\"headByte\", prettyByte(this.headByte));\n    }\n\n    return this.headByte;\n  }\n\n  private complete(): void {\n    this.headByte = HEAD_BYTE_REQUIRED;\n  }\n\n  private readArraySize(): number {\n    const headByte = this.readHeadByte();\n\n    switch (headByte) {\n      case 0xdc:\n        return this.readU16();\n      case 0xdd:\n        return this.readU32();\n      default: {\n        if (headByte < 0xa0) {\n          return headByte - 0x90;\n        } else {\n          throw new DecodeError(`Unrecognized array type byte: ${prettyByte(headByte)}`);\n        }\n      }\n    }\n  }\n\n  private pushMapState(size: number) {\n    if (size > this.maxMapLength) {\n      throw new DecodeError(`Max length exceeded: map length (${size}) > maxMapLengthLength (${this.maxMapLength})`);\n    }\n\n    this.stack.push({\n      type: State.MAP_KEY,\n      size,\n      key: null,\n      readCount: 0,\n      map: {},\n    });\n  }\n\n  private pushArrayState(size: number) {\n    if (size > this.maxArrayLength) {\n      throw new DecodeError(`Max length exceeded: array length (${size}) > maxArrayLength (${this.maxArrayLength})`);\n    }\n\n    this.stack.push({\n      type: State.ARRAY,\n      size,\n      array: new Array<unknown>(size),\n      position: 0,\n    });\n  }\n\n  private decodeUtf8String(byteLength: number, headerOffset: number): string {\n    if (byteLength > this.maxStrLength) {\n      throw new DecodeError(\n        `Max length exceeded: UTF-8 byte length (${byteLength}) > maxStrLength (${this.maxStrLength})`,\n      );\n    }\n\n    if (this.bytes.byteLength < this.pos + headerOffset + byteLength) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headerOffset;\n    let object: string;\n    if (this.stateIsMapKey() && this.keyDecoder?.canBeCached(byteLength)) {\n      object = this.keyDecoder.decode(this.bytes, offset, byteLength);\n    } else if (byteLength > TEXT_DECODER_THRESHOLD) {\n      object = utf8DecodeTD(this.bytes, offset, byteLength);\n    } else {\n      object = utf8DecodeJs(this.bytes, offset, byteLength);\n    }\n    this.pos += headerOffset + byteLength;\n    return object;\n  }\n\n  private stateIsMapKey(): boolean {\n    if (this.stack.length > 0) {\n      const state = this.stack[this.stack.length - 1]!;\n      return state.type === State.MAP_KEY;\n    }\n    return false;\n  }\n\n  private decodeBinary(byteLength: number, headOffset: number): Uint8Array {\n    if (byteLength > this.maxBinLength) {\n      throw new DecodeError(`Max length exceeded: bin length (${byteLength}) > maxBinLength (${this.maxBinLength})`);\n    }\n\n    if (!this.hasRemaining(byteLength + headOffset)) {\n      throw MORE_DATA;\n    }\n\n    const offset = this.pos + headOffset;\n    const object = this.bytes.subarray(offset, offset + byteLength);\n    this.pos += headOffset + byteLength;\n    return object;\n  }\n\n  private decodeExtension(size: number, headOffset: number): unknown {\n    if (size > this.maxExtLength) {\n      throw new DecodeError(`Max length exceeded: ext length (${size}) > maxExtLength (${this.maxExtLength})`);\n    }\n\n    const extType = this.view.getInt8(this.pos + headOffset);\n    const data = this.decodeBinary(size, headOffset + 1 /* extType */);\n    return this.extensionCodec.decode(data, extType, this.context);\n  }\n\n  private lookU8() {\n    return this.view.getUint8(this.pos);\n  }\n\n  private lookU16() {\n    return this.view.getUint16(this.pos);\n  }\n\n  private lookU32() {\n    return this.view.getUint32(this.pos);\n  }\n\n  private readU8(): number {\n    const value = this.view.getUint8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readI8(): number {\n    const value = this.view.getInt8(this.pos);\n    this.pos++;\n    return value;\n  }\n\n  private readU16(): number {\n    const value = this.view.getUint16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readI16(): number {\n    const value = this.view.getInt16(this.pos);\n    this.pos += 2;\n    return value;\n  }\n\n  private readU32(): number {\n    const value = this.view.getUint32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readI32(): number {\n    const value = this.view.getInt32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readU64(): number {\n    const value = getUint64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readI64(): number {\n    const value = getInt64(this.view, this.pos);\n    this.pos += 8;\n    return value;\n  }\n\n  private readF32() {\n    const value = this.view.getFloat32(this.pos);\n    this.pos += 4;\n    return value;\n  }\n\n  private readF64() {\n    const value = this.view.getFloat64(this.pos);\n    this.pos += 8;\n    return value;\n  }\n}\n", "import { Decoder } from \"./Decoder\";\nimport type { ExtensionCodecType } from \"./ExtensionCodec\";\nimport type { ContextOf, SplitUndefined } from \"./context\";\n\nexport type DecodeOptions<ContextType = undefined> = Readonly<\n  Partial<{\n    extensionCodec: ExtensionCodecType<ContextType>;\n\n    /**\n     * Maximum string length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxStrLength: number;\n    /**\n     * Maximum binary length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxBinLength: number;\n    /**\n     * Maximum array length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxArrayLength: number;\n    /**\n     * Maximum map length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxMapLength: number;\n    /**\n     * Maximum extension length.\n     *\n     * Defaults to 4_294_967_295 (UINT32_MAX).\n     */\n    maxExtLength: number;\n  }>\n> &\n  ContextOf<ContextType>;\n\nexport const defaultDecodeOptions: DecodeOptions = {};\n\n/**\n * It decodes a single MessagePack object in a buffer.\n *\n * This is a synchronous decoding function.\n * See other variants for asynchronous decoding: {@link decodeAsync()}, {@link decodeStream()}, or {@link decodeArrayStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decode<ContextType = undefined>(\n  buffer: ArrayLike<number> | BufferSource,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): unknown {\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decode(buffer);\n}\n\n/**\n * It decodes multiple MessagePack objects in a buffer.\n * This is corresponding to {@link decodeMultiStream()}.\n *\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMulti<ContextType = undefined>(\n  buffer: ArrayLike<number> | BufferSource,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): Generator<unknown, void, unknown> {\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeMulti(buffer);\n}\n", "// utility for whatwg streams\n\n// The living standard of whatwg streams says\n// ReadableStream is also AsyncIterable, but\n// as of June 2019, no browser implements it.\n// See https://streams.spec.whatwg.org/ for details\nexport type ReadableStreamLike<T> = AsyncIterable<T> | ReadableStream<T>;\n\nexport function isAsyncIterable<T>(object: ReadableStreamLike<T>): object is AsyncIterable<T> {\n  return (object as any)[Symbol.asyncIterator] != null;\n}\n\nfunction assertNonNull<T>(value: T | null | undefined): asserts value is T {\n  if (value == null) {\n    throw new Error(\"Assertion Failure: value must not be null nor undefined\");\n  }\n}\n\nexport async function* asyncIterableFromStream<T>(stream: ReadableStream<T>): AsyncIterable<T> {\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      assertNonNull(value);\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function ensureAsyncIterable<T>(streamLike: ReadableStreamLike<T>): AsyncIterable<T> {\n  if (isAsyncIterable(streamLike)) {\n    return streamLike;\n  } else {\n    return asyncIterableFromStream(streamLike);\n  }\n}\n", "import { Decoder } from \"./Decoder\";\nimport { ensureAsyncIterable } from \"./utils/stream\";\nimport { defaultDecodeOptions } from \"./decode\";\nimport type { ReadableStreamLike } from \"./utils/stream\";\nimport type { DecodeOptions } from \"./decode\";\nimport type { SplitUndefined } from \"./context\";\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\n export async function decodeAsync<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): Promise<unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n  return decoder.decodeAsync(stream);\n}\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\n export function decodeArrayStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeArrayStream(stream);\n}\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMultiStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n\n  const decoder = new Decoder(\n    options.extensionCodec,\n    (options as typeof options & { context: any }).context,\n    options.maxStrLength,\n    options.maxBinLength,\n    options.maxArrayLength,\n    options.maxMapLength,\n    options.maxExtLength,\n  );\n\n  return decoder.decodeStream(stream);\n}\n\n/**\n * @deprecated Use {@link decodeMultiStream()} instead.\n */\nexport function decodeStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options: DecodeOptions<SplitUndefined<ContextType>> = defaultDecodeOptions as any,\n): AsyncGenerator<unknown, void, unknown> {\n  return decodeMultiStream(streamLike, options);\n}\n"],
  "mappings": "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",
  "names": ["ExtData", "DecodeError", "_a", "ExtensionCodec", "_a", "encode", "decode", "Encoder", "CachedKeyDecoder", "Decoder", "_a", "_b", "__await", "_a", "_b"]
}
