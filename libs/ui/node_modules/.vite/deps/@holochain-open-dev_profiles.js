import {
  LazyHoloHashMap,
  ZomeClient,
  asyncDeriveStore,
  asyncReadable,
  decodeEntry,
  joinAsyncMap,
  lazyLoad,
  lazyLoadAndPoll,
  manualReloadStore,
  slice
} from "./chunk-4Z3R6YLO.js";
import "./chunk-22VNO7Y6.js";
import "./chunk-2AWGVYMQ.js";
import "./chunk-ZPGR2TPQ.js";
import {
  profilesStoreContext
} from "./chunk-Z4I2FY2W.js";
import "./chunk-IGAVQDRX.js";
import "./chunk-HKTNVJXR.js";
import "./chunk-QK5UQRR6.js";
import "./chunk-PDNTOHOW.js";
import "./chunk-TCQZMY3T.js";

// node_modules/@holochain-open-dev/profiles/dist/profiles-client.js
var ProfilesClient = class extends ZomeClient {
  constructor(client, roleName, zomeName = "profiles") {
    super(client, roleName, zomeName);
    this.client = client;
    this.roleName = roleName;
    this.zomeName = zomeName;
  }
  /**
   * Get the profile for the given agent, if they have created it
   *
   * @param agentPubKey the agent to get the profile for
   * @returns the profile of the agent, if they have created one
   */
  async getAgentProfile(agentPubKey) {
    const record = await this.callZome("get_agent_profile", agentPubKey);
    return record ? decodeEntry(record) : void 0;
  }
  /**
   * Search profiles that start with nicknameFilter
   *
   * @param nicknameFilter must be of at least 3 characters
   * @returns the agents with the nickname starting with nicknameFilter
   */
  async searchAgents(nicknameFilter) {
    return this.callZome("search_agents", nicknameFilter);
  }
  /**
   * Get all the agents in the DHT that have created a profile
   *
   * @returns the agent public keys of all agents that have created a profile
   */
  async getAgentsWithProfile() {
    return this.callZome("get_agents_with_profile", null);
  }
  /**
   * Create my profile
   *
   * @param profile the profile to create
   */
  async createProfile(profile) {
    return this.callZome("create_profile", profile);
  }
  /**
   * Update my profile
   *
   * @param profile the profile to create
   */
  async updateProfile(profile) {
    return this.callZome("update_profile", profile);
  }
};

// node_modules/@holochain-open-dev/profiles/dist/config.js
var defaultConfig = {
  avatarMode: "avatar-optional",
  additionalFields: [],
  minNicknameLength: 3
};

// node_modules/@holochain-open-dev/profiles/dist/profiles-store.js
var ProfilesStore = class {
  constructor(client, config = {}) {
    this.client = client;
    this.agentsWithProfile = lazyLoadAndPoll(() => this.client.getAgentsWithProfile(), 1e3);
    this.allProfiles = asyncDeriveStore(this.agentsWithProfile, (agents) => this.agentsProfiles(agents));
    this.profiles = new LazyHoloHashMap((agent) => asyncReadable(async (set) => {
      const profile = await this.client.getAgentProfile(agent);
      set(profile);
      return this.client.onSignal((signal) => {
        if (this.client.client.myPubKey.toString() !== agent.toString())
          return;
        if (!(signal.type === "EntryCreated" || signal.type === "EntryUpdated"))
          return;
        set(signal.app_entry);
      });
    }));
    this.myProfile = manualReloadStore(async () => this.client.getAgentProfile(this.client.client.myPubKey));
    this.config = { ...defaultConfig, ...config };
  }
  // Fetches the profiles for the given agents
  agentsProfiles(agents) {
    return joinAsyncMap(slice(this.profiles, agents));
  }
  searchProfiles(searchFilter) {
    return asyncDeriveStore(lazyLoad(async () => this.client.searchAgents(searchFilter)), (agents) => this.agentsProfiles(agents));
  }
};
export {
  ProfilesClient,
  ProfilesStore,
  defaultConfig,
  profilesStoreContext
};
//# sourceMappingURL=@holochain-open-dev_profiles.js.map
