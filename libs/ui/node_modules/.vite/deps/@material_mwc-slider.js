import {
  FormElement
} from "./chunk-BJ2UCMSJ.js";
import {
  RippleHandlers
} from "./chunk-MZAI3YEV.js";
import {
  ariaProperty
} from "./chunk-EGZDDV6L.js";
import "./chunk-QBLXO4ZU.js";
import {
  styleMap
} from "./chunk-WQJA2ZTO.js";
import {
  ifDefined
} from "./chunk-3UHMJHWB.js";
import {
  MDCFoundation,
  deepActiveElementPath
} from "./chunk-K2GWU6W5.js";
import {
  classMap
} from "./chunk-XHTW3CQQ.js";
import {
  customElement,
  property,
  query,
  queryAsync,
  state
} from "./chunk-LLKFEKJC.js";
import {
  html,
  nothing
} from "./chunk-KJJ2SZCS.js";
import "./chunk-HKTNVJXR.js";
import {
  css
} from "./chunk-QK5UQRR6.js";
import "./chunk-TCQZMY3T.js";

// ../node_modules/@material/mwc-slider/node_modules/tslib/tslib.es6.js
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

// ../node_modules/@material/mwc-slider/mwc-slider.css.js
var styles = css`.mdc-slider{cursor:pointer;height:48px;margin:0 24px;position:relative;touch-action:pan-y}.mdc-slider .mdc-slider__track{height:4px;position:absolute;top:50%;transform:translateY(-50%);width:100%}.mdc-slider .mdc-slider__track--active,.mdc-slider .mdc-slider__track--inactive{display:flex;height:100%;position:absolute;width:100%}.mdc-slider .mdc-slider__track--active{border-radius:3px;height:6px;overflow:hidden;top:-1px}.mdc-slider .mdc-slider__track--active_fill{border-top:6px solid;box-sizing:border-box;height:100%;width:100%;position:relative;-webkit-transform-origin:left;transform-origin:left}[dir=rtl] .mdc-slider .mdc-slider__track--active_fill,.mdc-slider .mdc-slider__track--active_fill[dir=rtl]{-webkit-transform-origin:right;transform-origin:right}.mdc-slider .mdc-slider__track--inactive{border-radius:2px;height:4px;left:0;top:0}.mdc-slider .mdc-slider__track--inactive::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid transparent;border-radius:inherit;content:"";pointer-events:none}@media screen and (forced-colors: active){.mdc-slider .mdc-slider__track--inactive::before{border-color:CanvasText}}.mdc-slider .mdc-slider__track--active_fill{border-color:#6200ee;border-color:var(--mdc-theme-primary, #6200ee)}.mdc-slider.mdc-slider--disabled .mdc-slider__track--active_fill{border-color:#000;border-color:var(--mdc-theme-on-surface, #000)}.mdc-slider .mdc-slider__track--inactive{background-color:#6200ee;background-color:var(--mdc-theme-primary, #6200ee);opacity:.24}.mdc-slider.mdc-slider--disabled .mdc-slider__track--inactive{background-color:#000;background-color:var(--mdc-theme-on-surface, #000);opacity:.24}.mdc-slider .mdc-slider__value-indicator-container{bottom:44px;left:50%;left:var(--slider-value-indicator-container-left, 50%);pointer-events:none;position:absolute;right:var(--slider-value-indicator-container-right);transform:translateX(-50%);transform:var(--slider-value-indicator-container-transform, translateX(-50%))}.mdc-slider .mdc-slider__value-indicator{transition:transform 100ms 0ms cubic-bezier(0.4, 0, 1, 1);align-items:center;border-radius:4px;display:flex;height:32px;padding:0 12px;transform:scale(0);transform-origin:bottom}.mdc-slider .mdc-slider__value-indicator::before{border-left:6px solid transparent;border-right:6px solid transparent;border-top:6px solid;bottom:-5px;content:"";height:0;left:50%;left:var(--slider-value-indicator-caret-left, 50%);position:absolute;right:var(--slider-value-indicator-caret-right);transform:translateX(-50%);transform:var(--slider-value-indicator-caret-transform, translateX(-50%));width:0}.mdc-slider .mdc-slider__value-indicator::after{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid transparent;border-radius:inherit;content:"";pointer-events:none}@media screen and (forced-colors: active){.mdc-slider .mdc-slider__value-indicator::after{border-color:CanvasText}}.mdc-slider .mdc-slider__thumb--with-indicator .mdc-slider__value-indicator-container{pointer-events:auto}.mdc-slider .mdc-slider__thumb--with-indicator .mdc-slider__value-indicator{transition:transform 100ms 0ms cubic-bezier(0, 0, 0.2, 1);transform:scale(1)}@media(prefers-reduced-motion){.mdc-slider .mdc-slider__value-indicator,.mdc-slider .mdc-slider__thumb--with-indicator .mdc-slider__value-indicator{transition:none}}.mdc-slider .mdc-slider__value-indicator-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-subtitle2-font-size, 0.875rem);line-height:1.375rem;line-height:var(--mdc-typography-subtitle2-line-height, 1.375rem);font-weight:500;font-weight:var(--mdc-typography-subtitle2-font-weight, 500);letter-spacing:0.0071428571em;letter-spacing:var(--mdc-typography-subtitle2-letter-spacing, 0.0071428571em);text-decoration:inherit;text-decoration:var(--mdc-typography-subtitle2-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle2-text-transform, inherit)}.mdc-slider .mdc-slider__value-indicator{background-color:#000;opacity:.6}.mdc-slider .mdc-slider__value-indicator::before{border-top-color:#000}.mdc-slider .mdc-slider__value-indicator{color:#fff;color:var(--mdc-theme-on-primary, #fff)}.mdc-slider .mdc-slider__thumb{display:flex;height:48px;left:-24px;outline:none;position:absolute;user-select:none;width:48px}.mdc-slider .mdc-slider__thumb--top{z-index:1}.mdc-slider .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-style:solid;border-width:1px;box-sizing:content-box}.mdc-slider .mdc-slider__thumb-knob{box-shadow:0px 2px 1px -1px rgba(0, 0, 0, 0.2),0px 1px 1px 0px rgba(0, 0, 0, 0.14),0px 1px 3px 0px rgba(0,0,0,.12);border:10px solid;border-radius:50%;box-sizing:border-box;height:20px;left:50%;position:absolute;top:50%;transform:translate(-50%, -50%);width:20px}.mdc-slider .mdc-slider__thumb-knob{background-color:#6200ee;background-color:var(--mdc-theme-primary, #6200ee);border-color:#6200ee;border-color:var(--mdc-theme-primary, #6200ee)}.mdc-slider .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mdc-slider .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mdc-slider.mdc-slider--disabled .mdc-slider__thumb-knob{background-color:#000;background-color:var(--mdc-theme-on-surface, #000);border-color:#000;border-color:var(--mdc-theme-on-surface, #000)}.mdc-slider.mdc-slider--disabled .mdc-slider__thumb--top .mdc-slider__thumb-knob,.mdc-slider.mdc-slider--disabled .mdc-slider__thumb--top.mdc-slider__thumb:hover .mdc-slider__thumb-knob,.mdc-slider.mdc-slider--disabled .mdc-slider__thumb--top.mdc-slider__thumb--focused .mdc-slider__thumb-knob{border-color:#fff}.mdc-slider .mdc-slider__thumb::before,.mdc-slider .mdc-slider__thumb::after{background-color:#6200ee;background-color:var(--mdc-ripple-color, var(--mdc-theme-primary, #6200ee))}.mdc-slider .mdc-slider__thumb:hover::before,.mdc-slider .mdc-slider__thumb.mdc-ripple-surface--hover::before{opacity:0.04;opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mdc-slider .mdc-slider__thumb.mdc-ripple-upgraded--background-focused::before,.mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded):focus::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded)::after{transition:opacity 150ms linear}.mdc-slider .mdc-slider__thumb:not(.mdc-ripple-upgraded):active::after{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-slider .mdc-slider__thumb.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-slider .mdc-slider__tick-marks{align-items:center;box-sizing:border-box;display:flex;height:100%;justify-content:space-between;padding:0 1px;position:absolute;width:100%}.mdc-slider .mdc-slider__tick-mark--active,.mdc-slider .mdc-slider__tick-mark--inactive{border-radius:50%;height:2px;width:2px}.mdc-slider .mdc-slider__tick-mark--active{background-color:#fff;background-color:var(--mdc-theme-on-primary, #fff);opacity:.6}.mdc-slider.mdc-slider--disabled .mdc-slider__tick-mark--active{background-color:#fff;background-color:var(--mdc-theme-on-primary, #fff);opacity:.6}.mdc-slider .mdc-slider__tick-mark--inactive{background-color:#6200ee;background-color:var(--mdc-theme-primary, #6200ee);opacity:.6}.mdc-slider.mdc-slider--disabled .mdc-slider__tick-mark--inactive{background-color:#000;background-color:var(--mdc-theme-on-surface, #000);opacity:.6}.mdc-slider--discrete .mdc-slider__thumb,.mdc-slider--discrete .mdc-slider__track--active_fill{transition:transform 80ms ease}@media(prefers-reduced-motion){.mdc-slider--discrete .mdc-slider__thumb,.mdc-slider--discrete .mdc-slider__track--active_fill{transition:none}}.mdc-slider--disabled{opacity:.38;cursor:auto}.mdc-slider--disabled .mdc-slider__thumb{pointer-events:none}.mdc-slider__input{cursor:pointer;left:0;margin:0;height:100%;opacity:0;pointer-events:none;position:absolute;top:0;width:100%}:host{outline:none;display:block;-webkit-tap-highlight-color:transparent}.ripple{--mdc-ripple-color:#6200ee;--mdc-ripple-color:var(--mdc-theme-primary, #6200ee)}`;

// ../node_modules/@material/slider/types.js
var TickMark;
(function(TickMark2) {
  TickMark2[TickMark2["ACTIVE"] = 0] = "ACTIVE";
  TickMark2[TickMark2["INACTIVE"] = 1] = "INACTIVE";
})(TickMark || (TickMark = {}));
var Thumb;
(function(Thumb2) {
  Thumb2[Thumb2["START"] = 1] = "START";
  Thumb2[Thumb2["END"] = 2] = "END";
})(Thumb || (Thumb = {}));

// ../node_modules/@material/slider/node_modules/tslib/tslib.es6.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};

// ../node_modules/@material/animation/animationframe.js
var AnimationFrame = (
  /** @class */
  function() {
    function AnimationFrame2() {
      this.rafIDs = /* @__PURE__ */ new Map();
    }
    AnimationFrame2.prototype.request = function(key, callback) {
      var _this = this;
      this.cancel(key);
      var frameID = requestAnimationFrame(function(frame) {
        _this.rafIDs.delete(key);
        callback(frame);
      });
      this.rafIDs.set(key, frameID);
    };
    AnimationFrame2.prototype.cancel = function(key) {
      var rafID = this.rafIDs.get(key);
      if (rafID) {
        cancelAnimationFrame(rafID);
        this.rafIDs.delete(key);
      }
    };
    AnimationFrame2.prototype.cancelAll = function() {
      var _this = this;
      this.rafIDs.forEach(function(_, key) {
        _this.cancel(key);
      });
    };
    AnimationFrame2.prototype.getQueue = function() {
      var queue = [];
      this.rafIDs.forEach(function(_, key) {
        queue.push(key);
      });
      return queue;
    };
    return AnimationFrame2;
  }()
);

// ../node_modules/@material/animation/util.js
var cssPropertyNameMap = {
  animation: {
    prefixed: "-webkit-animation",
    standard: "animation"
  },
  transform: {
    prefixed: "-webkit-transform",
    standard: "transform"
  },
  transition: {
    prefixed: "-webkit-transition",
    standard: "transition"
  }
};
function isWindow(windowObj) {
  return Boolean(windowObj.document) && typeof windowObj.document.createElement === "function";
}
function getCorrectPropertyName(windowObj, cssProperty) {
  if (isWindow(windowObj) && cssProperty in cssPropertyNameMap) {
    var el = windowObj.document.createElement("div");
    var _a = cssPropertyNameMap[cssProperty], standard = _a.standard, prefixed = _a.prefixed;
    var isStandard = standard in el.style;
    return isStandard ? standard : prefixed;
  }
  return cssProperty;
}

// ../node_modules/@material/slider/constants.js
var cssClasses = {
  DISABLED: "mdc-slider--disabled",
  DISCRETE: "mdc-slider--discrete",
  INPUT: "mdc-slider__input",
  RANGE: "mdc-slider--range",
  THUMB: "mdc-slider__thumb",
  // Applied when thumb is in the focused state.
  THUMB_FOCUSED: "mdc-slider__thumb--focused",
  THUMB_KNOB: "mdc-slider__thumb-knob",
  // Class added to the top thumb (for overlapping thumbs in range slider).
  THUMB_TOP: "mdc-slider__thumb--top",
  THUMB_WITH_INDICATOR: "mdc-slider__thumb--with-indicator",
  TICK_MARKS: "mdc-slider--tick-marks",
  TICK_MARKS_CONTAINER: "mdc-slider__tick-marks",
  TICK_MARK_ACTIVE: "mdc-slider__tick-mark--active",
  TICK_MARK_INACTIVE: "mdc-slider__tick-mark--inactive",
  TRACK: "mdc-slider__track",
  // The active track fill element that will be scaled as the value changes.
  TRACK_ACTIVE: "mdc-slider__track--active_fill",
  VALUE_INDICATOR_CONTAINER: "mdc-slider__value-indicator-container",
  VALUE_INDICATOR_TEXT: "mdc-slider__value-indicator-text"
};
var numbers = {
  // Default step size.
  STEP_SIZE: 1,
  // Default minimum difference between the start and end values.
  MIN_RANGE: 0,
  // Minimum absolute difference between clientX of move event / down event
  // for which to update thumb, in the case of overlapping thumbs.
  // This is needed to reduce chances of choosing the thumb based on
  // pointer jitter.
  THUMB_UPDATE_MIN_PX: 5
};
var attributes = {
  ARIA_VALUETEXT: "aria-valuetext",
  INPUT_DISABLED: "disabled",
  INPUT_MIN: "min",
  INPUT_MAX: "max",
  INPUT_VALUE: "value",
  INPUT_STEP: "step",
  DATA_MIN_RANGE: "data-min-range"
};
var strings = {
  VAR_VALUE_INDICATOR_CARET_LEFT: "--slider-value-indicator-caret-left",
  VAR_VALUE_INDICATOR_CARET_RIGHT: "--slider-value-indicator-caret-right",
  VAR_VALUE_INDICATOR_CARET_TRANSFORM: "--slider-value-indicator-caret-transform",
  VAR_VALUE_INDICATOR_CONTAINER_LEFT: "--slider-value-indicator-container-left",
  VAR_VALUE_INDICATOR_CONTAINER_RIGHT: "--slider-value-indicator-container-right",
  VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM: "--slider-value-indicator-container-transform"
};

// ../node_modules/@material/slider/foundation.js
var AnimationKeys;
(function(AnimationKeys2) {
  AnimationKeys2["SLIDER_UPDATE"] = "slider_update";
})(AnimationKeys || (AnimationKeys = {}));
var HAS_WINDOW = typeof window !== "undefined";
var MDCSliderFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSliderFoundation2, _super);
    function MDCSliderFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCSliderFoundation2.defaultAdapter), adapter)) || this;
      _this.initialStylesRemoved = false;
      _this.isDisabled = false;
      _this.isDiscrete = false;
      _this.step = numbers.STEP_SIZE;
      _this.minRange = numbers.MIN_RANGE;
      _this.hasTickMarks = false;
      _this.isRange = false;
      _this.thumb = null;
      _this.downEventClientX = null;
      _this.startThumbKnobWidth = 0;
      _this.endThumbKnobWidth = 0;
      _this.animFrame = new AnimationFrame();
      return _this;
    }
    Object.defineProperty(MDCSliderFoundation2, "defaultAdapter", {
      get: function() {
        return {
          hasClass: function() {
            return false;
          },
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          addThumbClass: function() {
            return void 0;
          },
          removeThumbClass: function() {
            return void 0;
          },
          getAttribute: function() {
            return null;
          },
          getInputValue: function() {
            return "";
          },
          setInputValue: function() {
            return void 0;
          },
          getInputAttribute: function() {
            return null;
          },
          setInputAttribute: function() {
            return null;
          },
          removeInputAttribute: function() {
            return null;
          },
          focusInput: function() {
            return void 0;
          },
          isInputFocused: function() {
            return false;
          },
          shouldHideFocusStylesForPointerEvents: function() {
            return false;
          },
          getThumbKnobWidth: function() {
            return 0;
          },
          getValueIndicatorContainerWidth: function() {
            return 0;
          },
          getThumbBoundingClientRect: function() {
            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
          },
          getBoundingClientRect: function() {
            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
          },
          isRTL: function() {
            return false;
          },
          setThumbStyleProperty: function() {
            return void 0;
          },
          removeThumbStyleProperty: function() {
            return void 0;
          },
          setTrackActiveStyleProperty: function() {
            return void 0;
          },
          removeTrackActiveStyleProperty: function() {
            return void 0;
          },
          setValueIndicatorText: function() {
            return void 0;
          },
          getValueToAriaValueTextFn: function() {
            return null;
          },
          updateTickMarks: function() {
            return void 0;
          },
          setPointerCapture: function() {
            return void 0;
          },
          emitChangeEvent: function() {
            return void 0;
          },
          emitInputEvent: function() {
            return void 0;
          },
          emitDragStartEvent: function() {
            return void 0;
          },
          emitDragEndEvent: function() {
            return void 0;
          },
          registerEventHandler: function() {
            return void 0;
          },
          deregisterEventHandler: function() {
            return void 0;
          },
          registerThumbEventHandler: function() {
            return void 0;
          },
          deregisterThumbEventHandler: function() {
            return void 0;
          },
          registerInputEventHandler: function() {
            return void 0;
          },
          deregisterInputEventHandler: function() {
            return void 0;
          },
          registerBodyEventHandler: function() {
            return void 0;
          },
          deregisterBodyEventHandler: function() {
            return void 0;
          },
          registerWindowEventHandler: function() {
            return void 0;
          },
          deregisterWindowEventHandler: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCSliderFoundation2.prototype.init = function() {
      var _this = this;
      this.isDisabled = this.adapter.hasClass(cssClasses.DISABLED);
      this.isDiscrete = this.adapter.hasClass(cssClasses.DISCRETE);
      this.hasTickMarks = this.adapter.hasClass(cssClasses.TICK_MARKS);
      this.isRange = this.adapter.hasClass(cssClasses.RANGE);
      var min = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes.INPUT_MIN, this.isRange ? Thumb.START : Thumb.END), attributes.INPUT_MIN);
      var max = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes.INPUT_MAX, Thumb.END), attributes.INPUT_MAX);
      var value = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes.INPUT_VALUE, Thumb.END), attributes.INPUT_VALUE);
      var valueStart = this.isRange ? this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes.INPUT_VALUE, Thumb.START), attributes.INPUT_VALUE) : min;
      var stepAttr = this.adapter.getInputAttribute(attributes.INPUT_STEP, Thumb.END);
      var step = stepAttr ? this.convertAttributeValueToNumber(stepAttr, attributes.INPUT_STEP) : this.step;
      var minRangeAttr = this.adapter.getAttribute(attributes.DATA_MIN_RANGE);
      var minRange = minRangeAttr ? this.convertAttributeValueToNumber(minRangeAttr, attributes.DATA_MIN_RANGE) : this.minRange;
      this.validateProperties({ min, max, value, valueStart, step, minRange });
      this.min = min;
      this.max = max;
      this.value = value;
      this.valueStart = valueStart;
      this.step = step;
      this.minRange = minRange;
      this.numDecimalPlaces = getNumDecimalPlaces(this.step);
      this.valueBeforeDownEvent = value;
      this.valueStartBeforeDownEvent = valueStart;
      this.mousedownOrTouchstartListener = this.handleMousedownOrTouchstart.bind(this);
      this.moveListener = this.handleMove.bind(this);
      this.pointerdownListener = this.handlePointerdown.bind(this);
      this.pointerupListener = this.handlePointerup.bind(this);
      this.thumbMouseenterListener = this.handleThumbMouseenter.bind(this);
      this.thumbMouseleaveListener = this.handleThumbMouseleave.bind(this);
      this.inputStartChangeListener = function() {
        _this.handleInputChange(Thumb.START);
      };
      this.inputEndChangeListener = function() {
        _this.handleInputChange(Thumb.END);
      };
      this.inputStartFocusListener = function() {
        _this.handleInputFocus(Thumb.START);
      };
      this.inputEndFocusListener = function() {
        _this.handleInputFocus(Thumb.END);
      };
      this.inputStartBlurListener = function() {
        _this.handleInputBlur(Thumb.START);
      };
      this.inputEndBlurListener = function() {
        _this.handleInputBlur(Thumb.END);
      };
      this.resizeListener = this.handleResize.bind(this);
      this.registerEventHandlers();
    };
    MDCSliderFoundation2.prototype.destroy = function() {
      this.deregisterEventHandlers();
    };
    MDCSliderFoundation2.prototype.setMin = function(value) {
      this.min = value;
      if (!this.isRange) {
        this.valueStart = value;
      }
      this.updateUI();
    };
    MDCSliderFoundation2.prototype.setMax = function(value) {
      this.max = value;
      this.updateUI();
    };
    MDCSliderFoundation2.prototype.getMin = function() {
      return this.min;
    };
    MDCSliderFoundation2.prototype.getMax = function() {
      return this.max;
    };
    MDCSliderFoundation2.prototype.getValue = function() {
      return this.value;
    };
    MDCSliderFoundation2.prototype.setValue = function(value) {
      if (this.isRange && value < this.valueStart + this.minRange) {
        throw new Error("end thumb value (" + value + ") must be >= start thumb " + ("value (" + this.valueStart + ") + min range (" + this.minRange + ")"));
      }
      this.updateValue(value, Thumb.END);
    };
    MDCSliderFoundation2.prototype.getValueStart = function() {
      if (!this.isRange) {
        throw new Error("`valueStart` is only applicable for range sliders.");
      }
      return this.valueStart;
    };
    MDCSliderFoundation2.prototype.setValueStart = function(valueStart) {
      if (!this.isRange) {
        throw new Error("`valueStart` is only applicable for range sliders.");
      }
      if (this.isRange && valueStart > this.value - this.minRange) {
        throw new Error("start thumb value (" + valueStart + ") must be <= end thumb " + ("value (" + this.value + ") - min range (" + this.minRange + ")"));
      }
      this.updateValue(valueStart, Thumb.START);
    };
    MDCSliderFoundation2.prototype.setStep = function(value) {
      this.step = value;
      this.numDecimalPlaces = getNumDecimalPlaces(value);
      this.updateUI();
    };
    MDCSliderFoundation2.prototype.setMinRange = function(value) {
      if (!this.isRange) {
        throw new Error("`minRange` is only applicable for range sliders.");
      }
      if (value < 0) {
        throw new Error("`minRange` must be non-negative. " + ("Current value: " + value));
      }
      if (this.value - this.valueStart < value) {
        throw new Error("start thumb value (" + this.valueStart + ") and end thumb value " + ("(" + this.value + ") must differ by at least " + value + "."));
      }
      this.minRange = value;
    };
    MDCSliderFoundation2.prototype.setIsDiscrete = function(value) {
      this.isDiscrete = value;
      this.updateValueIndicatorUI();
      this.updateTickMarksUI();
    };
    MDCSliderFoundation2.prototype.getStep = function() {
      return this.step;
    };
    MDCSliderFoundation2.prototype.getMinRange = function() {
      if (!this.isRange) {
        throw new Error("`minRange` is only applicable for range sliders.");
      }
      return this.minRange;
    };
    MDCSliderFoundation2.prototype.setHasTickMarks = function(value) {
      this.hasTickMarks = value;
      this.updateTickMarksUI();
    };
    MDCSliderFoundation2.prototype.getDisabled = function() {
      return this.isDisabled;
    };
    MDCSliderFoundation2.prototype.setDisabled = function(disabled) {
      this.isDisabled = disabled;
      if (disabled) {
        this.adapter.addClass(cssClasses.DISABLED);
        if (this.isRange) {
          this.adapter.setInputAttribute(attributes.INPUT_DISABLED, "", Thumb.START);
        }
        this.adapter.setInputAttribute(attributes.INPUT_DISABLED, "", Thumb.END);
      } else {
        this.adapter.removeClass(cssClasses.DISABLED);
        if (this.isRange) {
          this.adapter.removeInputAttribute(attributes.INPUT_DISABLED, Thumb.START);
        }
        this.adapter.removeInputAttribute(attributes.INPUT_DISABLED, Thumb.END);
      }
    };
    MDCSliderFoundation2.prototype.getIsRange = function() {
      return this.isRange;
    };
    MDCSliderFoundation2.prototype.layout = function(_a) {
      var _b = _a === void 0 ? {} : _a, skipUpdateUI = _b.skipUpdateUI;
      this.rect = this.adapter.getBoundingClientRect();
      if (this.isRange) {
        this.startThumbKnobWidth = this.adapter.getThumbKnobWidth(Thumb.START);
        this.endThumbKnobWidth = this.adapter.getThumbKnobWidth(Thumb.END);
      }
      if (!skipUpdateUI) {
        this.updateUI();
      }
    };
    MDCSliderFoundation2.prototype.handleResize = function() {
      this.layout();
    };
    MDCSliderFoundation2.prototype.handleDown = function(event) {
      if (this.isDisabled)
        return;
      this.valueStartBeforeDownEvent = this.valueStart;
      this.valueBeforeDownEvent = this.value;
      var clientX = event.clientX != null ? event.clientX : event.targetTouches[0].clientX;
      this.downEventClientX = clientX;
      var value = this.mapClientXOnSliderScale(clientX);
      this.thumb = this.getThumbFromDownEvent(clientX, value);
      if (this.thumb === null)
        return;
      this.handleDragStart(event, value, this.thumb);
      this.updateValue(value, this.thumb, { emitInputEvent: true });
    };
    MDCSliderFoundation2.prototype.handleMove = function(event) {
      if (this.isDisabled)
        return;
      event.preventDefault();
      var clientX = event.clientX != null ? event.clientX : event.targetTouches[0].clientX;
      var dragAlreadyStarted = this.thumb != null;
      this.thumb = this.getThumbFromMoveEvent(clientX);
      if (this.thumb === null)
        return;
      var value = this.mapClientXOnSliderScale(clientX);
      if (!dragAlreadyStarted) {
        this.handleDragStart(event, value, this.thumb);
        this.adapter.emitDragStartEvent(value, this.thumb);
      }
      this.updateValue(value, this.thumb, { emitInputEvent: true });
    };
    MDCSliderFoundation2.prototype.handleUp = function() {
      var _a, _b;
      if (this.isDisabled || this.thumb === null)
        return;
      if ((_b = (_a = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b === void 0 ? void 0 : _b.call(_a)) {
        this.handleInputBlur(this.thumb);
      }
      var oldValue = this.thumb === Thumb.START ? this.valueStartBeforeDownEvent : this.valueBeforeDownEvent;
      var newValue = this.thumb === Thumb.START ? this.valueStart : this.value;
      if (oldValue !== newValue) {
        this.adapter.emitChangeEvent(newValue, this.thumb);
      }
      this.adapter.emitDragEndEvent(newValue, this.thumb);
      this.thumb = null;
    };
    MDCSliderFoundation2.prototype.handleThumbMouseenter = function() {
      if (!this.isDiscrete || !this.isRange)
        return;
      this.adapter.addThumbClass(cssClasses.THUMB_WITH_INDICATOR, Thumb.START);
      this.adapter.addThumbClass(cssClasses.THUMB_WITH_INDICATOR, Thumb.END);
    };
    MDCSliderFoundation2.prototype.handleThumbMouseleave = function() {
      var _a, _b;
      if (!this.isDiscrete || !this.isRange)
        return;
      if (!((_b = (_a = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b === void 0 ? void 0 : _b.call(_a)) && (this.adapter.isInputFocused(Thumb.START) || this.adapter.isInputFocused(Thumb.END)) || this.thumb) {
        return;
      }
      this.adapter.removeThumbClass(cssClasses.THUMB_WITH_INDICATOR, Thumb.START);
      this.adapter.removeThumbClass(cssClasses.THUMB_WITH_INDICATOR, Thumb.END);
    };
    MDCSliderFoundation2.prototype.handleMousedownOrTouchstart = function(event) {
      var _this = this;
      var moveEventType = event.type === "mousedown" ? "mousemove" : "touchmove";
      this.adapter.registerBodyEventHandler(moveEventType, this.moveListener);
      var upHandler = function() {
        _this.handleUp();
        _this.adapter.deregisterBodyEventHandler(moveEventType, _this.moveListener);
        _this.adapter.deregisterEventHandler("mouseup", upHandler);
        _this.adapter.deregisterEventHandler("touchend", upHandler);
      };
      this.adapter.registerBodyEventHandler("mouseup", upHandler);
      this.adapter.registerBodyEventHandler("touchend", upHandler);
      this.handleDown(event);
    };
    MDCSliderFoundation2.prototype.handlePointerdown = function(event) {
      var isPrimaryButton = event.button === 0;
      if (!isPrimaryButton)
        return;
      if (event.pointerId != null) {
        this.adapter.setPointerCapture(event.pointerId);
      }
      this.adapter.registerEventHandler("pointermove", this.moveListener);
      this.handleDown(event);
    };
    MDCSliderFoundation2.prototype.handleInputChange = function(thumb) {
      var value = Number(this.adapter.getInputValue(thumb));
      if (thumb === Thumb.START) {
        this.setValueStart(value);
      } else {
        this.setValue(value);
      }
      this.adapter.emitChangeEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
      this.adapter.emitInputEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
    };
    MDCSliderFoundation2.prototype.handleInputFocus = function(thumb) {
      this.adapter.addThumbClass(cssClasses.THUMB_FOCUSED, thumb);
      if (!this.isDiscrete)
        return;
      this.adapter.addThumbClass(cssClasses.THUMB_WITH_INDICATOR, thumb);
      if (this.isRange) {
        var otherThumb = thumb === Thumb.START ? Thumb.END : Thumb.START;
        this.adapter.addThumbClass(cssClasses.THUMB_WITH_INDICATOR, otherThumb);
      }
    };
    MDCSliderFoundation2.prototype.handleInputBlur = function(thumb) {
      this.adapter.removeThumbClass(cssClasses.THUMB_FOCUSED, thumb);
      if (!this.isDiscrete)
        return;
      this.adapter.removeThumbClass(cssClasses.THUMB_WITH_INDICATOR, thumb);
      if (this.isRange) {
        var otherThumb = thumb === Thumb.START ? Thumb.END : Thumb.START;
        this.adapter.removeThumbClass(cssClasses.THUMB_WITH_INDICATOR, otherThumb);
      }
    };
    MDCSliderFoundation2.prototype.handleDragStart = function(event, value, thumb) {
      var _a, _b;
      this.adapter.emitDragStartEvent(value, thumb);
      this.adapter.focusInput(thumb);
      if ((_b = (_a = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b === void 0 ? void 0 : _b.call(_a)) {
        this.handleInputFocus(thumb);
      }
      event.preventDefault();
    };
    MDCSliderFoundation2.prototype.getThumbFromDownEvent = function(clientX, value) {
      if (!this.isRange)
        return Thumb.END;
      var thumbStartRect = this.adapter.getThumbBoundingClientRect(Thumb.START);
      var thumbEndRect = this.adapter.getThumbBoundingClientRect(Thumb.END);
      var inThumbStartBounds = clientX >= thumbStartRect.left && clientX <= thumbStartRect.right;
      var inThumbEndBounds = clientX >= thumbEndRect.left && clientX <= thumbEndRect.right;
      if (inThumbStartBounds && inThumbEndBounds) {
        return null;
      }
      if (inThumbStartBounds) {
        return Thumb.START;
      }
      if (inThumbEndBounds) {
        return Thumb.END;
      }
      if (value < this.valueStart) {
        return Thumb.START;
      }
      if (value > this.value) {
        return Thumb.END;
      }
      return value - this.valueStart <= this.value - value ? Thumb.START : Thumb.END;
    };
    MDCSliderFoundation2.prototype.getThumbFromMoveEvent = function(clientX) {
      if (this.thumb !== null)
        return this.thumb;
      if (this.downEventClientX === null) {
        throw new Error("`downEventClientX` is null after move event.");
      }
      var moveDistanceUnderThreshold = Math.abs(this.downEventClientX - clientX) < numbers.THUMB_UPDATE_MIN_PX;
      if (moveDistanceUnderThreshold)
        return this.thumb;
      var draggedThumbToLeft = clientX < this.downEventClientX;
      if (draggedThumbToLeft) {
        return this.adapter.isRTL() ? Thumb.END : Thumb.START;
      } else {
        return this.adapter.isRTL() ? Thumb.START : Thumb.END;
      }
    };
    MDCSliderFoundation2.prototype.updateUI = function(thumb) {
      if (thumb) {
        this.updateThumbAndInputAttributes(thumb);
      } else {
        this.updateThumbAndInputAttributes(Thumb.START);
        this.updateThumbAndInputAttributes(Thumb.END);
      }
      this.updateThumbAndTrackUI(thumb);
      this.updateValueIndicatorUI(thumb);
      this.updateTickMarksUI();
    };
    MDCSliderFoundation2.prototype.updateThumbAndInputAttributes = function(thumb) {
      if (!thumb)
        return;
      var value = this.isRange && thumb === Thumb.START ? this.valueStart : this.value;
      var valueStr = String(value);
      this.adapter.setInputAttribute(attributes.INPUT_VALUE, valueStr, thumb);
      if (this.isRange && thumb === Thumb.START) {
        this.adapter.setInputAttribute(attributes.INPUT_MIN, String(value + this.minRange), Thumb.END);
      } else if (this.isRange && thumb === Thumb.END) {
        this.adapter.setInputAttribute(attributes.INPUT_MAX, String(value - this.minRange), Thumb.START);
      }
      if (this.adapter.getInputValue(thumb) !== valueStr) {
        this.adapter.setInputValue(valueStr, thumb);
      }
      var valueToAriaValueTextFn = this.adapter.getValueToAriaValueTextFn();
      if (valueToAriaValueTextFn) {
        this.adapter.setInputAttribute(attributes.ARIA_VALUETEXT, valueToAriaValueTextFn(value, thumb), thumb);
      }
    };
    MDCSliderFoundation2.prototype.updateValueIndicatorUI = function(thumb) {
      if (!this.isDiscrete)
        return;
      var value = this.isRange && thumb === Thumb.START ? this.valueStart : this.value;
      this.adapter.setValueIndicatorText(value, thumb === Thumb.START ? Thumb.START : Thumb.END);
      if (!thumb && this.isRange) {
        this.adapter.setValueIndicatorText(this.valueStart, Thumb.START);
      }
    };
    MDCSliderFoundation2.prototype.updateTickMarksUI = function() {
      if (!this.isDiscrete || !this.hasTickMarks)
        return;
      var numTickMarksInactiveStart = (this.valueStart - this.min) / this.step;
      var numTickMarksActive = (this.value - this.valueStart) / this.step + 1;
      var numTickMarksInactiveEnd = (this.max - this.value) / this.step;
      var tickMarksInactiveStart = Array.from({ length: numTickMarksInactiveStart }).fill(TickMark.INACTIVE);
      var tickMarksActive = Array.from({ length: numTickMarksActive }).fill(TickMark.ACTIVE);
      var tickMarksInactiveEnd = Array.from({ length: numTickMarksInactiveEnd }).fill(TickMark.INACTIVE);
      this.adapter.updateTickMarks(tickMarksInactiveStart.concat(tickMarksActive).concat(tickMarksInactiveEnd));
    };
    MDCSliderFoundation2.prototype.mapClientXOnSliderScale = function(clientX) {
      var xPos = clientX - this.rect.left;
      var pctComplete = xPos / this.rect.width;
      if (this.adapter.isRTL()) {
        pctComplete = 1 - pctComplete;
      }
      var value = this.min + pctComplete * (this.max - this.min);
      if (value === this.max || value === this.min) {
        return value;
      }
      return Number(this.quantize(value).toFixed(this.numDecimalPlaces));
    };
    MDCSliderFoundation2.prototype.quantize = function(value) {
      var numSteps = Math.round((value - this.min) / this.step);
      return this.min + numSteps * this.step;
    };
    MDCSliderFoundation2.prototype.updateValue = function(value, thumb, _a) {
      var _b = _a === void 0 ? {} : _a, emitInputEvent = _b.emitInputEvent;
      value = this.clampValue(value, thumb);
      if (this.isRange && thumb === Thumb.START) {
        if (this.valueStart === value)
          return;
        this.valueStart = value;
      } else {
        if (this.value === value)
          return;
        this.value = value;
      }
      this.updateUI(thumb);
      if (emitInputEvent) {
        this.adapter.emitInputEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
      }
    };
    MDCSliderFoundation2.prototype.clampValue = function(value, thumb) {
      value = Math.min(Math.max(value, this.min), this.max);
      var thumbStartMovedPastThumbEnd = this.isRange && thumb === Thumb.START && value > this.value - this.minRange;
      if (thumbStartMovedPastThumbEnd) {
        return this.value - this.minRange;
      }
      var thumbEndMovedPastThumbStart = this.isRange && thumb === Thumb.END && value < this.valueStart + this.minRange;
      if (thumbEndMovedPastThumbStart) {
        return this.valueStart + this.minRange;
      }
      return value;
    };
    MDCSliderFoundation2.prototype.updateThumbAndTrackUI = function(thumb) {
      var _this = this;
      var _a = this, max = _a.max, min = _a.min;
      var pctComplete = (this.value - this.valueStart) / (max - min);
      var rangePx = pctComplete * this.rect.width;
      var isRtl = this.adapter.isRTL();
      var transformProp = HAS_WINDOW ? getCorrectPropertyName(window, "transform") : "transform";
      if (this.isRange) {
        var thumbLeftPos_1 = this.adapter.isRTL() ? (max - this.value) / (max - min) * this.rect.width : (this.valueStart - min) / (max - min) * this.rect.width;
        var thumbRightPos_1 = thumbLeftPos_1 + rangePx;
        this.animFrame.request(AnimationKeys.SLIDER_UPDATE, function() {
          var trackAnimatesFromRight = !isRtl && thumb === Thumb.START || isRtl && thumb !== Thumb.START;
          if (trackAnimatesFromRight) {
            _this.adapter.setTrackActiveStyleProperty("transform-origin", "right");
            _this.adapter.setTrackActiveStyleProperty("left", "auto");
            _this.adapter.setTrackActiveStyleProperty("right", _this.rect.width - thumbRightPos_1 + "px");
          } else {
            _this.adapter.setTrackActiveStyleProperty("transform-origin", "left");
            _this.adapter.setTrackActiveStyleProperty("right", "auto");
            _this.adapter.setTrackActiveStyleProperty("left", thumbLeftPos_1 + "px");
          }
          _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
          var thumbStartPos = isRtl ? thumbRightPos_1 : thumbLeftPos_1;
          var thumbEndPos = _this.adapter.isRTL() ? thumbLeftPos_1 : thumbRightPos_1;
          if (thumb === Thumb.START || !thumb || !_this.initialStylesRemoved) {
            _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", Thumb.START);
            _this.alignValueIndicator(Thumb.START, thumbStartPos);
          }
          if (thumb === Thumb.END || !thumb || !_this.initialStylesRemoved) {
            _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbEndPos + "px)", Thumb.END);
            _this.alignValueIndicator(Thumb.END, thumbEndPos);
          }
          _this.removeInitialStyles(isRtl);
          _this.updateOverlappingThumbsUI(thumbStartPos, thumbEndPos, thumb);
        });
      } else {
        this.animFrame.request(AnimationKeys.SLIDER_UPDATE, function() {
          var thumbStartPos = isRtl ? _this.rect.width - rangePx : rangePx;
          _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", Thumb.END);
          _this.alignValueIndicator(Thumb.END, thumbStartPos);
          _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
          _this.removeInitialStyles(isRtl);
        });
      }
    };
    MDCSliderFoundation2.prototype.alignValueIndicator = function(thumb, thumbPos) {
      if (!this.isDiscrete)
        return;
      var thumbHalfWidth = this.adapter.getThumbBoundingClientRect(thumb).width / 2;
      var containerWidth = this.adapter.getValueIndicatorContainerWidth(thumb);
      var sliderWidth = this.adapter.getBoundingClientRect().width;
      if (containerWidth / 2 > thumbPos + thumbHalfWidth) {
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CARET_LEFT, thumbHalfWidth + "px", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CARET_RIGHT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CARET_TRANSFORM, "translateX(-50%)", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CONTAINER_LEFT, "0", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, "none", thumb);
      } else if (containerWidth / 2 > sliderWidth - thumbPos + thumbHalfWidth) {
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CARET_LEFT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CARET_RIGHT, thumbHalfWidth + "px", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CARET_TRANSFORM, "translateX(50%)", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CONTAINER_LEFT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, "0", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, "none", thumb);
      } else {
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CARET_LEFT, "50%", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CARET_RIGHT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CARET_TRANSFORM, "translateX(-50%)", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CONTAINER_LEFT, "50%", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, "translateX(-50%)", thumb);
      }
    };
    MDCSliderFoundation2.prototype.removeInitialStyles = function(isRtl) {
      if (this.initialStylesRemoved)
        return;
      var position = isRtl ? "right" : "left";
      this.adapter.removeThumbStyleProperty(position, Thumb.END);
      if (this.isRange) {
        this.adapter.removeThumbStyleProperty(position, Thumb.START);
      }
      this.initialStylesRemoved = true;
      this.resetTrackAndThumbAnimation();
    };
    MDCSliderFoundation2.prototype.resetTrackAndThumbAnimation = function() {
      var _this = this;
      if (!this.isDiscrete)
        return;
      var transitionProp = HAS_WINDOW ? getCorrectPropertyName(window, "transition") : "transition";
      var transitionDefault = "none 0s ease 0s";
      this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, Thumb.END);
      if (this.isRange) {
        this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, Thumb.START);
      }
      this.adapter.setTrackActiveStyleProperty(transitionProp, transitionDefault);
      requestAnimationFrame(function() {
        _this.adapter.removeThumbStyleProperty(transitionProp, Thumb.END);
        _this.adapter.removeTrackActiveStyleProperty(transitionProp);
        if (_this.isRange) {
          _this.adapter.removeThumbStyleProperty(transitionProp, Thumb.START);
        }
      });
    };
    MDCSliderFoundation2.prototype.updateOverlappingThumbsUI = function(thumbStartPos, thumbEndPos, thumb) {
      var thumbsOverlap = false;
      if (this.adapter.isRTL()) {
        var startThumbLeftEdge = thumbStartPos - this.startThumbKnobWidth / 2;
        var endThumbRightEdge = thumbEndPos + this.endThumbKnobWidth / 2;
        thumbsOverlap = endThumbRightEdge >= startThumbLeftEdge;
      } else {
        var startThumbRightEdge = thumbStartPos + this.startThumbKnobWidth / 2;
        var endThumbLeftEdge = thumbEndPos - this.endThumbKnobWidth / 2;
        thumbsOverlap = startThumbRightEdge >= endThumbLeftEdge;
      }
      if (thumbsOverlap) {
        this.adapter.addThumbClass(
          cssClasses.THUMB_TOP,
          // If no thumb was dragged (in the case of initial layout), end
          // thumb is on top by default.
          thumb || Thumb.END
        );
        this.adapter.removeThumbClass(cssClasses.THUMB_TOP, thumb === Thumb.START ? Thumb.END : Thumb.START);
      } else {
        this.adapter.removeThumbClass(cssClasses.THUMB_TOP, Thumb.START);
        this.adapter.removeThumbClass(cssClasses.THUMB_TOP, Thumb.END);
      }
    };
    MDCSliderFoundation2.prototype.convertAttributeValueToNumber = function(attributeValue, attributeName) {
      if (attributeValue === null) {
        throw new Error("MDCSliderFoundation: `" + attributeName + "` must be non-null.");
      }
      var value = Number(attributeValue);
      if (isNaN(value)) {
        throw new Error("MDCSliderFoundation: `" + attributeName + "` value is `" + attributeValue + "`, but must be a number.");
      }
      return value;
    };
    MDCSliderFoundation2.prototype.validateProperties = function(_a) {
      var min = _a.min, max = _a.max, value = _a.value, valueStart = _a.valueStart, step = _a.step, minRange = _a.minRange;
      if (min >= max) {
        throw new Error("MDCSliderFoundation: min must be strictly less than max. " + ("Current: [min: " + min + ", max: " + max + "]"));
      }
      if (step <= 0) {
        throw new Error("MDCSliderFoundation: step must be a positive number. " + ("Current step: " + step));
      }
      if (this.isRange) {
        if (value < min || value > max || valueStart < min || valueStart > max) {
          throw new Error("MDCSliderFoundation: values must be in [min, max] range. " + ("Current values: [start value: " + valueStart + ", end value: ") + (value + ", min: " + min + ", max: " + max + "]"));
        }
        if (valueStart > value) {
          throw new Error("MDCSliderFoundation: start value must be <= end value. " + ("Current values: [start value: " + valueStart + ", end value: " + value + "]"));
        }
        if (minRange < 0) {
          throw new Error("MDCSliderFoundation: minimum range must be non-negative. " + ("Current min range: " + minRange));
        }
        if (value - valueStart < minRange) {
          throw new Error("MDCSliderFoundation: start value and end value must differ by at least " + (minRange + ". Current values: [start value: " + valueStart + ", ") + ("end value: " + value + "]"));
        }
        var numStepsValueStartFromMin = (valueStart - min) / step;
        var numStepsValueFromMin = (value - min) / step;
        if (!Number.isInteger(parseFloat(numStepsValueStartFromMin.toFixed(6))) || !Number.isInteger(parseFloat(numStepsValueFromMin.toFixed(6)))) {
          throw new Error("MDCSliderFoundation: Slider values must be valid based on the " + ("step value (" + step + "). Current values: [start value: ") + (valueStart + ", end value: " + value + ", min: " + min + "]"));
        }
      } else {
        if (value < min || value > max) {
          throw new Error("MDCSliderFoundation: value must be in [min, max] range. " + ("Current values: [value: " + value + ", min: " + min + ", max: " + max + "]"));
        }
        var numStepsValueFromMin = (value - min) / step;
        if (!Number.isInteger(parseFloat(numStepsValueFromMin.toFixed(6)))) {
          throw new Error("MDCSliderFoundation: Slider value must be valid based on the " + ("step value (" + step + "). Current value: " + value));
        }
      }
    };
    MDCSliderFoundation2.prototype.registerEventHandlers = function() {
      this.adapter.registerWindowEventHandler("resize", this.resizeListener);
      if (MDCSliderFoundation2.SUPPORTS_POINTER_EVENTS) {
        this.adapter.registerEventHandler("pointerdown", this.pointerdownListener);
        this.adapter.registerEventHandler("pointerup", this.pointerupListener);
      } else {
        this.adapter.registerEventHandler("mousedown", this.mousedownOrTouchstartListener);
        this.adapter.registerEventHandler("touchstart", this.mousedownOrTouchstartListener);
      }
      if (this.isRange) {
        this.adapter.registerThumbEventHandler(Thumb.START, "mouseenter", this.thumbMouseenterListener);
        this.adapter.registerThumbEventHandler(Thumb.START, "mouseleave", this.thumbMouseleaveListener);
        this.adapter.registerInputEventHandler(Thumb.START, "change", this.inputStartChangeListener);
        this.adapter.registerInputEventHandler(Thumb.START, "focus", this.inputStartFocusListener);
        this.adapter.registerInputEventHandler(Thumb.START, "blur", this.inputStartBlurListener);
      }
      this.adapter.registerThumbEventHandler(Thumb.END, "mouseenter", this.thumbMouseenterListener);
      this.adapter.registerThumbEventHandler(Thumb.END, "mouseleave", this.thumbMouseleaveListener);
      this.adapter.registerInputEventHandler(Thumb.END, "change", this.inputEndChangeListener);
      this.adapter.registerInputEventHandler(Thumb.END, "focus", this.inputEndFocusListener);
      this.adapter.registerInputEventHandler(Thumb.END, "blur", this.inputEndBlurListener);
    };
    MDCSliderFoundation2.prototype.deregisterEventHandlers = function() {
      this.adapter.deregisterWindowEventHandler("resize", this.resizeListener);
      if (MDCSliderFoundation2.SUPPORTS_POINTER_EVENTS) {
        this.adapter.deregisterEventHandler("pointerdown", this.pointerdownListener);
        this.adapter.deregisterEventHandler("pointerup", this.pointerupListener);
      } else {
        this.adapter.deregisterEventHandler("mousedown", this.mousedownOrTouchstartListener);
        this.adapter.deregisterEventHandler("touchstart", this.mousedownOrTouchstartListener);
      }
      if (this.isRange) {
        this.adapter.deregisterThumbEventHandler(Thumb.START, "mouseenter", this.thumbMouseenterListener);
        this.adapter.deregisterThumbEventHandler(Thumb.START, "mouseleave", this.thumbMouseleaveListener);
        this.adapter.deregisterInputEventHandler(Thumb.START, "change", this.inputStartChangeListener);
        this.adapter.deregisterInputEventHandler(Thumb.START, "focus", this.inputStartFocusListener);
        this.adapter.deregisterInputEventHandler(Thumb.START, "blur", this.inputStartBlurListener);
      }
      this.adapter.deregisterThumbEventHandler(Thumb.END, "mouseenter", this.thumbMouseenterListener);
      this.adapter.deregisterThumbEventHandler(Thumb.END, "mouseleave", this.thumbMouseleaveListener);
      this.adapter.deregisterInputEventHandler(Thumb.END, "change", this.inputEndChangeListener);
      this.adapter.deregisterInputEventHandler(Thumb.END, "focus", this.inputEndFocusListener);
      this.adapter.deregisterInputEventHandler(Thumb.END, "blur", this.inputEndBlurListener);
    };
    MDCSliderFoundation2.prototype.handlePointerup = function() {
      this.handleUp();
      this.adapter.deregisterEventHandler("pointermove", this.moveListener);
    };
    MDCSliderFoundation2.SUPPORTS_POINTER_EVENTS = HAS_WINDOW && Boolean(window.PointerEvent) && // #setPointerCapture is buggy on iOS, so we can't use pointer events
    // until the following bug is fixed:
    // https://bugs.webkit.org/show_bug.cgi?id=220196
    !isIOS();
    return MDCSliderFoundation2;
  }(MDCFoundation)
);
function isIOS() {
  return [
    "iPad Simulator",
    "iPhone Simulator",
    "iPod Simulator",
    "iPad",
    "iPhone",
    "iPod"
  ].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
function getNumDecimalPlaces(n) {
  var match = /(?:\.(\d+))?(?:[eE]([+\-]?\d+))?$/.exec(String(n));
  if (!match)
    return 0;
  var fraction = match[1] || "";
  var exponent = match[2] || 0;
  return Math.max(
    0,
    // lower limit
    (fraction === "0" ? 0 : fraction.length) - Number(exponent)
  );
}

// ../node_modules/@material/mwc-slider/slider-base.js
var SliderBase = class extends FormElement {
  constructor() {
    super(...arguments);
    this.mdcFoundationClass = MDCSliderFoundation;
    this.disabled = false;
    this.min = 0;
    this.max = 100;
    this.valueEnd = 0;
    this.name = "";
    this.step = 1;
    this.withTickMarks = false;
    this.discrete = false;
    this.tickMarks = [];
    this.trackTransformOriginStyle = "";
    this.trackLeftStyle = "";
    this.trackRightStyle = "";
    this.trackTransitionStyle = "";
    this.endThumbWithIndicator = false;
    this.endThumbTop = false;
    this.shouldRenderEndRipple = false;
    this.endThumbTransformStyle = "";
    this.endThumbTransitionStyle = "";
    this.endThumbCssProperties = {};
    this.valueToAriaTextTransform = null;
    this.valueToValueIndicatorTransform = (value) => {
      return `${value}`;
    };
    this.boundMoveListener = null;
    this.endRippleHandlers = new RippleHandlers(() => {
      this.shouldRenderEndRipple = true;
      return this.endRipple;
    });
  }
  update(changed) {
    if (changed.has("valueEnd") && this.mdcFoundation) {
      this.mdcFoundation.setValue(this.valueEnd);
      const validVal = this.mdcFoundation.getValue();
      if (validVal !== this.valueEnd) {
        this.valueEnd = validVal;
      }
    }
    if (changed.has("discrete")) {
      if (!this.discrete) {
        this.tickMarks = [];
      }
    }
    super.update(changed);
  }
  render() {
    return this.renderRootEl(html`
      ${this.renderStartInput()}
      ${this.renderEndInput()}
      ${this.renderTrack()}
      ${this.renderTickMarks()}
      ${this.renderStartThumb()}
      ${this.renderEndThumb()}`);
  }
  renderRootEl(content) {
    const rootClasses = classMap({
      "mdc-slider--disabled": this.disabled,
      "mdc-slider--discrete": this.discrete
    });
    return html`
    <div
        class="mdc-slider ${rootClasses}"
        @pointerdown=${this.onPointerdown}
        @pointerup=${this.onPointerup}
        @contextmenu=${this.onContextmenu}>
      ${content}
    </div>`;
  }
  renderStartInput() {
    return nothing;
  }
  renderEndInput() {
    var _a;
    return html`
      <input
          class="mdc-slider__input end"
          type="range"
          step=${this.step}
          min=${this.min}
          max=${this.max}
          .value=${this.valueEnd}
          @change=${this.onEndChange}
          @focus=${this.onEndFocus}
          @blur=${this.onEndBlur}
          ?disabled=${this.disabled}
          name=${this.name}
          aria-label=${ifDefined(this.ariaLabel)}
          aria-labelledby=${ifDefined(this.ariaLabelledBy)}
          aria-describedby=${ifDefined(this.ariaDescribedBy)}
          aria-valuetext=${ifDefined((_a = this.valueToAriaTextTransform) === null || _a === void 0 ? void 0 : _a.call(this, this.valueEnd))}>
    `;
  }
  renderTrack() {
    return nothing;
  }
  renderTickMarks() {
    return !this.withTickMarks ? nothing : html`
      <div class="mdc-slider__tick-marks">
        ${this.tickMarks.map((tickMark) => {
      const isActive = tickMark === TickMark.ACTIVE;
      return html`<div class="${isActive ? "mdc-slider__tick-mark--active" : "mdc-slider__tick-mark--inactive"}"></div>`;
    })}
      </div>`;
  }
  renderStartThumb() {
    return nothing;
  }
  renderEndThumb() {
    const endThumbClasses = classMap({
      "mdc-slider__thumb--with-indicator": this.endThumbWithIndicator,
      "mdc-slider__thumb--top": this.endThumbTop
    });
    const endThumbStyles = styleMap(Object.assign({ "-webkit-transform": this.endThumbTransformStyle, "transform": this.endThumbTransformStyle, "-webkit-transition": this.endThumbTransitionStyle, "transition": this.endThumbTransitionStyle, "left": this.endThumbTransformStyle ? "" : getComputedStyle(this).direction === "rtl" ? "" : `calc(${(this.valueEnd - this.min) / (this.max - this.min) * 100}% - 24px)`, "right": this.endThumbTransformStyle ? "" : getComputedStyle(this).direction !== "rtl" ? "" : `calc(${(this.valueEnd - this.min) / (this.max - this.min) * 100}% - 24px)` }, this.endThumbCssProperties));
    const ripple = !this.shouldRenderEndRipple ? nothing : html`<mwc-ripple class="ripple" unbounded></mwc-ripple>`;
    return html`
      <div
          class="mdc-slider__thumb end ${endThumbClasses}"
          style=${endThumbStyles}
          @mouseenter=${this.onEndMouseenter}
          @mouseleave=${this.onEndMouseleave}>
        ${ripple}
        ${this.renderValueIndicator(this.valueToValueIndicatorTransform(this.valueEnd))}
        <div class="mdc-slider__thumb-knob"></div>
      </div>
    `;
  }
  renderValueIndicator(text) {
    return this.discrete ? html`
    <div class="mdc-slider__value-indicator-container" aria-hidden="true">
      <div class="mdc-slider__value-indicator">
        <span class="mdc-slider__value-indicator-text">
          ${text}
        </span>
      </div>
    </div>` : nothing;
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    if (this.mdcFoundation) {
      this.mdcFoundation.destroy();
    }
  }
  createAdapter() {
  }
  async firstUpdated() {
    super.firstUpdated();
    await this.layout(true);
  }
  updated(changed) {
    super.updated(changed);
    if (!this.mdcFoundation) {
      return;
    }
    if (changed.has("disabled")) {
      this.mdcFoundation.setDisabled(this.disabled);
    }
    if (changed.has("min")) {
      this.mdcFoundation.setMin(this.min);
    }
    if (changed.has("max")) {
      this.mdcFoundation.setMax(this.max);
    }
    if (changed.has("step")) {
      this.mdcFoundation.setStep(this.step);
    }
    if (changed.has("discrete")) {
      this.mdcFoundation.setIsDiscrete(this.discrete);
    }
    if (changed.has("withTickMarks")) {
      this.mdcFoundation.setHasTickMarks(this.withTickMarks);
    }
  }
  async layout(skipUpdateUI = false) {
    var _a;
    (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.layout({ skipUpdateUI });
    this.requestUpdate();
    await this.updateComplete;
  }
  onEndChange(e) {
    var _a;
    this.valueEnd = Number(e.target.value);
    (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.handleInputChange(Thumb.END);
  }
  onEndFocus() {
    var _a;
    (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.handleInputFocus(Thumb.END);
    this.endRippleHandlers.startFocus();
  }
  onEndBlur() {
    var _a;
    (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.handleInputBlur(Thumb.END);
    this.endRippleHandlers.endFocus();
  }
  onEndMouseenter() {
    var _a;
    (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.handleThumbMouseenter();
    this.endRippleHandlers.startHover();
  }
  onEndMouseleave() {
    var _a;
    (_a = this.mdcFoundation) === null || _a === void 0 ? void 0 : _a.handleThumbMouseleave();
    this.endRippleHandlers.endHover();
  }
  onPointerdown(e) {
    this.layout();
    if (this.mdcFoundation) {
      this.mdcFoundation.handlePointerdown(e);
      this.boundMoveListener = this.mdcFoundation.handleMove.bind(this.mdcFoundation);
      this.mdcRoot.addEventListener("pointermove", this.boundMoveListener);
    }
  }
  onPointerup() {
    if (this.mdcFoundation) {
      this.mdcFoundation.handleUp();
      if (this.boundMoveListener) {
        this.mdcRoot.removeEventListener("pointermove", this.boundMoveListener);
        this.boundMoveListener = null;
      }
    }
  }
  onContextmenu(e) {
    e.preventDefault();
  }
  setFormData(formData) {
    if (this.name) {
      formData.append(this.name, `${this.valueEnd}`);
    }
  }
};
__decorate([
  query("input.end")
], SliderBase.prototype, "formElement", void 0);
__decorate([
  query(".mdc-slider")
], SliderBase.prototype, "mdcRoot", void 0);
__decorate([
  query(".end.mdc-slider__thumb")
], SliderBase.prototype, "endThumb", void 0);
__decorate([
  query(".end.mdc-slider__thumb .mdc-slider__thumb-knob")
], SliderBase.prototype, "endThumbKnob", void 0);
__decorate([
  query(".end.mdc-slider__thumb .mdc-slider__value-indicator-container")
], SliderBase.prototype, "endValueIndicatorContainer", void 0);
__decorate([
  queryAsync(".end .ripple")
], SliderBase.prototype, "endRipple", void 0);
__decorate([
  property({ type: Boolean, reflect: true })
], SliderBase.prototype, "disabled", void 0);
__decorate([
  property({ type: Number })
], SliderBase.prototype, "min", void 0);
__decorate([
  property({ type: Number })
], SliderBase.prototype, "max", void 0);
__decorate([
  property({ type: Number })
], SliderBase.prototype, "valueEnd", void 0);
__decorate([
  property({ type: String })
], SliderBase.prototype, "name", void 0);
__decorate([
  property({ type: Number })
], SliderBase.prototype, "step", void 0);
__decorate([
  property({ type: Boolean })
], SliderBase.prototype, "withTickMarks", void 0);
__decorate([
  property({ type: Boolean })
], SliderBase.prototype, "discrete", void 0);
__decorate([
  state()
], SliderBase.prototype, "tickMarks", void 0);
__decorate([
  state()
], SliderBase.prototype, "trackTransformOriginStyle", void 0);
__decorate([
  state()
], SliderBase.prototype, "trackLeftStyle", void 0);
__decorate([
  state()
], SliderBase.prototype, "trackRightStyle", void 0);
__decorate([
  state()
], SliderBase.prototype, "trackTransitionStyle", void 0);
__decorate([
  state()
], SliderBase.prototype, "endThumbWithIndicator", void 0);
__decorate([
  state()
], SliderBase.prototype, "endThumbTop", void 0);
__decorate([
  state()
], SliderBase.prototype, "shouldRenderEndRipple", void 0);
__decorate([
  state()
], SliderBase.prototype, "endThumbTransformStyle", void 0);
__decorate([
  state()
], SliderBase.prototype, "endThumbTransitionStyle", void 0);
__decorate([
  state()
], SliderBase.prototype, "endThumbCssProperties", void 0);
__decorate([
  ariaProperty,
  property({ type: String, attribute: "aria-label" })
], SliderBase.prototype, "ariaLabel", void 0);
__decorate([
  ariaProperty,
  property({ type: String, attribute: "aria-labelledby" })
], SliderBase.prototype, "ariaLabelledBy", void 0);
__decorate([
  ariaProperty,
  property({ type: String, attribute: "aria-describedby" })
], SliderBase.prototype, "ariaDescribedBy", void 0);

// ../node_modules/@material/mwc-slider/slider-single-base.js
var SliderSingleBase = class extends SliderBase {
  get value() {
    return this.valueEnd;
  }
  set value(newVal) {
    this.valueEnd = newVal;
  }
  renderTrack() {
    const trackStyles = styleMap({
      "transform-origin": this.trackTransformOriginStyle,
      "left": this.trackLeftStyle,
      "right": this.trackRightStyle,
      "-webkit-transform": `scaleX(${(this.valueEnd - this.min) / (this.max - this.min)})`,
      "transform": `scaleX(${(this.valueEnd - this.min) / (this.max - this.min)})`,
      "-webkit-transition": this.trackTransitionStyle,
      "transition": this.trackTransitionStyle
    });
    return html`
      <div class="mdc-slider__track">
        <div class="mdc-slider__track--inactive"></div>
        <div class="mdc-slider__track--active">
          <div
              class="mdc-slider__track--active_fill"
              style=${trackStyles}>
          </div>
        </div>
      </div>`;
  }
  createAdapter() {
    return {
      addClass: (className) => {
        switch (className) {
          case "mdc-slider--disabled":
            this.disabled = true;
            break;
        }
      },
      removeClass: (className) => {
        switch (className) {
          case "mdc-slider--disabled":
            this.disabled = false;
            break;
        }
      },
      hasClass: (className) => {
        switch (className) {
          case "mdc-slider--disabled":
            return this.disabled;
          case "mdc-slider--discrete":
            return this.discrete;
          default:
            return false;
        }
      },
      addThumbClass: (className, thumb) => {
        if (thumb === Thumb.START) {
          return;
        }
        switch (className) {
          case "mdc-slider__thumb--with-indicator":
            this.endThumbWithIndicator = true;
            break;
        }
      },
      removeThumbClass: (className, thumb) => {
        if (thumb === Thumb.START) {
          return;
        }
        switch (className) {
          case "mdc-slider__thumb--with-indicator":
            this.endThumbWithIndicator = false;
            break;
        }
      },
      registerEventHandler: () => {
      },
      deregisterEventHandler: () => {
      },
      registerBodyEventHandler: (eventName, handler) => {
        document.body.addEventListener(eventName, handler);
      },
      deregisterBodyEventHandler: (eventName, handler) => {
        document.body.removeEventListener(eventName, handler);
      },
      registerInputEventHandler: (thumb, eventName, handler) => {
        if (thumb === Thumb.START) {
          return;
        }
        this.formElement.addEventListener(eventName, handler);
      },
      deregisterInputEventHandler: (thumb, eventName, handler) => {
        if (thumb === Thumb.START) {
          return;
        }
        this.formElement.removeEventListener(eventName, handler);
      },
      registerThumbEventHandler: () => {
      },
      deregisterThumbEventHandler: () => {
      },
      registerWindowEventHandler: (eventName, handler) => {
        window.addEventListener(eventName, handler);
      },
      deregisterWindowEventHandler: (eventName, handler) => {
        window.addEventListener(eventName, handler);
      },
      emitChangeEvent: (value, thumb) => {
        if (thumb === Thumb.START) {
          return;
        }
        const event = new CustomEvent("change", { bubbles: true, composed: true, detail: { value, thumb } });
        this.dispatchEvent(event);
      },
      emitDragEndEvent: (_value, thumb) => {
        if (thumb === Thumb.START) {
          return;
        }
        this.endRippleHandlers.endPress();
      },
      emitDragStartEvent: (_value, thumb) => {
        if (thumb === Thumb.START) {
          return;
        }
        this.endRippleHandlers.startPress();
      },
      emitInputEvent: (value, thumb) => {
        if (thumb === Thumb.START) {
          return;
        }
        const event = new CustomEvent("input", { bubbles: true, composed: true, detail: { value, thumb } });
        this.dispatchEvent(event);
      },
      focusInput: (thumb) => {
        if (thumb === Thumb.START) {
          return;
        }
        this.formElement.focus();
      },
      getAttribute: () => {
        return "";
      },
      getBoundingClientRect: () => {
        return this.mdcRoot.getBoundingClientRect();
      },
      getInputAttribute: (attrName, thumb) => {
        if (thumb === Thumb.START) {
          return null;
        }
        switch (attrName) {
          case "min":
            return this.min.toString();
          case "max":
            return this.max.toString();
          case "value":
            return this.valueEnd.toString();
          case "step":
            return this.step.toString();
          default:
            return null;
        }
      },
      getInputValue: (thumb) => {
        if (thumb === Thumb.START) {
          return "";
        }
        return this.valueEnd.toString();
      },
      getThumbBoundingClientRect: (thumb) => {
        if (thumb === Thumb.START) {
          return this.getBoundingClientRect();
        }
        return this.endThumb.getBoundingClientRect();
      },
      getThumbKnobWidth: (thumb) => {
        if (thumb === Thumb.START) {
          return 0;
        }
        return this.endThumbKnob.getBoundingClientRect().width;
      },
      getValueIndicatorContainerWidth: (thumb) => {
        if (thumb === Thumb.START) {
          return 0;
        }
        return this.endValueIndicatorContainer.getBoundingClientRect().width;
      },
      getValueToAriaValueTextFn: () => {
        return this.valueToAriaTextTransform;
      },
      isInputFocused: (thumb) => {
        if (thumb === Thumb.START) {
          return false;
        }
        const activeElements = deepActiveElementPath();
        return activeElements[activeElements.length - 1] === this.formElement;
      },
      isRTL: () => {
        return getComputedStyle(this).direction === "rtl";
      },
      setInputAttribute: (attribute, _value, thumb) => {
        if (thumb === Thumb.START) {
          return;
        }
        switch (attribute) {
          case "disabled":
          case "value":
          case "aria-valuetext":
            break;
        }
      },
      removeInputAttribute: (attribute) => {
        switch (attribute) {
          case "disabled":
            break;
        }
      },
      setThumbStyleProperty: (name, value, thumb) => {
        if (thumb === Thumb.START) {
          return;
        }
        switch (name) {
          case "transform":
          case "-webkit-transform":
            this.endThumbTransformStyle = value;
            break;
          case "transition":
          case "-webkit-transition":
            this.endThumbTransitionStyle = value;
            break;
          default:
            if (name.startsWith("--")) {
              this.endThumbCssProperties[name] = value;
            }
        }
      },
      removeThumbStyleProperty: (name, thumb) => {
        if (thumb === Thumb.START) {
          return;
        }
        switch (name) {
          case "left":
          case "right":
            break;
          case "transition":
          case "-webkit-transition":
            this.endThumbTransitionStyle = "";
            break;
        }
      },
      setTrackActiveStyleProperty: (name, value) => {
        switch (name) {
          case "transform-origin":
            this.trackTransformOriginStyle = value;
            break;
          case "left":
            this.trackLeftStyle = value;
            break;
          case "right":
            this.trackRightStyle = value;
            break;
          case "transform":
          case "-webkit-transform":
            break;
          case "transition":
          case "-webkit-transition":
            this.trackTransitionStyle = value;
            break;
        }
      },
      removeTrackActiveStyleProperty: (name) => {
        switch (name) {
          case "transition":
          case "-webkit-transition":
            this.trackTransitionStyle = "";
            break;
        }
      },
      setInputValue: (value, thumb) => {
        if (thumb === Thumb.START) {
          return;
        }
        this.valueEnd = Number(value);
      },
      setPointerCapture: (pointerId) => {
        this.mdcRoot.setPointerCapture(pointerId);
      },
      setValueIndicatorText: () => {
      },
      updateTickMarks: (tickMarks) => {
        this.tickMarks = tickMarks;
      }
    };
  }
};
__decorate([
  property({ type: Number })
], SliderSingleBase.prototype, "value", null);

// ../node_modules/@material/mwc-slider/slider.js
var Slider = class Slider2 extends SliderSingleBase {
};
Slider.styles = [styles];
Slider = __decorate([
  customElement("mwc-slider")
], Slider);
export {
  Slider,
  Thumb
};
/*! Bundled license information:

@material/mwc-slider/mwc-slider.css.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-LIcense-Identifier: Apache-2.0
   *)

@material/slider/types.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/animation/animationframe.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/animation/util.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/slider/constants.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/slider/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/mwc-slider/slider-base.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)

@material/mwc-slider/slider-single-base.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)

@material/mwc-slider/slider.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=@material_mwc-slider.js.map
