import {
  BaseElement
} from "./chunk-K2GWU6W5.js";
import {
  property
} from "./chunk-LLKFEKJC.js";

// ../node_modules/@material/mwc-base/node_modules/tslib/tslib.es6.js
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

// ../node_modules/@material/mwc-base/form-element.js
var _a;
var _b;
var USING_SHADY_DOM = (_b = (_a = window.ShadyDOM) === null || _a === void 0 ? void 0 : _a.inUse) !== null && _b !== void 0 ? _b : false;
var FormElement = class extends BaseElement {
  constructor() {
    super(...arguments);
    this.disabled = false;
    this.containingForm = null;
    this.formDataListener = (ev) => {
      if (!this.disabled) {
        this.setFormData(ev.formData);
      }
    };
  }
  findFormElement() {
    if (!this.shadowRoot || USING_SHADY_DOM) {
      return null;
    }
    const root = this.getRootNode();
    const forms = root.querySelectorAll("form");
    for (const form of Array.from(forms)) {
      if (form.contains(this)) {
        return form;
      }
    }
    return null;
  }
  connectedCallback() {
    var _a2;
    super.connectedCallback();
    this.containingForm = this.findFormElement();
    (_a2 = this.containingForm) === null || _a2 === void 0 ? void 0 : _a2.addEventListener("formdata", this.formDataListener);
  }
  disconnectedCallback() {
    var _a2;
    super.disconnectedCallback();
    (_a2 = this.containingForm) === null || _a2 === void 0 ? void 0 : _a2.removeEventListener("formdata", this.formDataListener);
    this.containingForm = null;
  }
  click() {
    if (this.formElement && !this.disabled) {
      this.formElement.focus();
      this.formElement.click();
    }
  }
  firstUpdated() {
    super.firstUpdated();
    if (this.shadowRoot) {
      this.mdcRoot.addEventListener("change", (e) => {
        this.dispatchEvent(new Event("change", e));
      });
    }
  }
};
FormElement.shadowRootOptions = { mode: "open", delegatesFocus: true };
__decorate([
  property({ type: Boolean })
], FormElement.prototype, "disabled", void 0);

export {
  FormElement
};
/*! Bundled license information:

@material/mwc-base/form-element.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
//# sourceMappingURL=chunk-BJ2UCMSJ.js.map
