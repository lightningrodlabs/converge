{"compilerOptions":{"css":"external","dev":true},"configFile":"/home/leo/hApps/converge/ui/svelte.config.js","extensions":[".svelte"],"preprocess":{"script":"async script({ attributes, content, filename = \"\" }) {\n      const lang = attributes.lang;\n      if (!supportedScriptLangs.includes(lang))\n        return;\n      const { code, map } = await transformWithEsbuild(content, filename, {\n        loader: lang,\n        target: \"esnext\",\n        tsconfigRaw: {\n          compilerOptions: {\n            // svelte typescript needs this flag to work with type imports\n            importsNotUsedAsValues: \"preserve\",\n            preserveValueImports: true\n          }\n        }\n      });\n      mapToRelative(map, filename);\n      return {\n        code,\n        map\n      };\n    }","style":"async ({ attributes, content, filename = \"\" }) => {\n    const lang = attributes.lang;\n    if (!supportedStyleLangs.includes(lang))\n      return;\n    if (!transform) {\n      let resolvedConfig;\n      if (style.__resolvedConfig) {\n        resolvedConfig = style.__resolvedConfig;\n      } else if (isResolvedConfig(config)) {\n        resolvedConfig = config;\n      } else {\n        resolvedConfig = await resolveConfig(\n          config,\n          process.env.NODE_ENV === \"production\" ? \"build\" : \"serve\"\n        );\n      }\n      transform = getCssTransformFn(resolvedConfig);\n    }\n    const suffix = `${lang_sep}${lang}`;\n    const moduleId = `${filename}${suffix}`;\n    const { code, map, deps } = await transform(content, moduleId);\n    removeLangSuffix(map, suffix);\n    mapToRelative(map, filename);\n    const dependencies = deps ? Array.from(deps).filter((d) => !d.endsWith(suffix)) : void 0;\n    return {\n      code,\n      map: map ?? void 0,\n      dependencies\n    };\n  }"}}