import { Readable } from "svelte/store";
import { AsyncReadable } from "./async-readable.js";
type StoreValue<T> = T extends AsyncReadable<infer U> ? U : T extends Readable<infer U> ? U : never;
type AsyncStoreValue<T> = T extends AsyncReadable<infer U> ? U : never;
/** One or more values from `Readable` stores. */
type StoresValues<T> = {
    [K in keyof T]: StoreValue<T[K]>;
};
export declare function asyncDerived<T, S extends AsyncReadable<any>>(store: S, derive: (value: AsyncStoreValue<S>) => Promise<T> | T): AsyncReadable<T>;
export declare function join<S extends Array<AsyncReadable<any> | Readable<any>>>(stores: S): AsyncReadable<StoresValues<S>>;
export declare function deriveStore<T, S extends Readable<any>>(store: S, deriveStoreFn: (value: StoreValue<S>) => Readable<T>): Readable<T>;
export declare function asyncDeriveStore<T, S extends AsyncReadable<any>>(store: S, deriveStoreFn: (value: AsyncStoreValue<S>) => AsyncReadable<T> | Promise<AsyncReadable<T>>): AsyncReadable<T>;
export declare function asyncDeriveAndJoin<T, U>(store: AsyncReadable<T>, fn: (arg: T) => AsyncReadable<U>): AsyncReadable<[T, U]>;
export {};
