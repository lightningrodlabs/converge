import { HoloHashMap, LazyHoloHashMap } from "./holo-hash-map.js";
// Create a new slice of this map that contains only the given keys
export function slice(map, keys) {
    const newMap = new HoloHashMap();
    for (const key of keys) {
        newMap.set(key, map.get(key));
    }
    return newMap;
}
// Create a new map with only the keys that pass the given filter function
export function pick(map, filter) {
    const values = pickBy(map, (_v, k) => filter(k));
    return new HoloHashMap(Object.values(values).map(({ hash, value }) => [hash, value]));
}
// Create a new map with only the key-value pairs that pass the given filter function
export function pickBy(map, filter) {
    const entries = Array.from(map.entries()).filter(([key, value]) => filter(value, key));
    return new HoloHashMap(entries);
}
// Create a new map maintaining the keys while mapping the values with the given mapping function
export function mapValues(map, mappingFn) {
    const mappedMap = new HoloHashMap();
    for (const [key, value] of map.entries()) {
        mappedMap.set(key, mappingFn(value, key));
    }
    return mappedMap;
}
// Map the given LazyHoloHashMap's values with the given mapping function
export function mapLazyValues(map, mappingFn) {
    return new LazyHoloHashMap((key) => {
        const value = map.get(key);
        return mappingFn(value, key);
    });
}
//# sourceMappingURL=map-utils.js.map