import { AgentPubKey, AppAgentClient, AppAgentEvents, AppCreateCloneCellRequest, AppInfo, AppSignalCb, CallZomeRequest, CellId, ClonedCell, DisableCloneCellRequest, DisableCloneCellResponse, EnableCloneCellRequest, EnableCloneCellResponse } from "@holochain/client";
import Emittery, { UnsubscribeFunction } from "emittery";
export declare class ZomeMock implements AppAgentClient {
    protected roleName: string;
    protected zomeName: string;
    myPubKey: AgentPubKey;
    protected latency: number;
    emitter: Emittery<Record<PropertyKey, any>, Record<PropertyKey, any> & import("emittery").OmnipresentEventData, import("emittery").DatalessEventNames<Record<PropertyKey, any>>>;
    constructor(roleName: string, zomeName: string, myPubKey?: AgentPubKey, latency?: number);
    get cellId(): CellId;
    appInfo(): Promise<AppInfo>;
    createCloneCell(_args: AppCreateCloneCellRequest): Promise<ClonedCell>;
    enableCloneCell(_args: EnableCloneCellRequest): Promise<EnableCloneCellResponse>;
    disableCloneCell(_args: DisableCloneCellRequest): Promise<DisableCloneCellResponse>;
    callZome(req: CallZomeRequest): Promise<any>;
    on<Name extends keyof AppAgentEvents>(eventName: Name | readonly Name[], listener: AppSignalCb): UnsubscribeFunction;
    protected emitSignal(payload: any): void;
}
