import { decodeHashFromBase64, } from "@holochain/client";
import Emittery from "emittery";
const sleep = (ms) => new Promise((r) => {
    setTimeout(() => r(null), ms);
});
export class ZomeMock {
    constructor(roleName, zomeName, myPubKey = decodeHashFromBase64("uhCAk6oBoqygFqkDreZ0V0bH4R9cTN1OkcEG78OLxVptLWOI"), latency = 500) {
        this.roleName = roleName;
        this.zomeName = zomeName;
        this.myPubKey = myPubKey;
        this.latency = latency;
        this.emitter = new Emittery();
    }
    get cellId() {
        return [
            decodeHashFromBase64("uhCAk6oBoqygFqkDreZ0V0bH4R9cTN1OkcEG78OLxVptLWOI"),
            this.myPubKey,
        ];
    }
    async appInfo() {
        return {
            agent_pub_key: this.myPubKey,
            installed_app_id: "test-app",
            status: { running: null },
            cell_info: {
                [this.roleName]: [
                    {
                        provisioned: {
                            cell_id: this.cellId,
                            name: this.roleName,
                            dna_modifiers: {
                                network_seed: "",
                                origin_time: Date.now(),
                                properties: undefined,
                                quantum_time: {
                                    secs: Date.now() / 1000,
                                    nanos: 0,
                                },
                            },
                        },
                    },
                ],
            },
        };
    }
    createCloneCell(_args) {
        throw new Error("Method not implemented.");
    }
    enableCloneCell(_args) {
        throw new Error("Method not implemented");
    }
    disableCloneCell(_args) {
        throw new Error("Method not implemented");
    }
    async callZome(req) {
        await sleep(this.latency);
        return this[req.fn_name](req.payload);
    }
    on(eventName, listener) {
        return this.emitter.on(eventName, listener);
    }
    emitSignal(payload) {
        this.emitter.emit("signal", {
            cell_id: this.cellId,
            zome_name: this.zomeName,
            payload,
        });
    }
}
//# sourceMappingURL=zome-mock.js.map