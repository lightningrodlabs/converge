import { ActionHash, AgentPubKey, CellId, DnaHash, EntryHash, HoloHash } from "@holochain/client";
export declare class HoloHashMap<K extends HoloHash, V> implements Map<K, V> {
    _map: Map<string, V>;
    constructor(initialEntries?: Array<[K, V]>);
    has(key: K): boolean;
    get(key: K): V;
    set(key: K, value: V): this;
    delete(key: K): boolean;
    keys(): IterableIterator<K>;
    values(): IterableIterator<V>;
    entries(): IterableIterator<[K, V]>;
    clear(): void;
    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void;
    get size(): number;
    [Symbol.iterator](): IterableIterator<[K, V]>;
    get [Symbol.toStringTag](): string;
}
export declare class EntryHashMap<T> extends HoloHashMap<EntryHash, T> {
}
export declare class ActionHashMap<T> extends HoloHashMap<ActionHash, T> {
}
export declare class AgentPubKeyMap<T> extends HoloHashMap<AgentPubKey, T> {
}
export declare class DnaHashMap<T> extends HoloHashMap<DnaHash, T> {
}
export declare class CellMap<T> {
    #private;
    constructor(initialEntries?: Array<[CellId, T]>);
    get([dnaHash, agentPubKey]: CellId): T | undefined;
    has(cellId: CellId): boolean;
    valuesForDna(dnaHash: DnaHash): Array<T>;
    agentsForDna(dnaHash: DnaHash): Array<AgentPubKey>;
    set([dnaHash, agentPubKey]: CellId, value: T): void;
    delete([dnaHash, agentPubKey]: CellId): void;
    entries(): Array<[CellId, T]>;
    filter(fn: (value: T) => boolean): CellMap<T>;
    map<R>(fn: (value: T) => R): CellMap<R>;
    values(): Array<T>;
    cellIds(): Array<CellId>;
}
export interface GetonlyMap<K, V> {
    get(key: K): V;
}
export declare class LazyMap<K, V> implements GetonlyMap<K, V> {
    protected newValue: (hash: K) => V;
    map: Map<K, V>;
    constructor(newValue: (hash: K) => V);
    get(hash: K): V;
}
export declare class LazyHoloHashMap<K extends HoloHash, V> implements GetonlyMap<K, V> {
    protected newValue: (hash: K) => V;
    map: HoloHashMap<K, V>;
    constructor(newValue: (hash: K) => V);
    get(hash: K): V;
}
