{"version":3,"file":"list-profiles.js","sourceRoot":"","sources":["../../src/elements/list-profiles.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE5D,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAC5C,OAAO,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAC5D,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAC7D,OAAO,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;AAE/C,OAAO,6DAA6D,CAAC;AACrE,OAAO,mBAAmB,CAAC;AAC3B,OAAO,iCAAiC,CAAC;AAGzC,OAAO,EAAE,oBAAoB,EAAE,MAAM,YAAY,CAAC;AAGlD;;;GAGG;AAGI,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,UAAU;IAArC;;QAQL,yBAAyB;QAEzB;;WAEG;QACK,iBAAY,GAAG,IAAI,eAAe,CACxC,IAAI,EACJ,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAC7B,CAAC;IAwEJ,CAAC;IAtEC,QAAQ,CAAC,QAAgB;QACvB,OAAO,QAAQ;aACZ,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACtB,IAAI,CAAC,EAAE,CAAC,CAAC;IACd,CAAC;IAED,iBAAiB,CAAC,WAAwB;QACxC,IAAI,WAAW,EAAE;YACf,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,gBAAgB,EAAE;gBAChC,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE;oBACN,WAAW;iBACZ;aACF,CAAC,CACH,CAAC;SACH;IACH,CAAC;IAED,UAAU,CAAC,QAA2C;QACpD,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC;YACrB,OAAO,IAAI,CAAA,SAAS,GAAG,CAAC,mCAAmC,CAAC,WAAW,CAAC;QAE1E,OAAO,IAAI,CAAA;;UAEL,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAClC,CAAC,CAAC,aAAa,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,IAAI,CAAA;;;;+BAIb,aAAa;yBACnB,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC;;;wBAG5C,OAAO,CAAC,QAAQ;;WAE7B,CACF;;KAEJ,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,QAAQ,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,EAAE;YACtC,KAAK,SAAS;gBACZ,OAAO,IAAI,CAAA;;;;eAIJ,CAAC;YACV,KAAK,OAAO;gBACV,OAAO,IAAI,CAAA;sBACG,GAAG,CAAC,4CAA4C,CAAC;mBACpD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK;0BACtB,CAAC;YACrB,KAAK,UAAU;gBACb,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACzD;IACH,CAAC;;AAEM,mBAAM,GAAG;IACd,YAAY;IACZ,GAAG,CAAA;;;;KAIF;CACF,CAAC;AAjFF;IAFC,OAAO,CAAC,EAAE,OAAO,EAAE,oBAAoB,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC3D,QAAQ,EAAE;2CACW;AANX,YAAY;IAFxB,SAAS,EAAE;IACX,aAAa,CAAC,eAAe,CAAC;GAClB,YAAY,CAwFxB;SAxFY,YAAY","sourcesContent":["import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators.js\";\nimport { AgentPubKey } from \"@holochain/client\";\nimport { consume } from \"@lit-labs/context\";\nimport { sharedStyles } from \"@holochain-open-dev/elements\";\nimport { StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { localized, msg } from \"@lit/localize\";\n\nimport \"@holochain-open-dev/elements/dist/elements/display-error.js\";\nimport \"./agent-avatar.js\";\nimport \"./profile-list-item-skeleton.js\";\n\nimport { ProfilesStore } from \"../profiles-store\";\nimport { profilesStoreContext } from \"../context\";\nimport { Profile } from \"../types\";\n\n/**\n * @element list-profiles\n * @fires agent-selected - Fired when the user selects an agent from the list. Detail will have this shape: { agentPubKey: <AGENT_PUB_KEY as Uint8Array> }\n */\n@localized()\n@customElement(\"list-profiles\")\nexport class ListProfiles extends LitElement {\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /** Private properties */\n\n  /**\n   * @internal\n   */\n  private _allProfiles = new StoreSubscriber(\n    this,\n    () => this.store.allProfiles\n  );\n\n  initials(nickname: string): string {\n    return nickname\n      .split(\" \")\n      .map((name) => name[0])\n      .join(\"\");\n  }\n\n  fireAgentSelected(agentPubKey: AgentPubKey) {\n    if (agentPubKey) {\n      this.dispatchEvent(\n        new CustomEvent(\"agent-selected\", {\n          bubbles: true,\n          composed: true,\n          detail: {\n            agentPubKey,\n          },\n        })\n      );\n    }\n  }\n\n  renderList(profiles: ReadonlyMap<AgentPubKey, Profile>) {\n    if (profiles.size === 0)\n      return html`<span>${msg(\"There are no created profiles yet\")} ></span>`;\n\n    return html`\n      <div style=\"min-width: 80px; flex: 1;\" }>\n        ${Array.from(profiles.entries()).map(\n          ([agent_pub_key, profile]) => html`\n            <div class=\"row\" style=\"align-items: center; margin-bottom: 16px;\">\n              <agent-avatar\n                style=\"margin-right: 8px;\"\n                .agentPubKey=${agent_pub_key}\n                @click=${() => this.fireAgentSelected(agent_pub_key)}\n              >\n              </agent-avatar\n              ><span> ${profile.nickname}</span>\n            </div>\n          `\n        )}\n      </div>\n    `;\n  }\n\n  render() {\n    switch (this._allProfiles.value.status) {\n      case \"pending\":\n        return html`<div class=\"column center-content\">\n          <profile-list-item-skeleton> </profile-list-item-skeleton>\n          <profile-list-item-skeleton> </profile-list-item-skeleton>\n          <profile-list-item-skeleton> </profile-list-item-skeleton>\n        </div>`;\n      case \"error\":\n        return html`<display-error\n          .headline=${msg(\"Error fetching the profiles for all agents\")}\n          .error=${this._allProfiles.value.error}\n        ></display-error>`;\n      case \"complete\":\n        return this.renderList(this._allProfiles.value.value);\n    }\n  }\n\n  static styles = [\n    sharedStyles,\n    css`\n      :host {\n        display: flex;\n      }\n    `,\n  ];\n}\n"]}