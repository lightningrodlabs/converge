{"version":3,"file":"agent-avatar.js","sourceRoot":"","sources":["../../src/elements/agent-avatar.ts"],"names":[],"mappings":"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","sourcesContent":["import { consume } from \"@lit-labs/context\";\nimport { hashProperty, sharedStyles } from \"@holochain-open-dev/elements\";\nimport { css, html, LitElement } from \"lit\";\nimport { state, property, customElement } from \"lit/decorators.js\";\nimport { styleMap } from \"lit-html/directives/style-map.js\";\nimport { AgentPubKey, encodeHashToBase64 } from \"@holochain/client\";\nimport { localized, msg } from \"@lit/localize\";\nimport { StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { SlTooltip } from \"@shoelace-style/shoelace\";\n\nimport \"@holochain-open-dev/elements/dist/elements/display-error.js\";\nimport \"@holochain-open-dev/elements/dist/elements/holo-identicon.js\";\nimport \"@shoelace-style/shoelace/dist/components/avatar/avatar.js\";\nimport \"@shoelace-style/shoelace/dist/components/skeleton/skeleton.js\";\nimport \"@shoelace-style/shoelace/dist/components/tooltip/tooltip.js\";\n\nimport { profilesStoreContext } from \"../context.js\";\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { Profile } from \"../types.js\";\n\n@localized()\n@customElement(\"agent-avatar\")\nexport class AgentAvatar extends LitElement {\n  /** Public properties */\n\n  /**\n   * REQUIRED. The public key identifying the agent whose profile is going to be shown.\n   */\n  @property(hashProperty(\"agent-pub-key\"))\n  agentPubKey!: AgentPubKey;\n\n  /**\n   * Size of the avatar image in pixels.\n   */\n  @property({ type: Number })\n  size = 32;\n\n  /**\n   * Disables showing the tooltip for the public key\n   */\n  @property({ type: Boolean, attribute: \"disable-tooltip\" })\n  disableTooltip = false;\n\n  /**\n   * Disable copying of the public key on click\n   */\n  @property({ type: Boolean, attribute: \"disable-copy\" })\n  disableCopy = false;\n\n  /** Dependencies */\n\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /**\n   * @internal\n   */\n  private _agentProfile = new StoreSubscriber(\n    this,\n    () => this.store.profiles.get(this.agentPubKey),\n    () => [this.agentPubKey]\n  );\n\n  renderIdenticon() {\n    return html` <div\n      style=${styleMap({\n        position: \"relative\",\n        height: `${this.size}px`,\n        width: `${this.size}px`,\n      })}\n    >\n      <holo-identicon\n        .disableCopy=${this.disableCopy}\n        .disableTooltip=${this.disableTooltip}\n        .hash=${this.agentPubKey}\n        .size=${this.size}\n      >\n      </holo-identicon>\n      <div class=\"badge\"><slot name=\"badge\"></slot></div>\n    </div>`;\n  }\n\n  /**\n   * @internal\n   */\n  @state()\n  justCopiedHash = false;\n\n  /**\n   * @internal\n   */\n  timeout: any;\n\n  async copyHash() {\n    await navigator.clipboard.writeText(encodeHashToBase64(this.agentPubKey));\n\n    if (this.timeout) clearTimeout(this.timeout);\n\n    this.justCopiedHash = true;\n    (this.shadowRoot!.getElementById(\"tooltip\") as SlTooltip).show();\n\n    this.timeout = setTimeout(() => {\n      (this.shadowRoot!.getElementById(\"tooltip\") as SlTooltip).hide();\n      setTimeout(() => {\n        this.justCopiedHash = false;\n      }, 100);\n    }, 2000);\n  }\n\n  renderProfile(profile: Profile | undefined) {\n    if (!profile || !profile.fields.avatar) return this.renderIdenticon();\n\n    const contents = html`\n      <div\n        @click=${() => {\n          if (!this.disableCopy) this.copyHash();\n        }}\n        style=${styleMap({\n          cursor: this.disableCopy ? \"\" : \"pointer\",\n          position: \"relative\",\n          height: `${this.size}px`,\n          width: `${this.size}px`,\n        })}\n      >\n        <sl-avatar\n          .image=${profile.fields.avatar}\n          style=\"--size: ${this.size}px;\"\n        >\n        </sl-avatar>\n        <div class=\"badge\"><slot name=\"badge\"></slot></div>\n      </div>\n    `;\n\n    return html`\n      <sl-tooltip\n        id=\"tooltip\"\n        placement=\"top\"\n        .content=${this.justCopiedHash || this.disableTooltip\n          ? msg(\"Copied!\")\n          : `${encodeHashToBase64(this.agentPubKey).substring(0, 6)}...`}\n        .trigger=${this.disableTooltip || this.justCopiedHash\n          ? \"manual\"\n          : \"hover focus\"}\n        hoist\n      >\n        ${contents}\n      </sl-tooltip>\n    `;\n  }\n\n  render() {\n    if (this.store.config.avatarMode === \"identicon\")\n      return this.renderIdenticon();\n    switch (this._agentProfile.value.status) {\n      case \"pending\":\n        return html`<sl-skeleton\n          effect=\"pulse\"\n          style=\"height: ${this.size}px; width: ${this.size}px\"\n        ></sl-skeleton>`;\n      case \"complete\":\n        return this.renderProfile(this._agentProfile.value.value);\n      case \"error\":\n        return html`\n          <display-error\n            tooltip\n            .headline=${msg(\"Error fetching the agent's avatar\")}\n            .error=${this._agentProfile.value.error}\n          ></display-error>\n        `;\n    }\n  }\n\n  static styles = [\n    sharedStyles,\n    css`\n      .badge {\n        position: absolute;\n        right: 0;\n        bottom: 0;\n      }\n    `,\n  ];\n}\n"]}