{"version":3,"file":"profiles-client.js","sourceRoot":"","sources":["../src/profiles-client.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AASpE,MAAM,OAAO,cAAe,SAAQ,UAA0B;IAC5D,YACS,MAAsB,EACtB,QAAkB,EAClB,WAAW,UAAU;QAE5B,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAJ3B,WAAM,GAAN,MAAM,CAAgB;QACtB,aAAQ,GAAR,QAAQ,CAAU;QAClB,aAAQ,GAAR,QAAQ,CAAa;IAG9B,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,eAAe,CACnB,WAAwB;QAExB,MAAM,MAAM,GAAuB,MAAM,IAAI,CAAC,QAAQ,CACpD,mBAAmB,EACnB,WAAW,CACZ,CAAC;QAEF,OAAO,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,YAAY,CAAC,cAAsB;QACvC,OAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,oBAAoB;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,aAAa,CAAC,OAAgB;QAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,aAAa,CAAC,OAAgB;QAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;CACF","sourcesContent":["import { decodeEntry, ZomeClient } from \"@holochain-open-dev/utils\";\nimport {\n  AgentPubKey,\n  Record,\n  AppAgentClient,\n  RoleName,\n} from \"@holochain/client\";\nimport { Profile, ProfilesSignal } from \"./types\";\n\nexport class ProfilesClient extends ZomeClient<ProfilesSignal> {\n  constructor(\n    public client: AppAgentClient,\n    public roleName: RoleName,\n    public zomeName = \"profiles\"\n  ) {\n    super(client, roleName, zomeName);\n  }\n\n  /**\n   * Get the profile for the given agent, if they have created it\n   *\n   * @param agentPubKey the agent to get the profile for\n   * @returns the profile of the agent, if they have created one\n   */\n  async getAgentProfile(\n    agentPubKey: AgentPubKey\n  ): Promise<Profile | undefined> {\n    const record: Record | undefined = await this.callZome(\n      \"get_agent_profile\",\n      agentPubKey\n    );\n\n    return record ? decodeEntry(record) : undefined;\n  }\n\n  /**\n   * Search profiles that start with nicknameFilter\n   *\n   * @param nicknameFilter must be of at least 3 characters\n   * @returns the agents with the nickname starting with nicknameFilter\n   */\n  async searchAgents(nicknameFilter: string): Promise<AgentPubKey[]> {\n    return this.callZome(\"search_agents\", nicknameFilter);\n  }\n\n  /**\n   * Get all the agents in the DHT that have created a profile\n   *\n   * @returns the agent public keys of all agents that have created a profile\n   */\n  async getAgentsWithProfile(): Promise<AgentPubKey[]> {\n    return this.callZome(\"get_agents_with_profile\", null);\n  }\n\n  /**\n   * Create my profile\n   *\n   * @param profile the profile to create\n   */\n  async createProfile(profile: Profile): Promise<void> {\n    return this.callZome(\"create_profile\", profile);\n  }\n\n  /**\n   * Update my profile\n   *\n   * @param profile the profile to create\n   */\n  async updateProfile(profile: Profile): Promise<void> {\n    return this.callZome(\"update_profile\", profile);\n  }\n}\n"]}