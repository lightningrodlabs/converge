{"version":3,"file":"profiles-store.js","sourceRoot":"","sources":["../src/profiles-store.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,2BAA2B,CAAC;AACnE,OAAO,EACL,gBAAgB,EAEhB,aAAa,EACb,eAAe,EACf,YAAY,EACZ,QAAQ,EACR,iBAAiB,GAClB,MAAM,4BAA4B,CAAC;AAKpC,OAAO,EAAE,aAAa,EAAkB,MAAM,aAAa,CAAC;AAE5D,MAAM,OAAO,aAAa;IAGxB,YACS,MAAsB,EAC7B,SAAkC,EAAE;QAD7B,WAAM,GAAN,MAAM,CAAgB;QAM/B;;WAEG;QACH,sBAAiB,GAAG,eAAe,CACjC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,EACxC,IAAI,CACL,CAAC;QAEF;;;;WAIG;QACH,gBAAW,GAAG,gBAAgB,CAC5B,IAAI,CAAC,iBAAiB,EACtB,CAAC,MAAM,EAAE,EAAE,CACT,IAAI,CAAC,cAAc,CAAC,MAAM,CAEzB,CACJ,CAAC;QAEF,0CAA0C;QAC1C,aAAQ,GAAG,IAAI,eAAe,CAAC,CAAC,KAAkB,EAAE,EAAE,CACpD,aAAa,CAAsB,KAAK,EAAE,GAAG,EAAE,EAAE;YAC/C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YACzD,GAAG,CAAC,OAAO,CAAC,CAAC;YAEb,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,EAAE;gBACrC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC,QAAQ,EAAE;oBAAE,OAAO;gBACxE,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,cAAc,IAAI,MAAM,CAAC,IAAI,KAAK,cAAc,CAAC;oBACrE,OAAO;gBACT,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACxB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CACH,CAAC;QAEF,uBAAuB;QACvB,+EAA+E;QAC/E,cAAS,GAAG,iBAAiB,CAAC,KAAK,IAAI,EAAE,CACvC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CACzD,CAAC;QA3CA,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,aAAa,EAAE,GAAG,MAAM,EAAE,CAAC;IAChD,CAAC;IA4CD,4CAA4C;IAC5C,cAAc,CACZ,MAA0B;QAE1B,OAAO,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;IACpD,CAAC;IAED,cAAc,CACZ,YAAoB;QAEpB,OAAO,gBAAgB,CACrB,QAAQ,CAAC,KAAK,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,EAC5D,CAAC,MAAM,EAAE,EAAE,CACT,IAAI,CAAC,cAAc,CAAC,MAAM,CAEzB,CACJ,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { LazyHoloHashMap, slice } from \"@holochain-open-dev/utils\";\nimport {\n  asyncDeriveStore,\n  AsyncReadable,\n  asyncReadable,\n  lazyLoadAndPoll,\n  joinAsyncMap,\n  lazyLoad,\n  manualReloadStore,\n} from \"@holochain-open-dev/stores\";\nimport { AgentPubKey } from \"@holochain/client\";\n\nimport { ProfilesClient } from \"./profiles-client.js\";\nimport { Profile } from \"./types.js\";\nimport { defaultConfig, ProfilesConfig } from \"./config.js\";\n\nexport class ProfilesStore {\n  config: ProfilesConfig;\n\n  constructor(\n    public client: ProfilesClient,\n    config: Partial<ProfilesConfig> = {}\n  ) {\n    this.config = { ...defaultConfig, ...config };\n  }\n\n  /**\n   * Fetches all the agents that have created a profile in the DHT\n   */\n  agentsWithProfile = lazyLoadAndPoll(\n    () => this.client.getAgentsWithProfile(),\n    1000\n  );\n\n  /**\n   * Fetches the profiles for all agents in the DHT\n   *\n   * This will get slower as the number of agents in the DHT increases\n   */\n  allProfiles = asyncDeriveStore(\n    this.agentsWithProfile,\n    (agents) =>\n      this.agentsProfiles(agents) as AsyncReadable<\n        ReadonlyMap<AgentPubKey, Profile>\n      >\n  );\n\n  // Fetches the profile for the given agent\n  profiles = new LazyHoloHashMap((agent: AgentPubKey) =>\n    asyncReadable<Profile | undefined>(async (set) => {\n      const profile = await this.client.getAgentProfile(agent);\n      set(profile);\n\n      return this.client.onSignal((signal) => {\n        if (this.client.client.myPubKey.toString() !== agent.toString()) return;\n        if (!(signal.type === \"EntryCreated\" || signal.type === \"EntryUpdated\"))\n          return;\n        set(signal.app_entry);\n      });\n    })\n  );\n\n  // Fetches your profile\n  // TODO: change the manual implementation when signals are working consistently\n  myProfile = manualReloadStore(async () =>\n    this.client.getAgentProfile(this.client.client.myPubKey)\n  );\n\n  // Fetches the profiles for the given agents\n  agentsProfiles(\n    agents: Array<AgentPubKey>\n  ): AsyncReadable<ReadonlyMap<AgentPubKey, Profile | undefined>> {\n    return joinAsyncMap(slice(this.profiles, agents));\n  }\n\n  searchProfiles(\n    searchFilter: string\n  ): AsyncReadable<ReadonlyMap<AgentPubKey, Profile>> {\n    return asyncDeriveStore(\n      lazyLoad(async () => this.client.searchAgents(searchFilter)),\n      (agents) =>\n        this.agentsProfiles(agents) as AsyncReadable<\n          ReadonlyMap<AgentPubKey, Profile>\n        >\n    );\n  }\n}\n"]}