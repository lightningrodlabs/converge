import { directive, Directive } from "lit/directive.js";
function holoHashValue(value) {
    if (typeof value === "string" && value.split(",").length === 39)
        return new Uint8Array(value.split(",").map((s) => parseInt(s, 10)));
    return value;
}
/**
 * Serializes a form and returns a plain object. If a form control with the same name appears more than once, the
 * property will be converted to an array.
 */
export function serialize(form) {
    const formData = new FormData(form);
    const object = {};
    formData.forEach((value, key) => {
        if (Reflect.has(object, key)) {
            const entry = object[key];
            if (Array.isArray(entry)) {
                entry.push(holoHashValue(value));
            }
            else {
                object[key] = [object[key], holoHashValue(value)];
            }
        }
        else {
            object[key] = holoHashValue(value);
        }
    });
    return object;
}
class OnSubmitDirective extends Directive {
    constructor() {
        super(...arguments);
        this.initialized = false;
    }
    update(part, props) {
        if (!this.initialized) {
            this.initialized = true;
            const form = part.element;
            form.addEventListener("update-form", (e) => {
                if (this.listener) {
                    part.element.removeEventListener("submit", this.listener);
                }
                this.listener = (e) => {
                    e.preventDefault();
                    const formData = serialize(part.element);
                    props[0](formData);
                };
                part.element.addEventListener("submit", this.listener);
            });
        }
        setTimeout(() => {
            if (this.listener) {
                part.element.removeEventListener("submit", this.listener);
            }
            this.listener = (e) => {
                e.preventDefault();
                const formData = serialize(part.element);
                props[0](formData);
            };
            part.element.addEventListener("submit", this.listener);
        }, 100);
    }
    render(_onSubmitCallback) {
        return ``;
    }
}
export const onSubmit = directive(OnSubmitDirective);
//# sourceMappingURL=on-submit.js.map