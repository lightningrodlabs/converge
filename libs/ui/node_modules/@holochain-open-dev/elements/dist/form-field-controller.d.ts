import { ReactiveController, ReactiveControllerHost } from "lit";
export interface FormField {
    /** A function that returns the form control's name, which will be submitted with the form data. */
    name: string;
    /** A function that returns the form control's current value. */
    value: any;
    /** A function that returns the form control's current disabled state. If disabled, the value won't be submitted. */
    disabled: boolean;
    /**
     * A function that maps to the form control's reportValidity() function. When the control is invalid, this will
     * prevent submission and trigger the browser's constraint violation warning.
     */
    reportValidity?: () => boolean;
    reset?: () => void;
}
export declare class FormFieldController implements ReactiveController {
    protected host: ReactiveControllerHost & Element & FormField;
    form?: HTMLFormElement;
    constructor(host: ReactiveControllerHost & Element & FormField);
    closestElement(selector: string): any;
    hostConnected(): void;
    hostDisconnected(): void;
    handleFormData(event: FormDataEvent): void;
    handleFormSubmit(event: Event): void;
    handleFormReset(_event: Event): void;
}
