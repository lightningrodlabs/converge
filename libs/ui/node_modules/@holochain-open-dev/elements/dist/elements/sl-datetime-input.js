var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { localized } from "@lit/localize";
import { html, LitElement } from "lit";
import { customElement, property, query } from "lit/decorators.js";
import { FormFieldController } from "../form-field-controller.js";
import { sharedStyles } from "../shared-styles.js";
import { formatDateForInput } from "../date-utils.js";
let SlDatetimeInput = class SlDatetimeInput extends LitElement {
    constructor() {
        super(...arguments);
        this.defaultValue = new Date();
        this.required = false;
        this.disabled = false;
        this._controller = new FormFieldController(this);
    }
    toDate(d) {
        if (typeof d === "string" || typeof d === "number")
            return new Date(d);
        return d;
    }
    reportValidity() {
        if (this.disabled)
            return true;
        const value = this.value;
        if (!value && this.required) {
            const field = this.dateField.value ? this.timeField : this.dateField;
            field.setCustomValidity("Date and time are required");
            field.reportValidity();
            return false;
        }
        if (this.min) {
            if (this.toDate(this.min).valueOf() > new Date(value).valueOf()) {
                this.dateField.setCustomValidity(`Min. date is ${this.toDate(this.min).toLocaleString()}`);
                this.dateField.reportValidity();
                return false;
            }
        }
        if (this.max) {
            if (this.toDate(this.max).valueOf() < new Date(value).valueOf()) {
                this.dateField.setCustomValidity(`Max. date is ${this.toDate(this.max).toLocaleString()}`);
                this.dateField.reportValidity();
                return false;
            }
        }
        return true;
    }
    firstUpdated() {
        this.reset();
    }
    reset() {
        setTimeout(() => {
            this.dateField.value = this.defaultValue
                ? formatDateForInput(this.toDate(this.defaultValue)).slice(0, 10)
                : "";
            this.timeField.value = this.defaultValue
                ? formatDateForInput(this.toDate(this.defaultValue)).slice(11, 17)
                : "";
        });
    }
    get value() {
        const dateValue = this.dateField.value;
        const timeValue = this.timeField.value;
        if (!dateValue || !timeValue)
            return "";
        const date = new Date(`${dateValue}T${timeValue}`);
        return date.toISOString();
    }
    render() {
        return html `
      <div class="row" style="align-items: end">
        <sl-input
          id="date"
          type="date"
          .label=${this.required ? `${this.label}*` : this.label}
          .disabled=${this.disabled}
          style="margin-right: 8px; flex: 1"
        ></sl-input>

        <sl-input id="time" type="time" .disabled=${this.disabled}></sl-input>
      </div>
    `;
    }
};
SlDatetimeInput.styles = sharedStyles;
__decorate([
    property()
], SlDatetimeInput.prototype, "label", void 0);
__decorate([
    property()
], SlDatetimeInput.prototype, "name", void 0);
__decorate([
    property()
], SlDatetimeInput.prototype, "defaultValue", void 0);
__decorate([
    property({ type: Boolean, attribute: "required" })
], SlDatetimeInput.prototype, "required", void 0);
__decorate([
    property({ type: Boolean, attribute: "disabled" })
], SlDatetimeInput.prototype, "disabled", void 0);
__decorate([
    property()
], SlDatetimeInput.prototype, "min", void 0);
__decorate([
    property()
], SlDatetimeInput.prototype, "max", void 0);
__decorate([
    query("#date")
], SlDatetimeInput.prototype, "dateField", void 0);
__decorate([
    query("#time")
], SlDatetimeInput.prototype, "timeField", void 0);
SlDatetimeInput = __decorate([
    localized(),
    customElement("sl-datetime-input")
], SlDatetimeInput);
export { SlDatetimeInput };
//# sourceMappingURL=sl-datetime-input.js.map