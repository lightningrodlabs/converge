var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, LitElement } from "lit";
import { customElement, property, query } from "lit/decorators.js";
import { msg } from "@lit/localize";
import "@shoelace-style/shoelace/dist/components/avatar/avatar.js";
import "@shoelace-style/shoelace/dist/components/button/button.js";
import { mdiPlus } from "@mdi/js";
import { FormFieldController } from "../form-field-controller.js";
import { resizeAndExport } from "../image.js";
import { wrapPathInSvg } from "../icon.js";
import { sharedStyles } from "../shared-styles.js";
let SelectAvatar = class SelectAvatar extends LitElement {
    constructor() {
        super(...arguments);
        this.name = "avatar";
        this.required = false;
        this.shape = "circle";
        this.disabled = false;
        this.label = msg("Avatar");
        this._controller = new FormFieldController(this);
    }
    reportValidity() {
        const invalid = this.required !== false && !this.value;
        if (invalid) {
            this._errorInput.setCustomValidity("Avatar is required");
            this._errorInput.reportValidity();
        }
        return !invalid;
    }
    reset() {
        this.value = this.defaultValue;
    }
    onAvatarUploaded() {
        if (this._avatarFilePicker.files && this._avatarFilePicker.files[0]) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const img = new Image();
                img.crossOrigin = "anonymous";
                img.onload = () => {
                    this.value = resizeAndExport(img);
                    this._avatarFilePicker.value = "";
                };
                img.src = e.target?.result;
                this.dispatchEvent(new CustomEvent("avatar-selected", {
                    composed: true,
                    bubbles: true,
                    detail: {
                        avatar: img.src,
                    },
                }));
            };
            reader.readAsDataURL(this._avatarFilePicker.files[0]);
        }
    }
    renderAvatar() {
        if (this.value)
            return html `
        <div
          class="column"
          style="align-items: center; height: 50px"
          @click=${() => {
                this.value = undefined;
            }}
        >
          <sl-tooltip .content=${msg("Clear")}>
            <sl-avatar
              image="${this.value}"
              alt="Avatar"
              .shape=${this.shape}
              initials=""
            ></sl-avatar
          ></sl-tooltip>
        </div>
      `;
        else
            return html ` <div class="column" style="align-items: center;">
        <sl-button
          .disabled=${this.disabled}
          variant="default"
          size="large"
          circle
          @click=${() => this._avatarFilePicker.click()}
        >
          <sl-icon
            src="${wrapPathInSvg(mdiPlus)}"
            .label=${msg("Add avatar image")}
          ></sl-icon>
        </sl-button>
      </div>`;
    }
    render() {
        return html `<input
        type="file"
        id="avatar-file-picker"
        style="display: none"
        @change=${this.onAvatarUploaded}
      />
      <div class="column" style="position: relative; align-items: center">
        <input
          id="error-input"
          style="position: absolute; z-index: -1; left: 50%; top: 30px; height: 0; width: 0"
        />
        ${this.label !== ""
            ? html `
              <span
                style="font-size: var(--sl-input-label-font-size-medium); margin-bottom: 4px"
                >${this.label}${this.required !== false ? " *" : ""}</span
              >
            `
            : html ``}
        ${this.renderAvatar()}
      </div>`;
    }
};
SelectAvatar.styles = sharedStyles;
__decorate([
    property({ attribute: "name" })
], SelectAvatar.prototype, "name", void 0);
__decorate([
    property()
], SelectAvatar.prototype, "required", void 0);
__decorate([
    property()
], SelectAvatar.prototype, "shape", void 0);
__decorate([
    property()
], SelectAvatar.prototype, "value", void 0);
__decorate([
    property()
], SelectAvatar.prototype, "disabled", void 0);
__decorate([
    property()
], SelectAvatar.prototype, "defaultValue", void 0);
__decorate([
    property()
], SelectAvatar.prototype, "label", void 0);
__decorate([
    query("#avatar-file-picker")
], SelectAvatar.prototype, "_avatarFilePicker", void 0);
__decorate([
    query("#error-input")
], SelectAvatar.prototype, "_errorInput", void 0);
SelectAvatar = __decorate([
    customElement("select-avatar")
], SelectAvatar);
export { SelectAvatar };
//# sourceMappingURL=select-avatar.js.map