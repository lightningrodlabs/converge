var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, html, LitElement } from "lit";
import { property, customElement } from "lit/decorators.js";
import "@shoelace-style/shoelace/dist/components/tooltip/tooltip.js";
import "@shoelace-style/shoelace/dist/components/icon/icon.js";
import { mdiAlertCircleOutline } from "@mdi/js";
import { sharedStyles } from "../shared-styles.js";
import { wrapPathInSvg } from "../icon.js";
let DisplayError = class DisplayError extends LitElement {
    constructor() {
        super(...arguments);
        this.tooltip = false;
    }
    get _iconSize() {
        if (this.iconSize)
            return this.iconSize;
        if (this.tooltip !== false)
            return "32px";
        return "64px";
    }
    renderIcon() {
        return html `
      <sl-icon
        style="color: red; height: ${this._iconSize}; width: ${this
            ._iconSize}; margin-bottom: 8px;"
        src="${wrapPathInSvg(mdiAlertCircleOutline)}"
      ></sl-icon>
    `;
    }
    renderFull() {
        return html ` <div class="column center-content" style="flex: 1">
      ${this.renderIcon()}
      <div style="width: 500px; text-align: center" class="column">
        ${this.headline
            ? html ` <span style="margin-bottom: 8px">${this.headline} </span>`
            : html ``}
        <span class="placeholder"
          >${typeof this.error === "object" && "message" in this.error
            ? this.error.message
            : this.error}
        </span>
      </div>
    </div>`;
    }
    renderTooltip() {
        return html `
      <sl-tooltip hoist .content=${this.headline ? this.headline : this.error}>
        ${this.renderIcon()}</sl-tooltip
      >
    `;
    }
    render() {
        if (this.tooltip !== false)
            return this.renderTooltip();
        return this.renderFull();
    }
};
DisplayError.styles = [
    sharedStyles,
    css `
      :host {
        display: flex;
        flex: 1;
      }
    `,
];
__decorate([
    property({ attribute: "tooltip" })
], DisplayError.prototype, "tooltip", void 0);
__decorate([
    property()
], DisplayError.prototype, "headline", void 0);
__decorate([
    property()
], DisplayError.prototype, "error", void 0);
__decorate([
    property({ attribute: "icon-size" })
], DisplayError.prototype, "iconSize", void 0);
DisplayError = __decorate([
    customElement("display-error")
], DisplayError);
export { DisplayError };
//# sourceMappingURL=display-error.js.map