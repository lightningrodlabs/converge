var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { css, html, LitElement } from "lit";
import { customElement, property, query, state } from "lit/decorators.js";
import renderIcon from "@holo-host/identicon";
import { classMap } from "lit/directives/class-map.js";
import { encodeHashToBase64 } from "@holochain/client";
import { localized, msg } from "@lit/localize";
import "@shoelace-style/shoelace/dist/components/tooltip/tooltip.js";
import { hashProperty } from "../holo-hash-property.js";
let HoloIdenticon = class HoloIdenticon extends LitElement {
    constructor() {
        super(...arguments);
        /**
         * Size of the identicon in pixels.
         */
        this.size = 32;
        /**
         * Shape of the identicon.
         */
        this.shape = "circle";
        /**
         * Disables showing the tooltip for the hash
         */
        this.disableTooltip = false;
        /**
         * Disable copying of the hash on click
         */
        this.disableCopy = false;
        this.justCopiedHash = false;
    }
    async copyHash() {
        if (this.disableCopy)
            return;
        await navigator.clipboard.writeText(this.strHash);
        if (this.timeout)
            clearTimeout(this.timeout);
        this.justCopiedHash = true;
        this._tooltip.show();
        this.timeout = setTimeout(() => {
            this._tooltip.hide();
            setTimeout(() => {
                this.justCopiedHash = false;
            }, 100);
        }, 2000);
    }
    get strHash() {
        return encodeHashToBase64(this.hash);
    }
    updated(changedValues) {
        super.updated(changedValues);
        if ((changedValues.has("hash") &&
            changedValues.get("hash")?.toString() !== this.hash?.toString()) ||
            changedValues.has("size") ||
            changedValues.has("value")) {
            renderIcon({
                hash: this.hash,
                size: this.size,
            }, this._canvas);
        }
    }
    renderCanvas() {
        return html ` <canvas
      id="canvas"
      width="1"
      height="1"
      class=${classMap({
            square: this.shape === "square",
            circle: this.shape === "circle",
        })}
    ></canvas>`;
    }
    render() {
        return html `<div
      @click=${() => this.copyHash()}
      style="${this.disableCopy ? "" : "cursor: pointer;"} flex-grow: 0"
    >
      <sl-tooltip
        id="tooltip"
        placement="top"
        .content=${this.justCopiedHash
            ? msg("Copied!")
            : `${this.strHash.substring(0, 6)}...`}
        .trigger=${this.disableTooltip || this.justCopiedHash
            ? "manual"
            : "hover focus"}
        hoist
      >
        ${this.renderCanvas()}
      </sl-tooltip>
    </div>`;
    }
    static get styles() {
        return css `
      :host {
        display: flex;
      }

      .square {
        border-radius: 0%;
      }
      .circle {
        border-radius: 50%;
      }
    `;
    }
};
__decorate([
    property(hashProperty("hash"))
], HoloIdenticon.prototype, "hash", void 0);
__decorate([
    property({ type: Number })
], HoloIdenticon.prototype, "size", void 0);
__decorate([
    property({ type: String })
], HoloIdenticon.prototype, "shape", void 0);
__decorate([
    property({ type: Boolean, attribute: "disable-tooltip" })
], HoloIdenticon.prototype, "disableTooltip", void 0);
__decorate([
    property({ type: Boolean, attribute: "disable-copy" })
], HoloIdenticon.prototype, "disableCopy", void 0);
__decorate([
    query("#canvas")
], HoloIdenticon.prototype, "_canvas", void 0);
__decorate([
    query("#tooltip")
], HoloIdenticon.prototype, "_tooltip", void 0);
__decorate([
    state()
], HoloIdenticon.prototype, "justCopiedHash", void 0);
HoloIdenticon = __decorate([
    localized(),
    customElement("holo-identicon")
], HoloIdenticon);
export { HoloIdenticon };
//# sourceMappingURL=holo-identicon.js.map